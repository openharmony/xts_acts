/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import events_emitter from '@ohos.events.emitter';
import webview from '@ohos.web.webview';
import Utils from '../../test/Utils';
import business_error from '@ohos.base';

@Entry
@Component
struct webViewGetSecurityLevel {
  controller: webview.WebviewController = new webview.WebviewController();
  schemeHandler: webview.WebSchemeHandler = new webview.WebSchemeHandler()
  @State emitKey: string = '';
  @State javaScriptAccess: boolean = true;
  @State fileAccess: boolean = true;
  @State domStorageAccess: boolean = true;
  @State imageAccess: boolean = true;
  @State onlineImageAccess: boolean = true;
  @State databaseAccess: boolean = true;
  @State isFrameResourceType: boolean = false

  onPageShow() {
    let valueChangeEvent: events_emitter.InnerEvent = {
      eventId: 10,
      priority: events_emitter.EventPriority.LOW
    }
    events_emitter.on(valueChangeEvent, this.valueChangeCallBack)
  }

  private valueChangeCallBack = (eventData: events_emitter.EventData) => {
    if (eventData != null) {
      console.info('valueChangeCallBack:' + JSON.stringify(eventData));
      if (eventData.data != null && eventData.data.ACTION != null) {
        this.emitKey = eventData.data.ACTION;
      }
    }
  }

  build() {
    Column() {
      Row() {
        Button('web click')
          .key('webViewGetSecurityLevelButton')
          .onClick(async () => {
            console.info('key==>' + this.emitKey)
            await Utils.sleep(2000);
            switch (this.emitKey) {
              case 'emitWebViewGetSecurityLevel01': {
                try {
                  this.controller.loadUrl('https://weixin://dl/moments');
                  await Utils.sleep(2000);
                  let securityLevel = this.controller.getSecurityLevel();
                  console.log('securityLevel===>'+securityLevel)
                  if (securityLevel === 0) {
                    Utils.emitEvent('success', 8008);
                  } else {
                    Utils.emitEvent('fail', 8008);
                  }
                } catch (error) {
                  let e:business_error.BusinessError = error as business_error.BusinessError;
                  console.error(`ErrorCode: ${e.code},  Message: ${e.message}`);
                }
                break;
              }
              case 'emitWebViewGetSecurityLevel02': {
                try {
                  this.controller.loadUrl('https://www.pep.com.cn');
                  await Utils.sleep(2000);
                  let securityLevel = this.controller.getSecurityLevel();
                  console.log('securityLevel===>'+securityLevel)
                  if (securityLevel === 1) {
                    Utils.emitEvent('success', 62901);
                  } else {
                    Utils.emitEvent('fail', 62901);
                  }
                } catch (error) {
                  let e:business_error.BusinessError = error as business_error.BusinessError;
                  console.error(`ErrorCode: ${e.code},  Message: ${e.message}`);
                }
                break;
              }
              case 'emitWebViewGetSecurityLevel03': {
                try {
                  this.controller.loadUrl('http://hcl.baidu.com');
                  await Utils.sleep(2000);
                  let securityLevel = this.controller.getSecurityLevel();
                  console.log('securityLevel===>'+securityLevel)
                  if (securityLevel === 2) {
                    Utils.emitEvent('success', 62902);
                  } else {
                    Utils.emitEvent('fail', 62902);
                  }
                } catch (error) {
                  let e:business_error.BusinessError = error as business_error.BusinessError;
                  console.error(`ErrorCode: ${e.code},  Message: ${e.message}`);
                }
                break;
              }
              case 'emitWebViewGetSecurityLevel04': {
                try {
                  this.controller.loadUrl('https://untrusted-root.badssl.com');
                  await Utils.sleep(2000);
                  let securityLevel = this.controller.getSecurityLevel();
                  console.log('securityLevel===>'+securityLevel)
                  if (securityLevel === 3) {
                    Utils.emitEvent('success', 62903);
                  } else {
                    Utils.emitEvent('fail', 62903);
                  }
                } catch (error) {
                  let e:business_error.BusinessError = error as business_error.BusinessError;
                  console.error(`ErrorCode: ${e.code},  Message: ${e.message}`);
                }
                break;
              }
            }
          })
      }
      Web({ src: '', controller: this.controller })
        .javaScriptAccess(this.javaScriptAccess)
        .fileAccess(this.fileAccess)
        .imageAccess(this.imageAccess)
        .domStorageAccess(this.domStorageAccess)
        .onlineImageAccess(this.onlineImageAccess)
        .databaseAccess(this.databaseAccess)
    }
  }
}
