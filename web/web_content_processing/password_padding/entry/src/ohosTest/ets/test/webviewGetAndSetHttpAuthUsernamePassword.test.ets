/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { beforeAll, afterEach, beforeEach, describe, it , TestType, Size, Level } from '@ohos/hypium';
import events_emitter from '@ohos.events.emitter';
import Utils from './Utils';
import router from '@ohos.router';
// @ts-nocheck
let emitKey = ""

export default function ActsAceWebviewGetAndSetHttpAuthUsernamePassword() {
  describe('ActsAceWebviewGetAndSetHttpAuthUsernamePassword', () => {
    beforeAll(async (done: Function) => {
      let options: router.RouterOptions = {
        url: 'testability/pages/webviewGetAndSetHttpAuthUsernamePassword',
      }
      try {
        await Utils.sleep(1000)
        router.clear();
        let pages = router.getState();
        console.info("get webviewGetAndSetHttpAuthUsernamePassword state success " + JSON.stringify(pages));
        if (!("webviewGetAndSetHttpAuthUsernamePassword" == pages.name)) {
          console.info("get webviewGetAndSetHttpAuthUsernamePassword state success " + JSON.stringify(pages.name));
          let result = await router.pushUrl(options);
          await Utils.sleep(2000);
          console.info("push webviewGetAndSetHttpAuthUsernamePassword page success " + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push webviewGetAndSetHttpAuthUsernamePassword page error: " + err);
      }
      done()
    });

    beforeEach(async (done: Function) => {
      console.info("web beforeEach start");
      done();
    })
    afterEach(async (done: Function) => {
      console.info("web afterEach start:" + emitKey);
      try {
        let backData: events_emitter.EventData = {
          data: {
            "ACTION": emitKey
          }
        };
        let backEvent: events_emitter.InnerEvent = {
          eventId: 10,
          priority: events_emitter.EventPriority.LOW
        };
        console.info("start send emitKey");
        events_emitter.emit(backEvent, backData);
      } catch (err) {
        console.info("emit emitKey  err: " + JSON.stringify(err));
      }
      await Utils.sleep(2000);
      done();
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0001
    * @tc.name        : testWebviewGetAndSetHttpAuthUsernamePassword
    * @tc.desc        : test webviewGetAndSetHttpAuthUsernamePassword
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 0
    */
    it('testWebviewGetAndSetHttpAuthUsernamePassword', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL0, async (done: Function) => {
      emitKey = "emitWebviewGetAndSetHttpAuthUsernamePassword";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewGetAndSetHttpAuthUsernamePassword", "success", 25001, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0002
    * @tc.name        : testWebviewUpdateHttpAuthPassword
    * @tc.desc        : test webviewUpdateHttpAuthPassword
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewUpdateHttpAuthPassword', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewUpdateHttpAuthPassword";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewUpdateHttpAuthPassword", "success", 25002, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0003
    * @tc.name        : testWebviewUpdateHttpAuthUsername
    * @tc.desc        : test webviewUpdateHttpAuthUsername
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewUpdateHttpAuthUsername', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewUpdateHttpAuthUsername";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewUpdateHttpAuthUsername", "success", 25003, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0004
    * @tc.name        : testWebviewSetHttpAuthUsernameToNull
    * @tc.desc        : test webviewSetHttpAuthUsernameToNull
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewSetHttpAuthUsernameToNull', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewSetHttpAuthUsernameToNull";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewSetHttpAuthUsernameToNull", "success", 25004, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0005
    * @tc.name        : testWebviewSetHttpAuthPasswordToNull
    * @tc.desc        : test webviewSetHttpAuthPasswordToNull
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewSetHttpAuthPasswordToNull', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewSetHttpAuthPasswordToNull";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewSetHttpAuthPasswordToNull", "success", 25005, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0006
    * @tc.name        : testWebviewSetHttpAuthUsernamePasswordToNull
    * @tc.desc        : test webviewSetHttpAuthUsernamePasswordToNull
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewSetHttpAuthUsernamePasswordToNull', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewSetHttpAuthUsernamePasswordToNull";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewSetHttpAuthUsernamePasswordToNull", "success", 25006, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })

    /*
    * @tc.number      : SUB_ACE_WEBVIEW_GETANDSETHTTPAUTHUSERNAMEPASSWORD_API_0007
    * @tc.name        : testWebviewDeleteHttpAuthUsernamePassword
    * @tc.desc        : test webviewDeleteHttpAuthUsernamePassword
    * @tc.size        : MediumTest
    * @tc.type        : Function
    * @tc.level       : Level 1
    */
    it('testWebviewDeleteHttpAuthUsernamePassword', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      emitKey = "emitWebviewDeleteHttpAuthUsernamePassword";
      Utils.emitEvent(emitKey, 10);
      Utils.registerEvent("testWebviewDeleteHttpAuthUsernamePassword", "success", 25007, done);
      sendEventByKey('webviewGetAndSetHttpAuthUsernamePasswordButton', 10, '');
    })
  })
}
