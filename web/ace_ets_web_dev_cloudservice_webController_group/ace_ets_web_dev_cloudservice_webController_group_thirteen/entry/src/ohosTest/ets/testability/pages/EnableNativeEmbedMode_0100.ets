// xxx.ets
import { webview } from '@kit.ArkWeb';
import { BusinessError } from '@kit.BasicServicesKit';
import { LocalContext } from '../../test/GloablConfig';

@Entry
@Component
struct enableNativeEmbedMode_0100 {
  @State embedStatus: string = '';
  @State embedinfos: string = '';
  @State userAgentPC:string = '';
  controller: webview.WebviewController = new webview.WebviewController();
  delegate: webview.WebDownloadDelegate = new webview.WebDownloadDelegate();

  build() {
    Column() {
      // 默认行为：点击按钮跳转页面，关闭index页面，使同层标签销毁。
      // API12新增：使能同层渲染所在的页面支持BFCache后，点击按钮跳转页面，关闭index页面，使同层标签进入BFCache。
      Button('release')
        .key('001')
        .onClick(() => {
          try {
            const localFilePath = $rawfile('index2.html');
            this.controller.loadUrl(localFilePath);
          } catch (error) {
            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);
          }
        })
      // API12新增：使能同层渲染所在的页面支持BFCache后，点击按钮返回页面，使同层标签离开BFCache。
      Button('backward')
        .key('002')
        .onClick(() => {
          try {
            this.controller.backward();
            LocalContext.context.eventHub.emit('enableNativeEmbedMode002', true)
          } catch (error) {
            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);
          }
        })


      Web({ src: 'www.example.com', controller: this.controller })
        .enableNativeEmbedMode(true)
        .onNativeEmbedLifecycleChange((event) => {
          try {
            console.info('=================1')
            this.userAgentPC = this.controller.getUserAgent();
            console.info('=================2')
            if ((this.userAgentPC).includes('Tablet')) {
              console.info('=================3')
              // 当加载页面中有同层标签会触发Create。
              if (event.status == NativeEmbedStatus.CREATE) {
                this.embedStatus = 'Create'
                LocalContext.context.eventHub.emit('enableNativeEmbedMode003', 'Create')
              }
              // 当页面中同层标签移动或者缩放时会触发Update。
              if (event.status == NativeEmbedStatus.UPDATE) {
                this.embedStatus = 'Update';
                LocalContext.context.eventHub.emit('enableNativeEmbedMode004', 'Update')
              }
              // 退出页面时会触发Destroy。
              if (event.status == NativeEmbedStatus.DESTROY) {
                this.embedStatus = 'Destroy';
                LocalContext.context.eventHub.emit('enableNativeEmbedMode005', 'Destroy')
              }
              // 同层标签所在的页面进入BFCache时，会触发Enter BFCache。
              if (event.status == NativeEmbedStatus.ENTER_BFCACHE) {
                this.embedStatus = 'Enter BFCache';

              }
              // 同层标签所在的页面离开BFCache时，会触发Leave BFCache。
              if (event.status == NativeEmbedStatus.LEAVE_BFCACHE) {
                this.embedStatus = 'Leave BFCache';
              }
              console.log('status = ' + this.embedStatus);
              console.log('surfaceId = ' + event.surfaceId);
              console.log('embedId = ' + event.embedId);
              if (event.info) {
                console.log('id = ' + event.info.id);
                console.log('type = ' + event.info.type);
                console.log('src = ' + event.info.src);
                console.log('width = ' + event.info.width);
                console.log('height = ' + event.info.height);
                console.log('url = ' + event.info.url);
              }
            }else if((this.userAgentPC).includes('PC')){
              console.info('=================4')
              LocalContext.context.eventHub.emit('enableNativeEmbedMode006', 'PC')
            }
          }catch (error) {
            console.info('=================5')
            console.error(`ErrorCode: ${(error as BusinessError).code},  Message: ${(error as BusinessError).message}`);
          }
        })
    }
  }
}