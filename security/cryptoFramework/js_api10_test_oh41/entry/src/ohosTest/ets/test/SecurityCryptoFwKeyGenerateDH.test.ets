/*
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, TestType, Size, Level, expect } from '@ohos/hypium';
import { BusinessError } from '@ohos.base';
import cryptoFramework from '@ohos.security.cryptoFramework';
import * as specUtil from './utils/common/keyGenSpecUtil';
import * as asyKeyGenPromiseFunc from './utils/keyGenerate/asyKeyGenPromiseFunc';
import * as asyKeyGenCallbackFunc from './utils/keyGenerate/asyKeyGenCallbackFunc';
import * as compareSpecFunc from './utils/keyGenerate/compareSpecFunc';


export default function SecurityCryptoFwKeyGenerateDHTestUnit() {
  describe('SecurityCryptoFwKeyGenerateDHTestUnit', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    });
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    });
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    });
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    });

    /**
     * @tc.number Security_CryptoFramework_AsyKeyGenerator_DH_Func_0100
     * @tc.name Test convertKey with dh, Promise style, process success
     * @tc.desc AsyKeyGenerator with algName DH_modp1536, getEncoded by keyPair, then convertKey
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0100", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0100";
      console.log(testNumber + ": started.");
      let param: string = "DH_modp1536";
      try {
        let res: boolean = await asyKeyGenPromiseFunc.convertDHKey(param);
        expect(res).assertTrue();
        console.log(testNumber + ": convertKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0200
     * @tc.name Test convertKey with dh, Callback style, process success
     * @tc.desc AsyKeyGenerator with algName DH_modp1536, getEncoded by keyPair, then convertKey
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0200", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0200";
      console.log(testNumber + ": started.");
      let param: string = "DH_modp1536";
      try {
        let res: boolean = await asyKeyGenCallbackFunc.convertDHKey(param);
        expect(res).assertTrue();
        console.log(testNumber + ": convertKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0300
     * @tc.name Test key generate with dh, Promise style, process success
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec, generatePubKey by DHCommonParamsSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level1
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0300", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0300";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(512, 128);
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenPromiseFunc.genKeyPair(spec);
        console.log(testNumber + ": genKeyPair succeed");
        let res: boolean = compareSpecFunc.DHKeyPair(keyPair.priKey, keyPair.pubKey)
          && keyPair.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_L_NUM) == 128;
        expect(res).assertTrue();
        console.log(testNumber + ": compareSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0400
     * @tc.name Test key generate with dh, Callback style, process success
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec, generatePubKey by DHCommonParamsSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level2
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0400", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0400";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(512, 128);
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenCallbackFunc.genKeyPair(spec);
        console.log(testNumber + ": genKeyPair succeed");
        let res: boolean = compareSpecFunc.DHKeyPair(keyPair.priKey, keyPair.pubKey)
          && keyPair.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_L_NUM) == 128;
        expect(res).assertTrue();
        console.log(testNumber + ": compareSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0500
     * @tc.name Test key generate with dh, process success, AsyKeyGeneratorBySpec with CommonSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0500", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0500";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(2048, 224);
        expect(spec != null).assertTrue();
        console.log(testNumber + ": genDHCommonParamsSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0600
     * @tc.name Test key generate with dh, process success
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0600", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0600";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(2048, 0);
        expect(spec != null).assertTrue();
        console.log(testNumber + ": genDHCommonParamsSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0700
     * @tc.name Test key generate with dh, process fail
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0700", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0700";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(2048, 223);
        console.log(testNumber + ": genDHCommonParamsSpec succeed");
        expect(null).assertFail();
      } catch (err) {
        expect(err.code == 401).assertTrue();
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0800
     * @tc.name Test key generate with dh, process fail
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0800", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0800";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(10001, 1024);
        console.log(testNumber + ": genDHCommonParamsSpec succeed");
        expect(null).assertFail();
      } catch (err) {
        expect(err.code == 401).assertTrue();
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0900
     * @tc.name Test key generate with dh, process fail
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0900", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_0900";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(511, 256);
        console.log(testNumber + ": genDHCommonParamsSpec succeed");
        expect(null).assertFail();
      } catch (err) {
        expect(err.code == 401).assertTrue();
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1000
     * @tc.name Test key compare Spec with dh, Promise style, process success
     * @tc.desc AsyKeyGeneratorBySpec with CommonSpec, generateKeyPair by DH_ffdhe2048, compare Spec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1000", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1000";
      console.log(testNumber + ": started.");
      try {
        let param: string = "DH_ffdhe2048";
        let spec: cryptoFramework.DHCommonParamsSpec = cryptoFramework.DHKeyUtil.genDHCommonParamsSpec(2048, 512);
        let keyPairBySpec: cryptoFramework.KeyPair = await asyKeyGenCallbackFunc.genKeyPair(spec);
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenCallbackFunc.genKeyPair(param);
        console.log(testNumber + ": genKeyPair succeed");
        expect(keyPair.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_P_BN) == spec.p).assertTrue();
        expect(keyPair.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_G_BN) == spec.g).assertTrue();
        expect(keyPair.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_L_NUM) == 0).assertTrue();
        expect(keyPairBySpec.priKey.getAsyKeySpec(cryptoFramework.AsyKeySpecItem.DH_L_NUM) == 512).assertTrue();
        expect(spec.l == 512).assertTrue();
        let res: boolean = compareSpecFunc.DHKey(keyPair, keyPairBySpec);
        expect(res).assertTrue();
        console.log(testNumber + ": compareSpec succeed");
      } catch (err) {
        console.error(testNumber + `: catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1100
     * @tc.name Test key generate bySpec with dh, Promise style, process success
     * @tc.desc generatePubKey by spec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1100", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1100";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.PUBLIC_KEY_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let pubKey: cryptoFramework.PubKey = await asyKeyGenPromiseFunc.genPubKey(spec);
        expect(pubKey != null).assertTrue();
        console.log(testNumber + ": genPubKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1200
     * @tc.name Test key generate bySpec with dh, Promise style, process success
     * @tc.desc generatePubKey by spec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1200", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1200";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.PRIVATE_KEY_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let priKey: cryptoFramework.PriKey = await asyKeyGenPromiseFunc.genPriKey(spec);
        expect(priKey != null).assertTrue();
        console.log(testNumber + ": genPriKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1300
     * @tc.name Test key generate bySpec with dh, Callback style, process success
     * @tc.desc generatePriKey by spec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1300", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1300";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.PUBLIC_KEY_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let pubKey: cryptoFramework.PubKey = await asyKeyGenCallbackFunc.genPubKey(spec);
        expect(pubKey != null).assertTrue();
        console.log(testNumber + ": genPriKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1400
     * @tc.name Test key generate bySpec with dh, Callback style, process success
     * @tc.desc generatePriKey by spec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1400", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1400";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.PRIVATE_KEY_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let priKey: cryptoFramework.PriKey = await asyKeyGenCallbackFunc.genPriKey(spec);
        expect(priKey != null).assertTrue();
        console.log(testNumber + ": genPriKey succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1500
     * @tc.name Test key generate bySpec with dh, Promise style, process success
     * @tc.desc generateKeyPair by spec
     * @tc.desc getAsyKeySpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level2
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1500", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1500";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.KEY_PAIR_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenPromiseFunc.genKeyPair(spec);
        console.log(testNumber + ": genKeyPair succeed");
        let res: boolean = compareSpecFunc.DHKeyPair(keyPair.priKey, keyPair.pubKey);
        expect(res).assertTrue();
        console.log(testNumber + ": compareSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1600
     * @tc.name Test key generate bySpec with dh, Callback style, process success
     * @tc.desc generateKeyPair by spec, getAsyKeySpec
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level2
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1600", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1600";
      console.log(testNumber + ": started.");
      try {
        let spec: cryptoFramework.AsyKeySpec = specUtil.genDHKeySpec(cryptoFramework.AsyKeySpecType.KEY_PAIR_SPEC);
        console.log(testNumber + ": genDHKeySpec succeed");
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenCallbackFunc.genKeyPair(spec);
        console.log(testNumber + ": genKeyPair succeed");
        let res: boolean = compareSpecFunc.DHKeyPair(keyPair.priKey, keyPair.pubKey);
        expect(res).assertTrue();
        console.log(testNumber + ": compareSpec succeed");
      } catch (err) {
        console.error(testNumber + ` catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });

    /**
     * @tc.number SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1700
     * @tc.name Test key format/algName with dh. Promise style. Process success
     * @tc.desc generateKeyPair by DH_modp1536
     * @tc.size Medium
     * @tc.type Func
     * @tc.level Level3
     */
    it("SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1700", TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      let testNumber: string = "SUB_Security_CryptoFramework_AsyKeyGenerator_DH_Func_1700";
      console.log(testNumber + ": started");
      let keyAlg: string = "DH_modp1536";
      try {
        let keyPair: cryptoFramework.KeyPair = await asyKeyGenPromiseFunc.genKeyPair(keyAlg);
        expect(keyPair.pubKey.format == "X.509").assertTrue();
        expect(keyPair.pubKey.algName == "DH").assertTrue();
        expect(keyPair.priKey.format == "PKCS#8").assertTrue();
        expect(keyPair.priKey.algName == "DH").assertTrue();
      } catch (err) {
        console.error(testNumber + `: catch error: “${err}“, error code: ${err.code}`);
        expect(null).assertFail();
      }
      console.log(testNumber + ": succeed");
      done();
    });


  })
}