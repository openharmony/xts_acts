/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef OHCRYPTO_KDF_TEST_H
#define OHCRYPTO_KDF_TEST_H

#include "crypto_common.h"
#include "crypto_kdf.h"

#define OHTEST_MD5_DIGIESTSIZE 16
#define OHTEST_SHA1_DIGIESTSIZE 20
#define OHTEST_SHA224_DIGIESTSIZE 28
#define OHTEST_SHA256_DIGIESTSIZE 32
#define OHTEST_SHA384_DIGIESTSIZE 48
#define OHTEST_SHA512_DIGIESTSIZE 64
#define OHTEST_SM3_DIGIESTSIZE 32

#define OHTEST_KDF_CONSTANT_LEN 255

typedef struct {
    uint8_t *password;
    uint8_t *salt;
    int iterations;
} paramPbkdf2Spec;

typedef struct {
    uint8_t *key;
    uint8_t *salt;
    uint8_t *info;
} paramHkdfSpec;

typedef struct {
    uint8_t *passphrase;
    uint8_t *salt;
    uint64_t n;
    uint64_t p;
    uint64_t r;
    uint64_t max_mem;
} paramScryptSpec;

typedef struct {
    uint8_t *password;
    size_t passLen;
    uint8_t *salt;
    size_t saltLen;
    int iterations;
} paramVectorPbkdf2Spec;

typedef struct {
    uint8_t *key;
    size_t keyLen;
    uint8_t *salt;
    size_t saltLen;
    uint8_t *info;
    size_t infoLen;
} paramVectorHkdfSpec;

typedef struct {
    uint8_t *passphrase;
    size_t passLen;
    uint8_t *salt;
    size_t saltLen;
    uint64_t n;
    uint64_t p;
    uint64_t r;
    uint64_t max_mem;
} paramVectorScryptSpec;

typedef union {
    paramPbkdf2Spec pbkdf2Params;
    paramHkdfSpec hkdfParams;
    paramScryptSpec scryptParams;
} paramsSpec;

typedef union {
    paramVectorPbkdf2Spec pbkdf2Params;
    paramVectorHkdfSpec hkdfParams;
    paramVectorScryptSpec scryptParams;
} paramsVectorSpec;

typedef enum {
    OHTEST_KDF_PBKDF2 = 0,
    OHTEST_KDF_HKDF,
    OHTEST_KDF_SCRYPT,
    OHTEST_KDF_MAX = 16,
} KdfType;

typedef struct {
    KdfType kdfType;
    const char *algoName;
    int keySize;
    paramsSpec params;
} KdfSpec;

typedef struct {
    KdfType kdfType;
    const char *algoName;
    int keySize;
    paramsVectorSpec params;
    uint8_t *expectSecret;
} KdfVectorSpec;

/* PBKDF2 SHA1 VECTOR */
static uint8_t pbhdf2_sha1_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
};
static uint8_t pbhdf2_sha1_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sha1_expectSecret[] = {
    0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c, 0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
    0xd8, 0xde, 0x89, 0x57
};
/* PBKDF2 SHA224 VECTOR */
static uint8_t pbhdf2_sha224_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
};
static uint8_t pbhdf2_sha224_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sha224_expectSecret[] = {
    0x3c, 0x19, 0x8c, 0xbd, 0xb9, 0x46, 0x4b, 0x78, 0x57, 0x96, 0x6b, 0xd0, 0x5b, 0x7b, 0xc9, 0x2b,
    0xc1, 0xcc, 0x4e, 0x6e
};
/* PBKDF2 SHA256 VECTOR */
static uint8_t pbhdf2_sha256_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x64
};
static uint8_t pbhdf2_sha256_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sha256_expectSecret[] = {
    0x55, 0xac, 0x04, 0x6e, 0x56, 0xe3, 0x08, 0x9f, 0xec, 0x16, 0x91, 0xc2, 0x25, 0x44, 0xb6, 0x05,
    0xf9, 0x41, 0x85, 0x21, 0x6d, 0xde, 0x04, 0x65, 0xe6, 0x8b, 0x9d, 0x57, 0xc2, 0x0d, 0xac, 0xbc,
    0x49, 0xca, 0x9c, 0xcc, 0xf1, 0x79, 0xb6, 0x45, 0x99, 0x16, 0x64, 0xb3, 0x9d, 0x77, 0xef, 0x31,
    0x7c, 0x71, 0xb8, 0x45, 0xb1, 0xe3, 0x0b, 0xd5, 0x09, 0x11, 0x20, 0x41, 0xd3, 0xa1, 0x97, 0x83
};
/* PBKDF2 SHA384 VECTOR */
static uint8_t pbhdf2_sha384_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
};
static uint8_t pbhdf2_sha384_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sha384_expectSecret[] = {
    0xc0, 0xe1, 0x4f, 0x06, 0xe4, 0x9e, 0x32, 0xd7, 0x3f, 0x9f, 0x52, 0xdd, 0xf1, 0xd0, 0xc5, 0xc7,
    0x19, 0x16, 0x09, 0x23
};
/* PBKDF2 SHA512 VECTOR */
static uint8_t pbhdf2_sha512_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
};
static uint8_t pbhdf2_sha512_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sha512_expectSecret[] = {
    0x86, 0x7f, 0x70, 0xcf, 0x1a, 0xde, 0x02, 0xcf, 0xf3, 0x75, 0x25, 0x99, 0xa3, 0xa5, 0x3d, 0xc4,
    0xaf, 0x34, 0xc7, 0xa6
};
/* PBKDF2 SM3 VECTOR */
static uint8_t pbhdf2_sm3_password[] = {
    0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64
};
static uint8_t pbhdf2_sm3_salt[] = {
    0x73, 0x61, 0x6c, 0x74
};
static uint8_t pbhdf2_sm3_expectSecret[] = {
    0x73, 0x8c, 0x8c, 0x43, 0x23, 0x72, 0xd9, 0x8a, 0x73, 0x35, 0x0b, 0xc2, 0x52, 0x20, 0x9e, 0x4c,
    0xf2, 0xac, 0xdd, 0xe7
};
/* HKDF SHA1 VECTOR */
static uint8_t hkdf_sha1_key[] = {
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};
static uint8_t hkdf_sha1_salt[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
};
static uint8_t hkdf_sha1_info[] = {
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
};
static uint8_t hkdf_sha1_expectSecret[] = {
    0x08, 0x5a, 0x01, 0xea, 0x1b, 0x10, 0xf3, 0x69, 0x33, 0x06, 0x8b, 0x56, 0xef, 0xa5, 0xad, 0x81,
    0xa4, 0xf1, 0x4b, 0x82, 0x2f, 0x5b, 0x09, 0x15, 0x68, 0xa9, 0xcd, 0xd4, 0xf1, 0x55, 0xfd, 0xa2,
    0xc2, 0x2e, 0x42, 0x24, 0x78, 0xd3, 0x05, 0xf3, 0xf8, 0x96
};
/* HKDF SHA224 VECTOR */
static uint8_t hkdf_sha224_key[] = {
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};
static uint8_t hkdf_sha224_salt[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
};
static uint8_t hkdf_sha224_info[] = {
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
};
static uint8_t hkdf_sha224_expectSecret[] = {
    0x7f, 0xc8, 0xae, 0x03, 0x35, 0xed, 0x46, 0x8c, 0xef, 0x56, 0xbe, 0x09, 0x1f, 0x64, 0x78, 0xa1,
    0xaa, 0xe8, 0x4c, 0x0d, 0xa5, 0x4c, 0xe5, 0x17, 0x6a, 0xa3, 0x89, 0x46, 0xc7, 0x9e, 0x21, 0x0e
};
/* HKDF SHA256 VECTOR */
static uint8_t hkdf_sha256_key[] = {
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};
static uint8_t hkdf_sha256_salt[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
};
static uint8_t hkdf_sha256_info[] = {
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
};
static uint8_t hkdf_sha256_expectSecret[] = {
    0x3c, 0xb2, 0x5f, 0x25, 0xfa, 0xac, 0xd5, 0x7a, 0x90, 0x43, 0x4f, 0x64, 0xd0, 0x36, 0x2f, 0x2a,
    0x2d, 0x2d, 0x0a, 0x90, 0xcf, 0x1a, 0x5a, 0x4c, 0x5d, 0xb0, 0x2d, 0x56, 0xec, 0xc4, 0xc5, 0xbf,
    0x34, 0x00, 0x72, 0x08, 0xd5, 0xb8, 0x87, 0x18, 0x58, 0x65
};
/* HKDF SHA384 VECTOR */
static uint8_t hkdf_sha384_key[] = {
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};
static uint8_t hkdf_sha384_salt[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
};
static uint8_t hkdf_sha384_info[] = {
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
};
static uint8_t hkdf_sha384_expectSecret[] = {
    0xfb, 0x7e, 0x67, 0x43, 0xeb, 0x42, 0xcd, 0xe9, 0x6f, 0x1b, 0x70, 0x77, 0x89, 0x52, 0xab, 0x75,
    0x48, 0xca, 0xfe, 0x53, 0x24, 0x9f, 0x7f, 0xfe, 0x14, 0x97, 0xa1, 0x63, 0x5b, 0x20, 0x1f, 0xf1
};
/* HKDF SHA512 VECTOR */
static uint8_t hkdf_sha512_key[] = {
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
};
static uint8_t hkdf_sha512_salt[] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c
};
static uint8_t hkdf_sha512_info[] = {
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9
};
static uint8_t hkdf_sha512_expectSecret[] = {
    0x74, 0x13, 0xe8, 0x99, 0x7e, 0x02, 0x06, 0x10, 0xfb, 0xf6, 0x82, 0x3f, 0x2c, 0xe1, 0x4b, 0xff,
    0x01, 0x87, 0x5d, 0xb1, 0xca, 0x55, 0xf6, 0x8c, 0xfc, 0xf3, 0x95, 0x4d, 0xc8, 0xaf, 0xf5, 0x35
};
/* HKDF SM3 VECTOR */
static uint8_t hkdf_sm3_key[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
};
static uint8_t hkdf_sm3_salt[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
};
static uint8_t hkdf_sm3_info[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
};
static uint8_t hkdf_sm3_expectSecret[] = {
    0xeb, 0xa1, 0x72, 0x2b, 0xd7, 0x9d, 0x3d, 0x00, 0x1e, 0xf1, 0x58, 0x2a, 0xd2, 0x3f, 0xf8, 0xda
};

#endif