/*
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { huks } from "@kit.UniversalKeystoreKit";
import { SetParam } from "../utils/HuksOptionUtil";

export function GetImportPubKeyOptions(): huks.HuksOptions {
  let huksOption: huks.HuksOptions = {
    properties: new Array(),
  };
  SetParam(huksOption, huks.HuksTag.HUKS_TAG_IMPORT_KEY_TYPE, huks.HuksImportKeyType.HUKS_KEY_TYPE_PUBLIC_KEY);
  return huksOption;
}

export function GetRsaImportData(size: number): Uint8Array {
  switch (size) {
    case 1016:
      return new Uint8Array([
        0x01, 0x00, 0x00, 0x00, // 密钥算法(小端表示)huks.HuksKeyAlg.HUKS_ALG_RSA = 1
        0xF8, 0x03, 0x00, 0x00, // 密钥大小（比特）：1016
        0x79, 0x00, 0x00, 0x00, // 模数n长度（字节）：127
        0x03, 0x00, 0x00, 0x00, // 公钥指数e长度（字节）：3
        0x79, 0x00, 0x00, 0x00, // 私钥指数d长度（字节）：127
        // 模数n
        0xCB, 0x6A, 0x6B, 0xB3, 0x34, 0x3F, 0x0F, 0xA7, 0x98, 0x45, 0x35, 0x4C, 0x9E, 0x03, 0xD8, 0xDE,
        0x0D, 0x71, 0xE4, 0xEA, 0xE7, 0x4E, 0xB0, 0x34, 0x9C, 0xCF, 0x67, 0x42, 0xE1, 0x27, 0x2C, 0xB2,
        0x27, 0x72, 0xE4, 0x0B, 0xAB, 0xB3, 0x31, 0x90, 0x29, 0x1C, 0x80, 0xE0, 0xEF, 0xEC, 0x4C, 0x09,
        0x34, 0x24, 0x15, 0xFD, 0x0E, 0x0D, 0x9B, 0x8E, 0xAF, 0x0A, 0xE4, 0xB5, 0x1A, 0x33, 0xEA, 0x1F,
        0x3F, 0xCB, 0x91, 0xF4, 0xA4, 0xA9, 0x17, 0x50, 0x6D, 0xC2, 0xE6, 0x5A, 0x1F, 0x22, 0x59, 0x61,
        0x3E, 0xE4, 0xED, 0x8D, 0xD9, 0x11, 0xE0, 0x7B, 0xD4, 0xBE, 0x1F, 0xFF, 0xEB, 0xC4, 0x3B, 0x14,
        0xBF, 0xCD, 0xEF, 0x82, 0x40, 0x30, 0x21, 0x38, 0x1C, 0x99, 0x3F, 0x0C, 0x21, 0xEC, 0xDC, 0x0C,
        0xA8, 0xA6, 0x00, 0xCE, 0x8A, 0x12, 0x90, 0xEA, 0x9C, 0xA8, 0x91, 0x4A, 0x00, 0xC0, 0x01,
        // 公钥指数e
        0x01, 0x00, 0x01,
        // 私钥指数d
        0xAD, 0x5A, 0x1D, 0x3C, 0x94, 0x5A, 0xE5, 0x91, 0x73, 0x40, 0x0F, 0xC3, 0x22, 0xAA, 0xAE, 0xA7,
        0xD6, 0x17, 0x68, 0xFA, 0x13, 0x73, 0xC8, 0xD0, 0x9D, 0x8E, 0x57, 0x36, 0xF4, 0xC0, 0x38, 0xE3,
        0xFE, 0xA0, 0x77, 0xDD, 0xC6, 0x4E, 0xA8, 0xFF, 0x6D, 0x39, 0xC0, 0x4F, 0x71, 0xC8, 0x13, 0xA8,
        0x88, 0x49, 0xF4, 0x7F, 0x3A, 0xF9, 0xB7, 0xC6, 0xEA, 0x3F, 0xC3, 0x56, 0xDF, 0x64, 0xBC, 0x99,
        0xE0, 0x40, 0x15, 0x33, 0xA9, 0x38, 0x9C, 0xBA, 0x79, 0x63, 0x8C, 0x60, 0x2A, 0x0E, 0x7D, 0xC0,
        0xAA, 0xA2, 0x7D, 0x7D, 0x95, 0xA7, 0x27, 0xF9, 0xC5, 0x06, 0xE3, 0x91, 0x07, 0x69, 0x2A, 0x5D,
        0xD4, 0xEA, 0xD8, 0xC4, 0x71, 0xAF, 0x0C, 0x6A, 0xE5, 0x3C, 0xE6, 0xC6, 0x2D, 0xD7, 0x46, 0x17,
        0x05, 0xDD, 0x50, 0x7D, 0xA7, 0x84, 0xC7, 0xC1, 0x13, 0x79, 0xCC, 0xD6, 0xE1, 0xE2, 0x11
      ])
    case 1024:
      return new Uint8Array
    case 1032:
      return new Uint8Array([
        0x01, 0x00, 0x00, 0x00, // 密钥算法(小端表示)huks.HuksKeyAlg.HUKS_ALG_RSA = 1
        0x08, 0x04, 0x00, 0x00, // 密钥大小（比特）：1032
        0x81, 0x00, 0x00, 0x00, // 模数n长度（字节）：129
        0x03, 0x00, 0x00, 0x00, // 公钥指数e长度（字节）：3
        0x81, 0x00, 0x00, 0x00, // 私钥指数d长度（字节）：129
        // 模数n
        0xEE, 0x28, 0x5F, 0xE6, 0x57, 0x11, 0xC3, 0xA4, 0x81, 0x7C, 0x9A, 0x95, 0xE4, 0x59, 0x04, 0x2B,
        0x73, 0x88, 0x25, 0x6A, 0x94, 0x22, 0xE7, 0x49, 0x87, 0xC5, 0xB2, 0x2F, 0xE2, 0xBB, 0x6B, 0x3B,
        0x10, 0x1E, 0x37, 0x22, 0xD2, 0x36, 0x4A, 0x53, 0xC4, 0xCC, 0x77, 0x3E, 0xE5, 0x0C, 0x34, 0x26,
        0x85, 0x9E, 0xA3, 0x41, 0x97, 0x04, 0xCC, 0xE4, 0x66, 0xBC, 0xE0, 0x3A, 0x59, 0xD1, 0xA2, 0xC3,
        0x7A, 0x09, 0xFA, 0xCF, 0x82, 0xB8, 0x8B, 0xC4, 0x13, 0xD6, 0xB0, 0xAF, 0x1A, 0xAC, 0x58, 0xE1,
        0x63, 0xCF, 0x1A, 0xDB, 0xD5, 0x2E, 0x5A, 0x48, 0xF9, 0x0D, 0x24, 0x3B, 0x57, 0xDA, 0xCA, 0xCE,
        0x11, 0xBF, 0x68, 0x70, 0x16, 0x78, 0x2F, 0x90, 0xA1, 0xB6, 0x05, 0xEB, 0x34, 0xFE, 0x2D, 0xEB,
        0xC5, 0xD5, 0x7B, 0x04, 0xD6, 0x9F, 0xD6, 0xFD, 0x96, 0x52, 0xBA, 0x7D, 0x60, 0xCE, 0x45, 0xD0,
        0x1D,
        // 公钥指数e
        0x01, 0x00, 0x01,
        // 私钥指数d
        0x45, 0x30, 0xB5, 0xAB, 0xD5, 0xDF, 0xF3, 0x56, 0xF7, 0xC7, 0x9B, 0xA1, 0xB0, 0x95, 0xAC, 0x00,
        0x73, 0xB0, 0x3A, 0x2E, 0x9C, 0x9B, 0x07, 0x56, 0xF5, 0x7B, 0x1A, 0x29, 0x8F, 0x55, 0xA3, 0xF1,
        0xA4, 0xDD, 0x22, 0x67, 0x9B, 0x6A, 0xEA, 0x6D, 0x2B, 0xDF, 0xBB, 0x45, 0x2A, 0x86, 0x41, 0x20,
        0x6F, 0xF1, 0x86, 0xBC, 0xA7, 0x83, 0x5D, 0x83, 0x7D, 0xD5, 0xA1, 0xCF, 0x52, 0x08, 0xF5, 0xA0,
        0x8B, 0xFC, 0x75, 0xC8, 0x99, 0x5B, 0x8B, 0xAC, 0xF4, 0x12, 0x5F, 0xC4, 0x46, 0xA7, 0x4C, 0xCC,
        0xFA, 0xC0, 0x57, 0xF6, 0x6E, 0xC6, 0xF7, 0xB7, 0x6E, 0xEF, 0xFC, 0x79, 0x2E, 0xDF, 0x15, 0xA5,
        0x91, 0x10, 0xD8, 0x52, 0x9A, 0x71, 0x95, 0x29, 0x4E, 0xC8, 0x0D, 0x75, 0x67, 0x8D, 0x5B, 0xB5,
        0x28, 0x88, 0x50, 0xAE, 0xE4, 0xFB, 0xF1, 0x84, 0x53, 0xB1, 0xE5, 0xA9, 0xC3, 0xB5, 0x26, 0xD2,
        0x81
      ])
    case 2040:
      return new Uint8Array([
        0x01, 0x00, 0x00, 0x00, // 密钥算法(小端表示)huks.HuksKeyAlg.HUKS_ALG_RSA = 1
        0xF8, 0x07, 0x00, 0x00, // 密钥大小（比特）：2040
        0xFF, 0x00, 0x00, 0x00, // 模数n长度（字节）：255
        0x03, 0x00, 0x00, 0x00, // 公钥指数e长度（字节）：3
        0xFF, 0x00, 0x00, 0x00, // 私钥指数d长度（字节）：255
        // 模数n
        0x85, 0xB8, 0xFE, 0x36, 0x0A, 0xAA, 0xF5, 0x85, 0xCC, 0xEF, 0x03, 0x81, 0x43, 0xC1, 0x38, 0x20,
        0xD5, 0x8D, 0xE6, 0x5E, 0x8F, 0x71, 0x14, 0x3C, 0x04, 0x16, 0x4A, 0x23, 0xA5, 0x0F, 0x6F, 0x03,
        0x60, 0xEE, 0xA9, 0xA9, 0xC1, 0xF6, 0x5C, 0x67, 0xCA, 0xEB, 0x2E, 0x21, 0x6B, 0xE2, 0x37, 0xF6,
        0x3A, 0x6B, 0x87, 0xA2, 0xDE, 0x60, 0xEC, 0xEE, 0xFC, 0x33, 0x05, 0xB5, 0xA6, 0xA4, 0xED, 0x9D,
        0x4E, 0xA0, 0xC3, 0xB8, 0x72, 0x8B, 0x4E, 0x17, 0x5B, 0xCE, 0x76, 0xB9, 0x2D, 0xA4, 0x06, 0x16,
        0x61, 0x98, 0x7A, 0xA0, 0xBD, 0x23, 0x29, 0xAF, 0x8E, 0x0A, 0x14, 0xF9, 0xDF, 0x38, 0xDA, 0xC2,
        0x9F, 0x17, 0x8F, 0x42, 0x31, 0xA6, 0x91, 0x49, 0x31, 0x00, 0x28, 0x87, 0x36, 0x1D, 0x2B, 0xD7,
        0xE7, 0x38, 0xC2, 0xBE, 0xA9, 0x55, 0x2A, 0x7D, 0x8B, 0x50, 0xA9, 0x5F, 0x6D, 0x96, 0x3F, 0xC2,
        0xA8, 0x9C, 0x24, 0xA8, 0x52, 0xF2, 0xF2, 0x6F, 0xA8, 0xC8, 0xFC, 0x26, 0x94, 0x3F, 0x22, 0xF4,
        0x74, 0x5E, 0xDA, 0xD2, 0x21, 0x5C, 0xA9, 0xC2, 0xB8, 0x65, 0x0E, 0x21, 0x6A, 0x08, 0x75, 0x4F,
        0x1B, 0x5A, 0x3F, 0xFF, 0xCA, 0x3C, 0xF4, 0xD8, 0x62, 0xFC, 0xF4, 0x20, 0x76, 0xC1, 0x92, 0xE3,
        0x44, 0xC9, 0x47, 0x58, 0x54, 0x70, 0x8C, 0x58, 0xC8, 0x44, 0xE6, 0xE6, 0x22, 0xA4, 0x1B, 0x4A,
        0x01, 0xD0, 0x3A, 0x8B, 0x1E, 0xC9, 0x65, 0xE1, 0x7F, 0x30, 0xC6, 0x2B, 0xA9, 0xA3, 0x6D, 0x07,
        0xA1, 0x06, 0xF5, 0x9B, 0xE3, 0x3C, 0xF0, 0x3B, 0x51, 0x1D, 0x52, 0xAA, 0xA4, 0x30, 0x10, 0xFA,
        0x20, 0x7F, 0x54, 0xF9, 0xEF, 0xFD, 0x06, 0x34, 0xC5, 0x3C, 0xB7, 0xFA, 0xF8, 0x89, 0xFD, 0x84,
        0x8D, 0x15, 0x70, 0xFA, 0xF8, 0x59, 0x94, 0xEE, 0xFC, 0x3A, 0xC1, 0x76, 0xE7, 0xD6, 0xDB,
        // 公钥指数e
        0x01, 0x00, 0x01,
        // 私钥指数d
        0x55, 0xFB, 0x23, 0xE1, 0x65, 0xAC, 0x95, 0x1F, 0xCA, 0x2C, 0x68, 0xC9, 0x85, 0xE2, 0x48, 0x0F,
        0xBC, 0xA0, 0x77, 0xDE, 0x97, 0x46, 0xB3, 0x26, 0xFF, 0xCD, 0xC1, 0x2F, 0xF8, 0x22, 0xDB, 0x53,
        0x85, 0xD1, 0x0F, 0x60, 0x6A, 0xA9, 0xD8, 0xB2, 0x98, 0x23, 0xED, 0xCE, 0x69, 0x8A, 0xD4, 0x46,
        0xCB, 0x3B, 0x76, 0xC3, 0xFF, 0x4E, 0xBD, 0x29, 0xD1, 0x19, 0x91, 0x73, 0x42, 0x4A, 0x4B, 0xCA,
        0x58, 0xD3, 0x3F, 0xE5, 0x6A, 0x29, 0x2E, 0x36, 0x10, 0xBE, 0xC9, 0x51, 0xBA, 0x09, 0xFC, 0x2C,
        0x09, 0xE6, 0xBB, 0xFA, 0x7C, 0x82, 0x8E, 0x7C, 0x25, 0xCD, 0x4F, 0xBD, 0x76, 0x8D, 0x1D, 0x04,
        0x04, 0xBD, 0x66, 0x4C, 0xBE, 0x96, 0x06, 0x56, 0xD4, 0x5D, 0xF0, 0xB1, 0x37, 0xD7, 0x3B, 0xE8,
        0x9F, 0xF0, 0xBC, 0x2F, 0x51, 0xBB, 0xC4, 0x0D, 0x63, 0x35, 0xA3, 0x22, 0x0B, 0xD9, 0x8E, 0xE8,
        0xCC, 0xBB, 0xA5, 0x1D, 0x3D, 0x84, 0x8D, 0xF5, 0xE8, 0x4E, 0xE8, 0x3C, 0xF2, 0x59, 0x23, 0xC6,
        0xF4, 0x2F, 0x25, 0xFC, 0xB6, 0xBB, 0xA5, 0x8A, 0xBE, 0x1D, 0x7D, 0x74, 0xBB, 0x71, 0x26, 0x11,
        0x78, 0x8E, 0xE4, 0x06, 0x59, 0xDF, 0x12, 0xEC, 0xFE, 0x5F, 0x8F, 0x15, 0x9B, 0x88, 0x59, 0xC1,
        0x70, 0x71, 0x5F, 0xF4, 0xC9, 0xEA, 0xDA, 0xB6, 0x6A, 0x86, 0x67, 0xA3, 0xFC, 0x28, 0x6F, 0x70,
        0xDF, 0xE4, 0x6F, 0x37, 0x1C, 0x37, 0xA9, 0x62, 0x83, 0x2C, 0xE7, 0xB1, 0x99, 0xD5, 0x88, 0x9E,
        0x68, 0xA5, 0x5D, 0x6B, 0x77, 0x3E, 0x68, 0xF2, 0xA5, 0x76, 0xFE, 0x67, 0x43, 0xB3, 0x7D, 0x97,
        0x34, 0x12, 0x3D, 0x46, 0xEC, 0x28, 0xBB, 0x87, 0xAA, 0xCE, 0x78, 0x32, 0x27, 0x77, 0x4B, 0x1E,
        0x96, 0xB9, 0x5B, 0x47, 0x97, 0xBA, 0xCC, 0x77, 0x41, 0x24, 0xD4, 0xE3, 0x09, 0x1C, 0x21
      ])
    case 2048:
      return new Uint8Array
    case 3072:
      return new Uint8Array
    case 4096:
      return new Uint8Array
    default:
      return new Uint8Array
  }
}

export function GetDesImportData(size: number): Uint8Array {
  switch (size) {
    case 64:
      return new Uint8Array([
        0XFB, 0X8B, 0X9F, 0X12, 0XA0, 0X83, 0X19, 0XBE
      ])
    case 128:
      return new Uint8Array([
        0XFB, 0X8B, 0X9F, 0X12, 0XA0, 0X83, 0X19, 0XBE, 0X6A, 0X6F, 0X63, 0X2A, 0X7C, 0X86, 0XBA, 0XCA
      ])
    case 192:
      return new Uint8Array([
        0XFB, 0X8B, 0X9F, 0X12, 0XA0, 0X83, 0X19, 0XBE, 0X6A, 0X6F, 0X63, 0X2A, 0X7C, 0X86, 0XBA, 0XCA,
        0XFB, 0X8B, 0X9F, 0X12, 0XA0, 0X83, 0X19, 0XBF
      ])
    default:
      return new Uint8Array
  }
}