/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import certManager from '@ohos.security.certManager';
import { BusinessError } from '@ohos.base';
import buffer from '@ohos.buffer';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, TestType, Size, Level } from '@ohos/hypium';
import * as signVerifyPromise from './utils/signAndVerify/signVerifyPromise';
import { GlobalContext } from '../../../../src/main/ets/pages/HomePage';
import certManagerDialog from '@ohos.security.certManagerDialog';
import deviceInfo from '@ohos.deviceInfo';
import type common from '@ohos.app.ability.common';

let caCert = new Uint8Array([0x30, 0x82, 0x04, 0x31, 0x30, 0x82, 0x03, 0x19, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x00,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30,
  0x81, 0x95, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x52, 0x31,
  0x44, 0x30, 0x42, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x3b, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e,
  0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20,
  0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68,
  0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x40, 0x30, 0x3e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x37,
  0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
  0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49,
  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x52, 0x6f, 0x6f, 0x74,
  0x43, 0x41, 0x20, 0x32, 0x30, 0x31, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x31, 0x31, 0x32, 0x30,
  0x36, 0x31, 0x33, 0x34, 0x39, 0x35, 0x32, 0x5a, 0x17, 0x0d, 0x33, 0x31, 0x31, 0x32, 0x30, 0x31,
  0x31, 0x33, 0x34, 0x39, 0x35, 0x32, 0x5a, 0x30, 0x81, 0x95, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
  0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x52, 0x31, 0x44, 0x30, 0x42, 0x06, 0x03, 0x55, 0x04, 0x0a,
  0x13, 0x3b, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65,
  0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
  0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x65,
  0x72, 0x74, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x40, 0x30,
  0x3e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x37, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63,
  0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65,
  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
  0x6f, 0x6e, 0x73, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x20, 0x32, 0x30, 0x31, 0x31, 0x30,
  0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,
  0xa9, 0x53, 0x00, 0xe3, 0x2e, 0xa6, 0xf6, 0x8e, 0xfa, 0x60, 0xd8, 0x2d, 0x95, 0x3e, 0xf8, 0x2c,
  0x2a, 0x54, 0x4e, 0xcd, 0xb9, 0x84, 0x61, 0x94, 0x58, 0x4f, 0x8f, 0x3d, 0x8b, 0xe4, 0x43, 0xf3,
  0x75, 0x89, 0x8d, 0x51, 0xe4, 0xc3, 0x37, 0xd2, 0x8a, 0x88, 0x4d, 0x79, 0x1e, 0xb7, 0x12, 0xdd,
  0x43, 0x78, 0x4a, 0x8a, 0x92, 0xe6, 0xd7, 0x48, 0xd5, 0x0f, 0xa4, 0x3a, 0x29, 0x44, 0x35, 0xb8,
  0x07, 0xf6, 0x68, 0x1d, 0x55, 0xcd, 0x38, 0x51, 0xf0, 0x8c, 0x24, 0x31, 0x85, 0xaf, 0x83, 0xc9,
  0x7d, 0xe9, 0x77, 0xaf, 0xed, 0x1a, 0x7b, 0x9d, 0x17, 0xf9, 0xb3, 0x9d, 0x38, 0x50, 0x0f, 0xa6,
  0x5a, 0x79, 0x91, 0x80, 0xaf, 0x37, 0xae, 0xa6, 0xd3, 0x31, 0xfb, 0xb5, 0x26, 0x09, 0x9d, 0x3c,
  0x5a, 0xef, 0x51, 0xc5, 0x2b, 0xdf, 0x96, 0x5d, 0xeb, 0x32, 0x1e, 0x02, 0xda, 0x70, 0x49, 0xec,
  0x6e, 0x0c, 0xc8, 0x9a, 0x37, 0x8d, 0xf7, 0xf1, 0x36, 0x60, 0x4b, 0x26, 0x2c, 0x82, 0x9e, 0xd0,
  0x78, 0xf3, 0x0d, 0x0f, 0x63, 0xa4, 0x51, 0x30, 0xe1, 0xf9, 0x2b, 0x27, 0x12, 0x07, 0xd8, 0xea,
  0xbd, 0x18, 0x62, 0x98, 0xb0, 0x59, 0x37, 0x7d, 0xbe, 0xee, 0xf3, 0x20, 0x51, 0x42, 0x5a, 0x83,
  0xef, 0x93, 0xba, 0x69, 0x15, 0xf1, 0x62, 0x9d, 0x9f, 0x99, 0x39, 0x82, 0xa1, 0xb7, 0x74, 0x2e,
  0x8b, 0xd4, 0xc5, 0x0b, 0x7b, 0x2f, 0xf0, 0xc8, 0x0a, 0xda, 0x3d, 0x79, 0x0a, 0x9a, 0x93, 0x1c,
  0xa5, 0x28, 0x72, 0x73, 0x91, 0x43, 0x9a, 0xa7, 0xd1, 0x4d, 0x85, 0x84, 0xb9, 0xa9, 0x74, 0x8f,
  0x14, 0x40, 0xc7, 0xdc, 0xde, 0xac, 0x41, 0x64, 0x6c, 0xb4, 0x19, 0x9b, 0x02, 0x63, 0x6d, 0x24,
  0x64, 0x8f, 0x44, 0xb2, 0x25, 0xea, 0xce, 0x5d, 0x74, 0x0c, 0x63, 0x32, 0x5c, 0x8d, 0x87, 0xe5,
  0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0x89, 0x30, 0x81, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,
  0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b, 0x06, 0x03,
  0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
  0x04, 0x16, 0x04, 0x14, 0xa6, 0x91, 0x42, 0xfd, 0x13, 0x61, 0x4a, 0x23, 0x9e, 0x08, 0xa4, 0x29,
  0xe5, 0xd8, 0x13, 0x04, 0x23, 0xee, 0x41, 0x25, 0x30, 0x47, 0x06, 0x03, 0x55, 0x1d, 0x1e, 0x04,
  0x40, 0x30, 0x3e, 0xa0, 0x3c, 0x30, 0x05, 0x82, 0x03, 0x2e, 0x67, 0x72, 0x30, 0x05, 0x82, 0x03,
  0x2e, 0x65, 0x75, 0x30, 0x06, 0x82, 0x04, 0x2e, 0x65, 0x64, 0x75, 0x30, 0x06, 0x82, 0x04, 0x2e,
  0x6f, 0x72, 0x67, 0x30, 0x05, 0x81, 0x03, 0x2e, 0x67, 0x72, 0x30, 0x05, 0x81, 0x03, 0x2e, 0x65,
  0x75, 0x30, 0x06, 0x81, 0x04, 0x2e, 0x65, 0x64, 0x75, 0x30, 0x06, 0x81, 0x04, 0x2e, 0x6f, 0x72,
  0x67, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00,
  0x03, 0x82, 0x01, 0x01, 0x00, 0x1f, 0xef, 0x79, 0x41, 0xe1, 0x7b, 0x6e, 0x3f, 0xb2, 0x8c, 0x86,
  0x37, 0x42, 0x4a, 0x4e, 0x1c, 0x37, 0x1e, 0x8d, 0x66, 0xba, 0x24, 0x81, 0xc9, 0x4f, 0x12, 0x0f,
  0x21, 0xc0, 0x03, 0x97, 0x86, 0x25, 0x6d, 0x5d, 0xd3, 0x22, 0x29, 0xa8, 0x6c, 0xa2, 0x0d, 0xa9,
  0xeb, 0x3d, 0x06, 0x5b, 0x99, 0x3a, 0xc7, 0xcc, 0xc3, 0x9a, 0x34, 0x7f, 0xab, 0x0e, 0xc8, 0x4e,
  0x1c, 0xe1, 0xfa, 0xe4, 0xdc, 0xcd, 0x0d, 0xbe, 0xbf, 0x24, 0xfe, 0x6c, 0xe7, 0x6b, 0xc2, 0x0d,
  0xc8, 0x06, 0x9e, 0x4e, 0x8d, 0x61, 0x28, 0xa6, 0x6a, 0xfd, 0xe5, 0xf6, 0x62, 0xea, 0x18, 0x3c,
  0x4e, 0xa0, 0x53, 0x9d, 0xb2, 0x3a, 0x9c, 0xeb, 0xa5, 0x9c, 0x91, 0x16, 0xb6, 0x4d, 0x82, 0xe0,
  0x0c, 0x05, 0x48, 0xa9, 0x6c, 0xf5, 0xcc, 0xf8, 0xcb, 0x9d, 0x49, 0xb4, 0xf0, 0x02, 0xa5, 0xfd,
  0x70, 0x03, 0xed, 0x8a, 0x21, 0xa5, 0xae, 0x13, 0x86, 0x49, 0xc3, 0x33, 0x73, 0xbe, 0x87, 0x3b,
  0x74, 0x8b, 0x17, 0x45, 0x26, 0x4c, 0x16, 0x91, 0x83, 0xfe, 0x67, 0x7d, 0xcd, 0x4d, 0x63, 0x67,
  0xfa, 0xf3, 0x03, 0x12, 0x96, 0x78, 0x06, 0x8d, 0xb1, 0x67, 0xed, 0x8e, 0x3f, 0xbe, 0x9f, 0x4f,
  0x02, 0xf5, 0xb3, 0x09, 0x2f, 0xf3, 0x4c, 0x87, 0xdf, 0x2a, 0xcb, 0x95, 0x7c, 0x01, 0xcc, 0xac,
  0x36, 0x7a, 0xbf, 0xa2, 0x73, 0x7a, 0xf7, 0x8f, 0xc1, 0xb5, 0x9a, 0xa1, 0x14, 0xb2, 0x8f, 0x33,
  0x9f, 0x0d, 0xef, 0x22, 0xdc, 0x66, 0x7b, 0x84, 0xbd, 0x45, 0x17, 0x06, 0x3d, 0x3c, 0xca, 0xb9,
  0x77, 0x34, 0x8f, 0xca, 0xea, 0xcf, 0x3f, 0x31, 0x3e, 0xe3, 0x88, 0xe3, 0x80, 0x49, 0x25, 0xc8,
  0x97, 0xb5, 0x9d, 0x9a, 0x99, 0x4d, 0xb0, 0x3c, 0xf8, 0x4a, 0x00, 0x9b, 0x64, 0xdd, 0x9f, 0x39,
  0x4b, 0xd1, 0x27, 0xd7, 0xb8]);

let caCertp7b: Uint8Array = new Uint8Array([0x30, 0x82, 0x0b, 0x93, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x02, 0xa0, 0x82, 0x0b, 0x84,
  0x30, 0x82, 0x0b, 0x80, 0x02, 0x01, 0x01, 0x31, 0x00, 0x30, 0x0b, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
  0x01, 0x07, 0x01, 0xa0, 0x82, 0x0b, 0x66, 0x30, 0x82, 0x05, 0xaf, 0x30, 0x82, 0x03, 0x97, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x14, 0x0c, 0x7a, 0x28, 0xa2, 0xf1, 0x43, 0x49, 0x49, 0xc4, 0x42, 0x03, 0x8b, 0xeb, 0x15, 0xf3, 0xfc,
  0xf9, 0xc7, 0x91, 0xfb, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
  0x30, 0x67, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x63, 0x6e, 0x31, 0x0c, 0x30, 0x0a,
  0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x07,
  0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x61, 0x61, 0x61,
  0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06,
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
  0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x03, 0x61, 0x61, 0x61, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x34, 0x32,
  0x38, 0x30, 0x38, 0x30, 0x32, 0x35, 0x30, 0x5a, 0x17, 0x0d, 0x33, 0x35, 0x30, 0x34, 0x32, 0x36, 0x30, 0x38, 0x30,
  0x32, 0x35, 0x30, 0x5a, 0x30, 0x67, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x63, 0x6e,
  0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06,
  0x03, 0x55, 0x04, 0x07, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c,
  0x03, 0x61, 0x61, 0x61, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31,
  0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x03, 0x61, 0x61, 0x61, 0x31, 0x12, 0x30, 0x10, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x03, 0x61, 0x61, 0x61, 0x30, 0x82, 0x02, 0x22, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00,
  0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xd7, 0x25, 0xfc, 0xef, 0x5f, 0xaf, 0xc1, 0x3e, 0x86, 0xbb,
  0x90, 0x2d, 0xcc, 0x7a, 0x2c, 0x27, 0xc3, 0x58, 0x78, 0x78, 0x53, 0x91, 0xfd, 0xe2, 0xa7, 0x97, 0x91, 0x10, 0xe1,
  0x7e, 0xa8, 0xf6, 0xbb, 0x67, 0x2b, 0xa9, 0xfa, 0x4d, 0x7c, 0x17, 0xb2, 0x8b, 0x23, 0xba, 0x6c, 0xbb, 0xfe, 0x4c,
  0x8c, 0x2e, 0x4b, 0x49, 0xd3, 0x34, 0x9f, 0x36, 0xe1, 0x04, 0x75, 0x28, 0x34, 0x02, 0x9a, 0xda, 0x73, 0xb9, 0x1a,
  0xab, 0xd3, 0x0f, 0x2d, 0x3f, 0x9d, 0x42, 0xb9, 0x39, 0x0d, 0xd0, 0xfa, 0xd3, 0xdb, 0x9b, 0x6b, 0xc5, 0x6a, 0x86,
  0xc4, 0x53, 0x05, 0x50, 0x91, 0x1a, 0xee, 0x25, 0xd1, 0x9f, 0xcb, 0x38, 0xf7, 0x7a, 0x99, 0x7f, 0x7a, 0x67, 0x12,
  0x66, 0x02, 0xbe, 0x6c, 0x9f, 0x50, 0xa7, 0x70, 0x31, 0x42, 0x53, 0x68, 0xfc, 0x9c, 0xe9, 0x6d, 0x58, 0xbb, 0x8a,
  0x4d, 0x44, 0xf0, 0xa1, 0x20, 0x3c, 0x61, 0x7e, 0xad, 0x5e, 0xfc, 0x42, 0x70, 0xbc, 0xff, 0x23, 0xca, 0xbf, 0xe6,
  0x5f, 0xec, 0xb5, 0x20, 0x21, 0x9a, 0x42, 0x38, 0x0e, 0xd5, 0x83, 0x22, 0x7b, 0x6f, 0x23, 0x33, 0x0a, 0x7f, 0x14,
  0xf3, 0x07, 0x0f, 0xba, 0x6a, 0x29, 0x2f, 0xc8, 0x99, 0xec, 0x8f, 0xc3, 0x0b, 0x8f, 0xf7, 0x3f, 0x9e, 0x42, 0xf7,
  0x46, 0x66, 0x95, 0x49, 0x16, 0xbd, 0x02, 0xcf, 0x7c, 0xf6, 0xb1, 0x1f, 0x9d, 0x59, 0x22, 0xc4, 0xf3, 0x08, 0xb3,
  0xfc, 0x2a, 0x6b, 0x31, 0x29, 0xf5, 0x00, 0x02, 0x20, 0xca, 0x08, 0x97, 0x9f, 0xd3, 0xe6, 0xab, 0x26, 0x29, 0x35,
  0x48, 0x84, 0x99, 0xd8, 0xdb, 0xef, 0xd9, 0x50, 0x95, 0xb3, 0x0c, 0xc4, 0x84, 0xab, 0x39, 0x4c, 0x0e, 0x50, 0x04,
  0x92, 0x97, 0xdf, 0x79, 0x41, 0x21, 0x5a, 0x8b, 0xcb, 0xce, 0x4d, 0x1d, 0xd6, 0x2f, 0x46, 0x1b, 0x8b, 0x39, 0xcb,
  0xe3, 0x3e, 0xcf, 0xb9, 0x60, 0xf4, 0xaf, 0x8b, 0xf7, 0xce, 0x7a, 0x94, 0x6d, 0xe0, 0x8a, 0x13, 0xb3, 0xbc, 0xeb,
  0x62, 0xe6, 0x93, 0x2b, 0x01, 0x01, 0xdd, 0xce, 0x1b, 0x3a, 0xf2, 0xe9, 0x6b, 0x48, 0x96, 0x82, 0x4b, 0x38, 0x34,
  0x0d, 0x6b, 0x8b, 0xe2, 0xc7, 0x66, 0x37, 0x87, 0x74, 0x24, 0x4d, 0xa2, 0x00, 0x7a, 0x51, 0x55, 0x3a, 0xf5, 0x61,
  0x91, 0xbb, 0x26, 0x43, 0x33, 0xe2, 0xce, 0x7f, 0x80, 0x83, 0x89, 0xcd, 0x7c, 0xfd, 0x6a, 0xf6, 0x4c, 0xe8, 0xcc,
  0x08, 0x6e, 0xd2, 0xb3, 0x85, 0x92, 0x9d, 0x21, 0x6c, 0x6a, 0xb4, 0x82, 0xf6, 0x5d, 0xaa, 0xfc, 0x38, 0x0e, 0x60,
  0x4d, 0xeb, 0x7c, 0x21, 0xa2, 0xc8, 0x0c, 0x1c, 0xb5, 0xd5, 0x24, 0xaf, 0xa3, 0xaa, 0xf8, 0x2b, 0x92, 0x34, 0xa4,
  0xe5, 0x66, 0x83, 0xd8, 0x4b, 0x15, 0xac, 0x66, 0xf9, 0x06, 0xdb, 0xc8, 0xa7, 0xe2, 0xcf, 0x7b, 0x7b, 0x82, 0x24,
  0xfa, 0xd7, 0x04, 0xd5, 0xf2, 0xbe, 0x2d, 0x92, 0xd0, 0xa9, 0x02, 0xd5, 0x88, 0xe5, 0x5c, 0xca, 0xe6, 0xaa, 0xfb,
  0x38, 0xd1, 0x56, 0xf7, 0xe2, 0x60, 0x9e, 0x84, 0xab, 0xc9, 0x60, 0x11, 0xb1, 0x3c, 0xf4, 0x9b, 0xd5, 0x2f, 0xf8,
  0x2e, 0xe5, 0xe4, 0x71, 0x8d, 0x13, 0x5f, 0x30, 0x55, 0xa2, 0x57, 0x35, 0x40, 0xb1, 0x0a, 0x65, 0x7a, 0x8c, 0x4b,
  0x22, 0x2e, 0xaa, 0x73, 0x97, 0x84, 0x8a, 0xd1, 0x57, 0x66, 0xdf, 0xfd, 0xe7, 0x9b, 0xe0, 0x62, 0xa6, 0xc0, 0xa6,
  0x50, 0xd7, 0x3a, 0x34, 0x78, 0x49, 0xf4, 0x8e, 0x79, 0xa1, 0x48, 0x6f, 0xe4, 0x42, 0x9c, 0xff, 0x44, 0x6d, 0xe9,
  0x25, 0x85, 0x66, 0xfc, 0x12, 0xf1, 0x11, 0xd9, 0x42, 0xeb, 0x91, 0xb8, 0xdb, 0x68, 0x87, 0x81, 0x87, 0x34, 0x98,
  0x79, 0x36, 0x35, 0x6a, 0x6c, 0xa3, 0xbb, 0x83, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d,
  0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x20, 0x56, 0x84, 0xa9, 0x4a, 0x45, 0x57, 0xb9, 0x0a, 0x74,
  0x12, 0xea, 0x66, 0xba, 0x6b, 0xcc, 0xa4, 0xe8, 0xe0, 0xbe, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18,
  0x30, 0x16, 0x80, 0x14, 0x20, 0x56, 0x84, 0xa9, 0x4a, 0x45, 0x57, 0xb9, 0x0a, 0x74, 0x12, 0xea, 0x66, 0xba, 0x6b,
  0xcc, 0xa4, 0xe8, 0xe0, 0xbe, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03,
  0x01, 0x01, 0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03,
  0x82, 0x02, 0x01, 0x00, 0x0d, 0xe5, 0xbe, 0x47, 0x84, 0x34, 0x74, 0xf5, 0xe6, 0x8a, 0xbc, 0x24, 0x66, 0x3c, 0x30,
  0xe3, 0x8b, 0x61, 0x0d, 0xb1, 0x0f, 0x18, 0xec, 0xbb, 0xb9, 0x32, 0x42, 0x36, 0x03, 0x0e, 0x86, 0x18, 0x1a, 0x73,
  0xe4, 0x5a, 0xfa, 0xb9, 0x97, 0xfd, 0x40, 0xff, 0x54, 0xe4, 0x97, 0x2f, 0x47, 0x56, 0x55, 0x50, 0xcd, 0x1e, 0xe4,
  0x4e, 0x9d, 0x82, 0xc9, 0xb4, 0x47, 0x3a, 0x1b, 0xff, 0x1d, 0xcc, 0xdb, 0xad, 0x28, 0xb1, 0x4e, 0x65, 0x51, 0x43,
  0x7f, 0xf9, 0x4f, 0x27, 0xbc, 0x58, 0xe2, 0x59, 0xcb, 0xa8, 0xa8, 0x00, 0x0f, 0xda, 0xef, 0x94, 0x06, 0x52, 0x10,
  0x18, 0x71, 0xfb, 0x97, 0x41, 0x88, 0x13, 0xb1, 0x89, 0xa5, 0x25, 0x40, 0xf7, 0x2c, 0x9c, 0x7d, 0xb9, 0x63, 0x0d,
  0x64, 0x12, 0x7a, 0xd5, 0x83, 0xa8, 0xcd, 0x49, 0xf5, 0xb3, 0x19, 0xb9, 0xac, 0x6f, 0xe5, 0xc1, 0x7d, 0xbb, 0x85,
  0xf8, 0x6c, 0x77, 0x4d, 0xc5, 0x0a, 0x81, 0xde, 0x8b, 0xfb, 0x7d, 0xfd, 0x9a, 0x57, 0x22, 0xd3, 0xf3, 0xa9, 0xa6,
  0xe4, 0x10, 0x0a, 0x57, 0x96, 0x92, 0xf8, 0x4c, 0x03, 0x7c, 0xff, 0xfd, 0x16, 0x14, 0x6b, 0x01, 0xb9, 0xe6, 0xad,
  0xaf, 0xa5, 0xe1, 0x1f, 0x23, 0xc0, 0xb1, 0xd8, 0x23, 0x8d, 0x12, 0x82, 0x9d, 0x50, 0xe0, 0x71, 0xbe, 0x95, 0x87,
  0x32, 0xf2, 0x6f, 0x3f, 0x5c, 0x4d, 0x6f, 0x53, 0x2c, 0x5c, 0xa2, 0x48, 0xc4, 0x73, 0x3f, 0x67, 0x28, 0x11, 0x5b,
  0xbf, 0x12, 0x9e, 0xd8, 0xed, 0x42, 0xd5, 0x51, 0xea, 0xe2, 0x29, 0xd4, 0x90, 0xc6, 0x34, 0x00, 0xa3, 0x3a, 0xd3,
  0xc4, 0x16, 0x27, 0x66, 0x2d, 0xbb, 0xc0, 0x6f, 0xf4, 0x59, 0x3c, 0xab, 0xd9, 0xd0, 0xd9, 0xc7, 0x0a, 0xb1, 0x39,
  0xbb, 0x7e, 0xd1, 0x02, 0x27, 0x0a, 0x7e, 0x7a, 0x67, 0xd7, 0xf3, 0x0c, 0xb0, 0x29, 0xcd, 0x97, 0x63, 0x84, 0x44,
  0x97, 0x70, 0x33, 0x9e, 0xb0, 0x9a, 0x0e, 0x6a, 0xcb, 0xfe, 0x25, 0x75, 0xe8, 0x72, 0x19, 0x81, 0xd7, 0x0c, 0xf6,
  0xef, 0x09, 0xcc, 0x5a, 0xe1, 0xe0, 0xf6, 0x7b, 0xa5, 0x6a, 0x41, 0x74, 0xc0, 0x84, 0xa7, 0x5a, 0x1f, 0x2d, 0x3f,
  0x6e, 0xb0, 0xf8, 0x70, 0x5e, 0x74, 0x8a, 0x5a, 0xc7, 0x79, 0x76, 0x27, 0x96, 0xda, 0x7a, 0xd7, 0x5c, 0x2a, 0x24,
  0x0b, 0xc3, 0x87, 0x4b, 0x6a, 0xe9, 0x31, 0x24, 0x23, 0xed, 0x9a, 0xee, 0xed, 0x9f, 0x96, 0x35, 0xb5, 0xb5, 0x9b,
  0xf0, 0xdd, 0xc0, 0x8f, 0xfb, 0x17, 0x29, 0xe5, 0xbe, 0x1d, 0x5d, 0x0f, 0x57, 0x12, 0x31, 0xb7, 0x2c, 0x93, 0x49,
  0x79, 0xd8, 0xff, 0x87, 0x97, 0x98, 0xe3, 0x6c, 0x25, 0x07, 0x66, 0x40, 0xe8, 0xcd, 0xd8, 0x41, 0xcc, 0x01, 0x7e,
  0x41, 0x17, 0x89, 0xeb, 0x1c, 0x5f, 0xba, 0x16, 0x8e, 0xb4, 0xa9, 0x19, 0x98, 0xcb, 0x8f, 0xff, 0xc7, 0x6e, 0x72,
  0x57, 0x5e, 0x7a, 0x50, 0xf7, 0x13, 0x12, 0x00, 0x4c, 0x0f, 0xdc, 0x50, 0x31, 0x89, 0x26, 0xf7, 0x6c, 0x8f, 0xc5,
  0x78, 0x19, 0xd1, 0xb6, 0xef, 0x08, 0x9f, 0x0b, 0xf9, 0xf9, 0x88, 0x2a, 0x2e, 0x62, 0x3e, 0x11, 0xfb, 0xbe, 0xee,
  0xac, 0x30, 0x73, 0xed, 0xea, 0x8e, 0xc1, 0x91, 0x62, 0x9c, 0xd9, 0xec, 0xbf, 0xfc, 0xc0, 0x7c, 0xe9, 0x52, 0x33,
  0x19, 0xd6, 0x40, 0x93, 0x58, 0x02, 0x9a, 0x40, 0x48, 0x4a, 0xe6, 0xc2, 0xe5, 0xab, 0x08, 0xd1, 0x59, 0xa8, 0xe7,
  0x71, 0x0c, 0x37, 0x67, 0xe7, 0x6b, 0x70, 0xe8, 0x35, 0x5f, 0x34, 0x33, 0x9e, 0xb6, 0x41, 0x01, 0xf5, 0xc0, 0x53,
  0x20, 0x30, 0x20, 0x71, 0x0f, 0x54, 0x3b, 0x3d, 0xac, 0x6b, 0x28, 0x75, 0x51, 0x18, 0x12, 0x26, 0x0c, 0x9e, 0x25,
  0x49, 0xf8, 0x6e, 0x30, 0x82, 0x05, 0xaf, 0x30, 0x82, 0x03, 0x97, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x07,
  0xe8, 0x71, 0x87, 0x40, 0xf6, 0x62, 0x07, 0x86, 0x97, 0xb0, 0xd1, 0xd2, 0xb7, 0x30, 0x41, 0x81, 0xfc, 0xbd, 0xb8,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x67, 0x31, 0x0b,
  0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x63, 0x6e, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04,
  0x08, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0c, 0x03, 0x62, 0x62,
  0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a,
  0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x12, 0x30, 0x10, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09,
  0x01, 0x16, 0x03, 0x62, 0x62, 0x62, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x34, 0x32, 0x38, 0x30, 0x38, 0x30,
  0x33, 0x31, 0x30, 0x5a, 0x17, 0x0d, 0x33, 0x35, 0x30, 0x34, 0x32, 0x36, 0x30, 0x38, 0x30, 0x33, 0x31, 0x30, 0x5a,
  0x30, 0x67, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x63, 0x6e, 0x31, 0x0c, 0x30, 0x0a,
  0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x07,
  0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x62, 0x62, 0x62,
  0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x0c, 0x30, 0x0a, 0x06,
  0x03, 0x55, 0x04, 0x03, 0x0c, 0x03, 0x62, 0x62, 0x62, 0x31, 0x12, 0x30, 0x10, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
  0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x03, 0x62, 0x62, 0x62, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a,
  0x02, 0x82, 0x02, 0x01, 0x00, 0xd7, 0x25, 0xfc, 0xef, 0x5f, 0xaf, 0xc1, 0x3e, 0x86, 0xbb, 0x90, 0x2d, 0xcc, 0x7a,
  0x2c, 0x27, 0xc3, 0x58, 0x78, 0x78, 0x53, 0x91, 0xfd, 0xe2, 0xa7, 0x97, 0x91, 0x10, 0xe1, 0x7e, 0xa8, 0xf6, 0xbb,
  0x67, 0x2b, 0xa9, 0xfa, 0x4d, 0x7c, 0x17, 0xb2, 0x8b, 0x23, 0xba, 0x6c, 0xbb, 0xfe, 0x4c, 0x8c, 0x2e, 0x4b, 0x49,
  0xd3, 0x34, 0x9f, 0x36, 0xe1, 0x04, 0x75, 0x28, 0x34, 0x02, 0x9a, 0xda, 0x73, 0xb9, 0x1a, 0xab, 0xd3, 0x0f, 0x2d,
  0x3f, 0x9d, 0x42, 0xb9, 0x39, 0x0d, 0xd0, 0xfa, 0xd3, 0xdb, 0x9b, 0x6b, 0xc5, 0x6a, 0x86, 0xc4, 0x53, 0x05, 0x50,
  0x91, 0x1a, 0xee, 0x25, 0xd1, 0x9f, 0xcb, 0x38, 0xf7, 0x7a, 0x99, 0x7f, 0x7a, 0x67, 0x12, 0x66, 0x02, 0xbe, 0x6c,
  0x9f, 0x50, 0xa7, 0x70, 0x31, 0x42, 0x53, 0x68, 0xfc, 0x9c, 0xe9, 0x6d, 0x58, 0xbb, 0x8a, 0x4d, 0x44, 0xf0, 0xa1,
  0x20, 0x3c, 0x61, 0x7e, 0xad, 0x5e, 0xfc, 0x42, 0x70, 0xbc, 0xff, 0x23, 0xca, 0xbf, 0xe6, 0x5f, 0xec, 0xb5, 0x20,
  0x21, 0x9a, 0x42, 0x38, 0x0e, 0xd5, 0x83, 0x22, 0x7b, 0x6f, 0x23, 0x33, 0x0a, 0x7f, 0x14, 0xf3, 0x07, 0x0f, 0xba,
  0x6a, 0x29, 0x2f, 0xc8, 0x99, 0xec, 0x8f, 0xc3, 0x0b, 0x8f, 0xf7, 0x3f, 0x9e, 0x42, 0xf7, 0x46, 0x66, 0x95, 0x49,
  0x16, 0xbd, 0x02, 0xcf, 0x7c, 0xf6, 0xb1, 0x1f, 0x9d, 0x59, 0x22, 0xc4, 0xf3, 0x08, 0xb3, 0xfc, 0x2a, 0x6b, 0x31,
  0x29, 0xf5, 0x00, 0x02, 0x20, 0xca, 0x08, 0x97, 0x9f, 0xd3, 0xe6, 0xab, 0x26, 0x29, 0x35, 0x48, 0x84, 0x99, 0xd8,
  0xdb, 0xef, 0xd9, 0x50, 0x95, 0xb3, 0x0c, 0xc4, 0x84, 0xab, 0x39, 0x4c, 0x0e, 0x50, 0x04, 0x92, 0x97, 0xdf, 0x79,
  0x41, 0x21, 0x5a, 0x8b, 0xcb, 0xce, 0x4d, 0x1d, 0xd6, 0x2f, 0x46, 0x1b, 0x8b, 0x39, 0xcb, 0xe3, 0x3e, 0xcf, 0xb9,
  0x60, 0xf4, 0xaf, 0x8b, 0xf7, 0xce, 0x7a, 0x94, 0x6d, 0xe0, 0x8a, 0x13, 0xb3, 0xbc, 0xeb, 0x62, 0xe6, 0x93, 0x2b,
  0x01, 0x01, 0xdd, 0xce, 0x1b, 0x3a, 0xf2, 0xe9, 0x6b, 0x48, 0x96, 0x82, 0x4b, 0x38, 0x34, 0x0d, 0x6b, 0x8b, 0xe2,
  0xc7, 0x66, 0x37, 0x87, 0x74, 0x24, 0x4d, 0xa2, 0x00, 0x7a, 0x51, 0x55, 0x3a, 0xf5, 0x61, 0x91, 0xbb, 0x26, 0x43,
  0x33, 0xe2, 0xce, 0x7f, 0x80, 0x83, 0x89, 0xcd, 0x7c, 0xfd, 0x6a, 0xf6, 0x4c, 0xe8, 0xcc, 0x08, 0x6e, 0xd2, 0xb3,
  0x85, 0x92, 0x9d, 0x21, 0x6c, 0x6a, 0xb4, 0x82, 0xf6, 0x5d, 0xaa, 0xfc, 0x38, 0x0e, 0x60, 0x4d, 0xeb, 0x7c, 0x21,
  0xa2, 0xc8, 0x0c, 0x1c, 0xb5, 0xd5, 0x24, 0xaf, 0xa3, 0xaa, 0xf8, 0x2b, 0x92, 0x34, 0xa4, 0xe5, 0x66, 0x83, 0xd8,
  0x4b, 0x15, 0xac, 0x66, 0xf9, 0x06, 0xdb, 0xc8, 0xa7, 0xe2, 0xcf, 0x7b, 0x7b, 0x82, 0x24, 0xfa, 0xd7, 0x04, 0xd5,
  0xf2, 0xbe, 0x2d, 0x92, 0xd0, 0xa9, 0x02, 0xd5, 0x88, 0xe5, 0x5c, 0xca, 0xe6, 0xaa, 0xfb, 0x38, 0xd1, 0x56, 0xf7,
  0xe2, 0x60, 0x9e, 0x84, 0xab, 0xc9, 0x60, 0x11, 0xb1, 0x3c, 0xf4, 0x9b, 0xd5, 0x2f, 0xf8, 0x2e, 0xe5, 0xe4, 0x71,
  0x8d, 0x13, 0x5f, 0x30, 0x55, 0xa2, 0x57, 0x35, 0x40, 0xb1, 0x0a, 0x65, 0x7a, 0x8c, 0x4b, 0x22, 0x2e, 0xaa, 0x73,
  0x97, 0x84, 0x8a, 0xd1, 0x57, 0x66, 0xdf, 0xfd, 0xe7, 0x9b, 0xe0, 0x62, 0xa6, 0xc0, 0xa6, 0x50, 0xd7, 0x3a, 0x34,
  0x78, 0x49, 0xf4, 0x8e, 0x79, 0xa1, 0x48, 0x6f, 0xe4, 0x42, 0x9c, 0xff, 0x44, 0x6d, 0xe9, 0x25, 0x85, 0x66, 0xfc,
  0x12, 0xf1, 0x11, 0xd9, 0x42, 0xeb, 0x91, 0xb8, 0xdb, 0x68, 0x87, 0x81, 0x87, 0x34, 0x98, 0x79, 0x36, 0x35, 0x6a,
  0x6c, 0xa3, 0xbb, 0x83, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d,
  0x0e, 0x04, 0x16, 0x04, 0x14, 0x20, 0x56, 0x84, 0xa9, 0x4a, 0x45, 0x57, 0xb9, 0x0a, 0x74, 0x12, 0xea, 0x66, 0xba,
  0x6b, 0xcc, 0xa4, 0xe8, 0xe0, 0xbe, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
  0x20, 0x56, 0x84, 0xa9, 0x4a, 0x45, 0x57, 0xb9, 0x0a, 0x74, 0x12, 0xea, 0x66, 0xba, 0x6b, 0xcc, 0xa4, 0xe8, 0xe0,
  0xbe, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30,
  0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00,
  0x13, 0x11, 0x48, 0xce, 0x68, 0x7f, 0xb8, 0x7f, 0x99, 0x07, 0x8b, 0x6e, 0x93, 0xd8, 0xe0, 0x11, 0x37, 0x2c, 0xe4,
  0x5e, 0xc3, 0x88, 0xba, 0x5d, 0x42, 0x68, 0x5a, 0x2d, 0x08, 0x37, 0xef, 0xad, 0x85, 0x61, 0x49, 0x0e, 0xb4, 0xe5,
  0xd9, 0xb7, 0x3f, 0xe4, 0xae, 0x54, 0xbe, 0xae, 0x71, 0xdf, 0xe7, 0xf1, 0xf3, 0xc0, 0x2e, 0x3b, 0x0d, 0xb8, 0xe3,
  0x08, 0xf3, 0x32, 0x52, 0x42, 0x5b, 0x7a, 0x61, 0x52, 0xda, 0xf4, 0x88, 0x14, 0x5c, 0xbc, 0xe4, 0xd6, 0xc0, 0x61,
  0x7d, 0x7c, 0x97, 0x3b, 0x62, 0x50, 0xa1, 0x56, 0x2a, 0x15, 0xa3, 0xe7, 0xe2, 0x04, 0x22, 0xa0, 0x95, 0xd5, 0x5c,
  0x2b, 0x9f, 0xe0, 0xf6, 0xf2, 0xc6, 0x8f, 0x52, 0x62, 0xa7, 0x0a, 0x4c, 0xfb, 0x07, 0x71, 0xb3, 0xbf, 0xae, 0xf6,
  0xf5, 0x9b, 0x67, 0x97, 0x8b, 0xb2, 0x8c, 0xf3, 0xdf, 0x25, 0x33, 0x42, 0x3b, 0x95, 0xb3, 0xc2, 0xd3, 0x75, 0x4d,
  0xb2, 0xf1, 0x21, 0xfc, 0x79, 0x9f, 0x4a, 0xf6, 0xef, 0xf7, 0x24, 0xf6, 0xda, 0x62, 0x03, 0xf4, 0x06, 0x65, 0xd4,
  0x4c, 0xc4, 0xbb, 0x4a, 0x2a, 0xa0, 0x5b, 0x92, 0xbf, 0xe3, 0x0e, 0x2a, 0xbf, 0x9c, 0x4f, 0x3e, 0xf6, 0x34, 0x2f,
  0x5b, 0x08, 0x87, 0x92, 0x45, 0x53, 0xcf, 0xb5, 0x2d, 0x71, 0xa9, 0x92, 0xfc, 0xe3, 0x44, 0x95, 0x74, 0x22, 0x99,
  0xea, 0x55, 0x6d, 0xe1, 0xa9, 0x21, 0x2a, 0x40, 0x8f, 0x7d, 0x9f, 0xcd, 0x58, 0xc7, 0x48, 0x3d, 0x30, 0x00, 0x65,
  0x6d, 0xd6, 0x61, 0x7f, 0x38, 0xf0, 0x61, 0x73, 0xdf, 0x1f, 0x3d, 0x5f, 0x34, 0x81, 0x01, 0xff, 0xb0, 0xc6, 0x6f,
  0xeb, 0x2d, 0x80, 0xe8, 0x89, 0xef, 0x43, 0x34, 0x5e, 0x8a, 0xbc, 0xa5, 0x04, 0x9f, 0x87, 0xa1, 0xc2, 0x0a, 0x44,
  0x1f, 0x47, 0xe5, 0xa4, 0xab, 0x05, 0x40, 0x4f, 0x03, 0xd8, 0xb5, 0xb3, 0x87, 0x03, 0x88, 0x47, 0x47, 0x7a, 0xae,
  0x7d, 0xcb, 0xbe, 0xe0, 0xde, 0x77, 0xdd, 0x9d, 0x4e, 0xe9, 0xa4, 0x8e, 0xd9, 0xc9, 0xf2, 0x88, 0x3f, 0x02, 0xde,
  0x53, 0x2f, 0x89, 0x54, 0x42, 0x38, 0x7c, 0xb0, 0xce, 0x3b, 0x31, 0xbc, 0xd6, 0x1d, 0x1c, 0xba, 0xda, 0xd6, 0x2b,
  0x9e, 0x5f, 0xcf, 0x4e, 0xed, 0x6e, 0xc8, 0x56, 0x16, 0xf7, 0xf5, 0xf3, 0x92, 0x42, 0xf7, 0xe9, 0x21, 0xca, 0xbf,
  0xcd, 0xd2, 0x80, 0xcb, 0x87, 0xfb, 0x96, 0x56, 0x87, 0xf9, 0x08, 0x89, 0xda, 0x43, 0xd7, 0xc4, 0x74, 0x6a, 0x58,
  0x29, 0x83, 0x69, 0xb0, 0x8c, 0x5c, 0x5a, 0xf5, 0x07, 0xda, 0xa0, 0xe7, 0x04, 0x00, 0x2f, 0x35, 0x61, 0x7c, 0x3a,
  0xdd, 0xeb, 0xbc, 0x8b, 0x15, 0x5f, 0xb7, 0xae, 0x76, 0x79, 0x4c, 0xdf, 0x43, 0x43, 0x50, 0xa4, 0x69, 0xa5, 0xf5,
  0xd0, 0xab, 0x0d, 0xb4, 0x01, 0x30, 0xa3, 0x56, 0x3d, 0xdb, 0x09, 0xea, 0xd6, 0xb6, 0xfe, 0xd9, 0x8c, 0x5c, 0x44,
  0x33, 0xd4, 0x77, 0xdb, 0x3d, 0xb7, 0x35, 0x12, 0xc6, 0xa0, 0x61, 0x6c, 0x01, 0x72, 0x44, 0xe3, 0x99, 0x14, 0x10,
  0x88, 0x90, 0x2e, 0xd2, 0xa9, 0x86, 0xc0, 0xf1, 0x13, 0x8f, 0x75, 0xf9, 0xbe, 0x30, 0xba, 0x37, 0x92, 0x4d, 0xda,
  0x7e, 0x18, 0x44, 0x8d, 0x5b, 0xa6, 0x34, 0xe2, 0x8a, 0xe9, 0x69, 0x6a, 0x59, 0x87, 0x34, 0xa7, 0xd3, 0xa5, 0xc1,
  0xb2, 0x0f, 0x2b, 0x95, 0xae, 0xd0, 0x62, 0xe0, 0x7c, 0x8f, 0xe7, 0x90, 0x1c, 0xfd, 0xd0, 0x32, 0x15, 0x44, 0xdc,
  0x61, 0x11, 0x77, 0x6a, 0x59, 0x56, 0x09, 0x07, 0xae, 0x7a, 0xea, 0x67, 0x33, 0x25, 0x5b, 0x3d, 0x04, 0x56, 0x7d,
  0x2f, 0x73, 0x3b, 0xa6, 0x19, 0x01, 0x83, 0x99, 0x60, 0x42, 0x64, 0x29, 0xd6, 0xef, 0x06, 0x67, 0x7a, 0xc2, 0xa1,
  0x00, 0x31, 0x00]);

export default function api16CertFuncTestTwoUnit() {
  describe('api16CertFuncTestTwoUnit', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })

    /**
     * @tc.number SUB_Security_CertManager_InstallUserTrustedCertificates_0015
     * @tc.name test installUserTrustedCertificateSync interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallUserTrustedCertificates_0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0015 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.GLOBAL_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_InstallUserTrustedCertificates_0015 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_InstallUserTrustedCertificates_0015 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0') != -1).assertTrue();
        }
        let scope: certManager.CertScope = certManager.CertScope.GLOBAL_USER;
        let cmResult : certManager.CMResult = await certManager.getAllUserTrustedCertificates(scope);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.uri: " + cmResult.uri);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.certList.length: " + cmResult.certList?.length);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.certInfo: " + cmResult.certInfo);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.credentialList: " + cmResult.credentialList);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.credential: " + cmResult.credential);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.appUidList: " + cmResult.appUidList);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0015[Promise] cmResult.outData: " + cmResult.outData);
        if (cmResult.certList?.length === undefined) {
          console.error("SUB_Security_CertManager_InstallUserTrustedCertificates_0015 cmResult.certList?.length is 0.");
          expect(null).assertFail();
        } else {
          console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0015 ' + cmResult.certList?.length);
          expect(cmResult.certList?.length > 0).assertTrue();
        }
        try {
          certManager.uninstallUserTrustedCertificateSync(certUri);
          console.info(`SUB_Security_CertManager_InstallUserTrustedCertificates_0015 uninstallUserTrustedCertificateSync success`);
        } catch (e) {
          console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0015 error.code: ${e.code}, message: ${e.message}`);
          expect(null).assertFail();
        }
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0015 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }

      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0015 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_InstallUserTrustedCertificates_0016
     * @tc.name test installUserTrustedCertificateSync interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallUserTrustedCertificates_0016', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0016 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.CURRENT_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_InstallUserTrustedCertificates_0016 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_InstallUserTrustedCertificates_0016 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=100') != -1).assertTrue();
        }
        let scope: certManager.CertScope = certManager.CertScope.CURRENT_USER;
        let cmResult : certManager.CMResult = await certManager.getAllUserTrustedCertificates(scope);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.uri: " + cmResult.uri);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.certList.length: " + cmResult.certList?.length);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.certInfo: " + cmResult.certInfo);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.credentialList: " + cmResult.credentialList);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.credential: " + cmResult.credential);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.appUidList: " + cmResult.appUidList);
        console.warn("SUB_Security_CertManager_InstallUserTrustedCertificates_0016[Promise] cmResult.outData: " + cmResult.outData);
        if (cmResult.certList?.length === undefined) {
          console.error("SUB_Security_CertManager_InstallUserTrustedCertificates_0016 cmResult.certList?.length is 0.");
          expect(null).assertFail();
        } else {
          console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0016 ' + cmResult.certList?.length);
          expect(cmResult.certList?.length > 0).assertTrue();
        }
        try {
          certManager.uninstallUserTrustedCertificateSync(certUri);
          console.info(`SUB_Security_CertManager_InstallUserTrustedCertificates_0016 uninstallUserTrustedCertificateSync success`);
        } catch (e) {
          console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0016 error.code: ${e.code}, message: ${e.message}`);
          expect(null).assertFail();
        }
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0016 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0016 end');
      done();
    });


    /**
     * @tc.number SUB_Security_CertManager_UninstallUserTrustedCertificate_0011
     * @tc.name test uninstallUserTrustedCertificateSync interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_UninstallUserTrustedCertificate_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0011 start');
      let uir ='test';
      try {
        certManager.uninstallUserTrustedCertificateSync(undefined);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }

      try {
        certManager.uninstallUserTrustedCertificateSync(null);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }

      try {
        certManager.uninstallUserTrustedCertificateSync(uir);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0011 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_UninstallUserTrustedCertificate_0012
     * @tc.name test uninstallUserTrustedCertificateSync interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_UninstallUserTrustedCertificate_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.GLOBAL_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0') != -1).assertTrue();
        }
        try {
          certManager.uninstallUserTrustedCertificateSync(certUri);
          console.info(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 uninstallUserTrustedCertificateSync success`);
        } catch (e) {
          console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 error.code: ${e.code}, message: ${e.message}`);
          expect(null).assertFail();
        }
        certManager.uninstallUserTrustedCertificateSync(certUri);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 error.code: ${error.code}, message: ${error.message}`);

        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_NO_FOUND);
      }
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0012 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_UninstallUserTrustedCertificate_0013
     * @tc.name test uninstallUserTrustedCertificateSync interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_UninstallUserTrustedCertificate_0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.GLOBAL_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0') != -1).assertTrue();
        }
        let certUri1 = certUri?.replace('0', '101');
        console.info("SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 certUri1 is " + certUri1);
        try {
          certManager.uninstallUserTrustedCertificateSync(certUri1);
          expect(null).assertFail();
        } catch (e) {
          console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 error.code: ${e.code}, message: ${e.message}`);
          expect(e.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
        }
        certManager.uninstallUserTrustedCertificateSync(certUri);
        console.info(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 uninstallUserTrustedCertificateSync success`);
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }

      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0013 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_UninstallUserTrustedCertificate_0014
     * @tc.name test uninstallUserTrustedCertificateSync interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_UninstallUserTrustedCertificate_0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.CURRENT_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=100') != -1).assertTrue();
        }

        try {
          certManager.uninstallUserTrustedCertificateSync(certUri);
          console.info(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 uninstallUserTrustedCertificateSync success`);
        } catch (e) {
          console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 error.code: ${e.code}, message: ${e.message}`);
          expect(null).assertFail();
        }
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0014 end');
      done();
    });
    /**
     * @tc.number SUB_Security_CertManager_UninstallUserTrustedCertificate_0015
     * @tc.name test uninstallUserTrustedCertificateSync interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_UninstallUserTrustedCertificate_0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.GLOBAL_USER);
        let certUri = result.uri;
        if (certUri === undefined) {
          console.error("SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 certUri is undefined.");
          expect(null).assertFail();
        } else {
          console.info("SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 certUri is " + certUri);
          expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0') != -1).assertTrue();
        }

        try {
          certManager.uninstallUserTrustedCertificateSync(certUri);
          console.info(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 uninstallUserTrustedCertificateSync success`);
        } catch (e) {
          console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 error.code: ${e.code}, message: ${e.message}`);
          expect(null).assertFail();
        }
      } catch (error) {
        console.error(`SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }

      console.info('SUB_Security_CertManager_UninstallUserTrustedCertificate_0015 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenUninstallCertificateDialog_0011
     * @tc.name test OpenUninstallCertificateDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenUninstallCertificateDialog_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0011: started ");
      let uir ='oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0;a=20010044';
      const context :common.Context = GlobalContext.getContext();
      if (deviceInfo.deviceType == '2in1') {
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        try {
          await certManagerDialog.openUninstallCertificateDialog(null, certificateType, uir)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0011: e.code " + err.code);
          expect(err.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
        }

        try {
          await certManagerDialog.openUninstallCertificateDialog(context, 2, uir)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0011: e.code " + err.code);
          expect(err.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
        }

        try {
          await certManagerDialog.openUninstallCertificateDialog(context, certificateType, 'test')
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0011: e.code " + err.code);
          expect(err.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenUninstallCertificateDialog_0012
     * @tc.name test openUninstallCertificateDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenUninstallCertificateDialog_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0012: started ");
      let uir ='oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=100;a=20010044';
      const context :common.Context = GlobalContext.getContext();
      if (deviceInfo.deviceType == '2in1') {
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        try {
          await certManagerDialog.openUninstallCertificateDialog(context, certificateType, uir)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0012: e.code " + err.code);
          expect(err.code).assertEqual(certManagerDialog.CertificateDialogErrorCode.ERROR_OPERATION_FAILED);
        }
      }
      done();
    });


    /**
     * @tc.number SUB_Security_CertManager_OpenUninstallCertificateDialog_0014
     * @tc.name test OpenUninstallCertificateDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenUninstallCertificateDialog_0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0014: started ");
      let keyUri: string | undefined;
      const context :common.Context = GlobalContext.getContext();
      if (deviceInfo.deviceType == '2in1') {
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        let certificateScope: certManagerDialog.CertificateScope = certManagerDialog.CertificateScope.CURRENT_USER;
            try {
              let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, certManager.CertScope.GLOBAL_USER);
              let certUri = result.uri;
              if (certUri === undefined) {
                console.error("SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 certUri is undefined.");
                expect(null).assertFail();
              } else {
                console.info("SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 certUri is " + certUri);
                expect(certUri.search('oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0') != -1).assertTrue();
              }
              let certUri1 = certUri?.replace('0', '101');
              console.info("SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 certUri1 is " + certUri1);
              try {
                await certManagerDialog.openUninstallCertificateDialog(context, certificateType, certUri1);
                expect(null).assertFail();
              } catch (e) {
                console.error(`SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 error.code: ${e.code}, message: ${e.message}`);
                expect(e.code).assertEqual(certManagerDialog.CertificateDialogErrorCode.ERROR_OPERATION_FAILED);
              }
              certManager.uninstallUserTrustedCertificateSync(certUri);
              console.info(`SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 uninstallUserTrustedCertificateSync success`);
            } catch (error) {
              console.error(`SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 error.code: ${error.code}, message: ${error.message}`);
              expect(null).assertFail();
            }
            console.info('SUB_Security_CertManager_OpenUninstallCertificateDialog_0014 end');
        }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenUninstallCertificateDialog_0015
     * @tc.name test openUninstallCertificateDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenUninstallCertificateDialog_0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0015: started ");
      let uir ='oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0;a=20010044';
      const context :common.Context = GlobalContext.getContext();
      if (deviceInfo.deviceType != '2in1') {
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        try {
          await certManagerDialog.openUninstallCertificateDialog(context, certificateType, uir)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenUninstallCertificateDialog_0015: e.code " + err.code);
          expect(err.code).assertEqual(certManagerDialog.CertificateDialogErrorCode.ERROR_DEVICE_NOT_SUPPORTED);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenCertificateDialog_0012
     * @tc.name test openCertificateDetailDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenCertificateDialog_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenCertificateDialog_0012: started ");
      const context :common.Context = GlobalContext.getContext();
      let caCert1: Uint8Array = new Uint8Array([
        0x30, 0x82, 0x0b, 0xc1, 0x02, 0x01,
      ]);
      let property: certManagerDialog.CertificateDialogProperty = {
        showInstallButton: false /* 不显示安装按钮 */
      };
      if (deviceInfo.deviceType == '2in1') {
        try {
          await certManagerDialog.openCertificateDetailDialog(context, null, property)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenCertificateDialog_0012: e.code " + err.code);
          expect(err.code).assertEqual(401);
        }

        try {
          await certManagerDialog.openCertificateDetailDialog(context, caCert1, null)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenCertificateDialog_0012: e.code " + err.code);
          expect(err.code).assertEqual(401);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenCertificateDialog_0030
     * @tc.name test openCertificateDetailDialog
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenCertificateDialog_0030', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenCertificateDialog_0030: started ");
      const context :common.Context = GlobalContext.getContext();
      let caCert1: Uint8Array = new Uint8Array([
        0x30, 0x82, 0x0b, 0xc1, 0x02, 0x01,
      ]);
      let property: certManagerDialog.CertificateDialogProperty = {
        showInstallButton: false /* 不显示安装按钮 */
      };
      if (deviceInfo.deviceType == '2in1') {
        try {
          await certManagerDialog.openCertificateDetailDialog(context, caCert1, property)
          expect(null).assertFail();
        } catch (err) {
          console.error("SUB_Security_CertManager_OpenCertificateDialog_0030: e.code " + err.code);
          expect(err.code).assertEqual(29700003);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenCertificateDialog_0010
     * @tc.name test openCertificateDetailDialog with abnormal parameters
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenCertificateDialog_0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenCertificateDialog_0010: started ");
      const context :common.Context = GlobalContext.getContext();
      let property: certManagerDialog.CertificateDialogProperty = {
        showInstallButton: false /* 不显示安装按钮 */
      };
      if (deviceInfo.deviceType != '2in1') {
        try {
          await certManagerDialog.openCertificateDetailDialog(context, caCert, property)
          expect(null).assertFail();
        } catch (err) {
          console.log("SUB_Security_CertManager_OpenCertificateDialog_0010: e.code " + err.code);
          expect(err.code).assertEqual(certManagerDialog.CertificateDialogErrorCode.ERROR_DEVICE_NOT_SUPPORTED);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_OpenInstallCertificateDialogCertJsApi_Func_0100
     * @tc.name test openInstallCertificateDialog
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.level Level3
     * @tc.type Function
     */
    it('SUB_Security_CertManager_OpenInstallCertificateDialogCertJsApi_Func_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      console.log("SUB_Security_CertManager_OpenInstallCertificateDialogCertJsApi_Func_0040: started ");
      if (deviceInfo.deviceType == '2in1') {
        let caCert1: Uint8Array = new Uint8Array([
          0x30, 0x82, 0x0b, 0xc1, 0x02, 0x01,
        ]);
        const context :common.Context = GlobalContext.getContext();
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        let certificateScope: certManagerDialog.CertificateScope = certManagerDialog.CertificateScope.CURRENT_USER;
        try {
          await certManagerDialog.openInstallCertificateDialog(context, certificateType, certificateScope, caCert1)
          expect(null).assertFail()
        } catch (err) {
          console.error("SUB_Security_CertManager_OpenInstallCertificateDialogCertJsApi_Func_0100: e.code " + err.code);
          expect(err.code).assertEqual(29700003);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManger_OpenUninstallCertDialogCertJsApi_Func_0100
     * @tc.name test openUninstallCertificateDialog
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.level Level3
     * @tc.type Function
     */
    it('SUB_Security_CertManger_OpenUninstallCertDialogCertJsApi_Func_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      console.log("SUB_Security_CertManger_OpenUninstallCertDialogCertJsApi_Func_0100: started ");
      let uir ='oh:t=c;o=vBBPFaSL5wncpUKn4dS5328FRSfoAuqpLVlURCWK_nEA;u=0;a=20010044';
      const context :common.Context = GlobalContext.getContext();
      if (deviceInfo.deviceType != '2in1') {
        let certificateType: certManagerDialog.CertificateType = certManagerDialog.CertificateType.CA_CERT;
        try {
          await certManagerDialog.openUninstallCertificateDialog(null, certificateType, uir)
          expect(null).assertFail();
        } catch (err) {
          console.error("SUB_Security_CertManger_OpenUninstallCertDialogCertJsApi_Func_0100: e.code " + err.code);
          expect(err.code).assertEqual(29700004);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_InstallCaCert_0107
     * @tc.name test installUserTrustedCertificateSync interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallCaCert_0107', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_InstallCaCert_0107 start');
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCertp7b, certManager.CertScope.CURRENT_USER);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallCaCert_0107 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code == 17500003).assertTrue();
      }
      console.info('SUB_Security_CertManager_InstallCaCert_0107 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_InstallCaCert_0108
     * @tc.name test openCertificateDetailDialog
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallCaCert_0108', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_InstallCaCert_0108: started ");
      const context :common.Context = GlobalContext.getContext();
      let caCert1: Uint8Array = new Uint8Array([
        0x30, 0x82, 0x0b, 0xc1, 0x02, 0x01,
      ]);
      let property: certManagerDialog.CertificateDialogProperty = {
        showInstallButton: false /* 不显示安装按钮 */
      };
      try {
        await certManagerDialog.openCertificateDetailDialog(context, caCertp7b, property)
        expect(null).assertFail();
      } catch (err) {
        if (err.code = 29700004) {
          done();
        } else {
          console.error("SUB_Security_CertManager_InstallCaCert_0108: e.code " + err.code);
          expect(err.code).assertEqual(29700003);
        }
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_openAuthorzeDialog_0101
     * @tc.name test openCertificateDetailDialog
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_openAuthorzeDialog_0101', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.log("SUB_Security_CertManager_openAuthorzeDialog_0101: started ");
      try {
        await certManagerDialog.openAuthorizeDialog(null);
        expect(null).assertFail();
      } catch (err) {
        console.error(`SUB_Security_CertManager_openAuthorzeDialog_0101 Failed to authorize certificate. Code: ${err.code}, message: ${err.message}`)
        expect(err.code).assertEqual(401);
      }
      done();
    });
    
  })
}