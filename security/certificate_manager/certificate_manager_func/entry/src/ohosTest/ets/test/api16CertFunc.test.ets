/*
 * Copyright (C) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import certManager from '@ohos.security.certManager';
import { BusinessError } from '@ohos.base';
import buffer from '@ohos.buffer';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, TestType, Size, Level } from '@ohos/hypium';
import * as signVerifyPromise from './utils/signAndVerify/signVerifyPromise';

let caCert = new Uint8Array([0x30, 0x82, 0x04, 0x31, 0x30, 0x82, 0x03, 0x19, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x00,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30,
  0x81, 0x95, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x52, 0x31,
  0x44, 0x30, 0x42, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x3b, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e,
  0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20,
  0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x65, 0x72, 0x74, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68,
  0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x40, 0x30, 0x3e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x37,
  0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
  0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49,
  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x52, 0x6f, 0x6f, 0x74,
  0x43, 0x41, 0x20, 0x32, 0x30, 0x31, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x31, 0x31, 0x32, 0x30,
  0x36, 0x31, 0x33, 0x34, 0x39, 0x35, 0x32, 0x5a, 0x17, 0x0d, 0x33, 0x31, 0x31, 0x32, 0x30, 0x31,
  0x31, 0x33, 0x34, 0x39, 0x35, 0x32, 0x5a, 0x30, 0x81, 0x95, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
  0x55, 0x04, 0x06, 0x13, 0x02, 0x47, 0x52, 0x31, 0x44, 0x30, 0x42, 0x06, 0x03, 0x55, 0x04, 0x0a,
  0x13, 0x3b, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63, 0x20, 0x41, 0x63, 0x61, 0x64, 0x65,
  0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
  0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x43, 0x65,
  0x72, 0x74, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x31, 0x40, 0x30,
  0x3e, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x37, 0x48, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x69, 0x63,
  0x20, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x65,
  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
  0x6f, 0x6e, 0x73, 0x20, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x20, 0x32, 0x30, 0x31, 0x31, 0x30,
  0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01,
  0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00,
  0xa9, 0x53, 0x00, 0xe3, 0x2e, 0xa6, 0xf6, 0x8e, 0xfa, 0x60, 0xd8, 0x2d, 0x95, 0x3e, 0xf8, 0x2c,
  0x2a, 0x54, 0x4e, 0xcd, 0xb9, 0x84, 0x61, 0x94, 0x58, 0x4f, 0x8f, 0x3d, 0x8b, 0xe4, 0x43, 0xf3,
  0x75, 0x89, 0x8d, 0x51, 0xe4, 0xc3, 0x37, 0xd2, 0x8a, 0x88, 0x4d, 0x79, 0x1e, 0xb7, 0x12, 0xdd,
  0x43, 0x78, 0x4a, 0x8a, 0x92, 0xe6, 0xd7, 0x48, 0xd5, 0x0f, 0xa4, 0x3a, 0x29, 0x44, 0x35, 0xb8,
  0x07, 0xf6, 0x68, 0x1d, 0x55, 0xcd, 0x38, 0x51, 0xf0, 0x8c, 0x24, 0x31, 0x85, 0xaf, 0x83, 0xc9,
  0x7d, 0xe9, 0x77, 0xaf, 0xed, 0x1a, 0x7b, 0x9d, 0x17, 0xf9, 0xb3, 0x9d, 0x38, 0x50, 0x0f, 0xa6,
  0x5a, 0x79, 0x91, 0x80, 0xaf, 0x37, 0xae, 0xa6, 0xd3, 0x31, 0xfb, 0xb5, 0x26, 0x09, 0x9d, 0x3c,
  0x5a, 0xef, 0x51, 0xc5, 0x2b, 0xdf, 0x96, 0x5d, 0xeb, 0x32, 0x1e, 0x02, 0xda, 0x70, 0x49, 0xec,
  0x6e, 0x0c, 0xc8, 0x9a, 0x37, 0x8d, 0xf7, 0xf1, 0x36, 0x60, 0x4b, 0x26, 0x2c, 0x82, 0x9e, 0xd0,
  0x78, 0xf3, 0x0d, 0x0f, 0x63, 0xa4, 0x51, 0x30, 0xe1, 0xf9, 0x2b, 0x27, 0x12, 0x07, 0xd8, 0xea,
  0xbd, 0x18, 0x62, 0x98, 0xb0, 0x59, 0x37, 0x7d, 0xbe, 0xee, 0xf3, 0x20, 0x51, 0x42, 0x5a, 0x83,
  0xef, 0x93, 0xba, 0x69, 0x15, 0xf1, 0x62, 0x9d, 0x9f, 0x99, 0x39, 0x82, 0xa1, 0xb7, 0x74, 0x2e,
  0x8b, 0xd4, 0xc5, 0x0b, 0x7b, 0x2f, 0xf0, 0xc8, 0x0a, 0xda, 0x3d, 0x79, 0x0a, 0x9a, 0x93, 0x1c,
  0xa5, 0x28, 0x72, 0x73, 0x91, 0x43, 0x9a, 0xa7, 0xd1, 0x4d, 0x85, 0x84, 0xb9, 0xa9, 0x74, 0x8f,
  0x14, 0x40, 0xc7, 0xdc, 0xde, 0xac, 0x41, 0x64, 0x6c, 0xb4, 0x19, 0x9b, 0x02, 0x63, 0x6d, 0x24,
  0x64, 0x8f, 0x44, 0xb2, 0x25, 0xea, 0xce, 0x5d, 0x74, 0x0c, 0x63, 0x32, 0x5c, 0x8d, 0x87, 0xe5,
  0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x81, 0x89, 0x30, 0x81, 0x86, 0x30, 0x0f, 0x06, 0x03, 0x55,
  0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b, 0x06, 0x03,
  0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
  0x04, 0x16, 0x04, 0x14, 0xa6, 0x91, 0x42, 0xfd, 0x13, 0x61, 0x4a, 0x23, 0x9e, 0x08, 0xa4, 0x29,
  0xe5, 0xd8, 0x13, 0x04, 0x23, 0xee, 0x41, 0x25, 0x30, 0x47, 0x06, 0x03, 0x55, 0x1d, 0x1e, 0x04,
  0x40, 0x30, 0x3e, 0xa0, 0x3c, 0x30, 0x05, 0x82, 0x03, 0x2e, 0x67, 0x72, 0x30, 0x05, 0x82, 0x03,
  0x2e, 0x65, 0x75, 0x30, 0x06, 0x82, 0x04, 0x2e, 0x65, 0x64, 0x75, 0x30, 0x06, 0x82, 0x04, 0x2e,
  0x6f, 0x72, 0x67, 0x30, 0x05, 0x81, 0x03, 0x2e, 0x67, 0x72, 0x30, 0x05, 0x81, 0x03, 0x2e, 0x65,
  0x75, 0x30, 0x06, 0x81, 0x04, 0x2e, 0x65, 0x64, 0x75, 0x30, 0x06, 0x81, 0x04, 0x2e, 0x6f, 0x72,
  0x67, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00,
  0x03, 0x82, 0x01, 0x01, 0x00, 0x1f, 0xef, 0x79, 0x41, 0xe1, 0x7b, 0x6e, 0x3f, 0xb2, 0x8c, 0x86,
  0x37, 0x42, 0x4a, 0x4e, 0x1c, 0x37, 0x1e, 0x8d, 0x66, 0xba, 0x24, 0x81, 0xc9, 0x4f, 0x12, 0x0f,
  0x21, 0xc0, 0x03, 0x97, 0x86, 0x25, 0x6d, 0x5d, 0xd3, 0x22, 0x29, 0xa8, 0x6c, 0xa2, 0x0d, 0xa9,
  0xeb, 0x3d, 0x06, 0x5b, 0x99, 0x3a, 0xc7, 0xcc, 0xc3, 0x9a, 0x34, 0x7f, 0xab, 0x0e, 0xc8, 0x4e,
  0x1c, 0xe1, 0xfa, 0xe4, 0xdc, 0xcd, 0x0d, 0xbe, 0xbf, 0x24, 0xfe, 0x6c, 0xe7, 0x6b, 0xc2, 0x0d,
  0xc8, 0x06, 0x9e, 0x4e, 0x8d, 0x61, 0x28, 0xa6, 0x6a, 0xfd, 0xe5, 0xf6, 0x62, 0xea, 0x18, 0x3c,
  0x4e, 0xa0, 0x53, 0x9d, 0xb2, 0x3a, 0x9c, 0xeb, 0xa5, 0x9c, 0x91, 0x16, 0xb6, 0x4d, 0x82, 0xe0,
  0x0c, 0x05, 0x48, 0xa9, 0x6c, 0xf5, 0xcc, 0xf8, 0xcb, 0x9d, 0x49, 0xb4, 0xf0, 0x02, 0xa5, 0xfd,
  0x70, 0x03, 0xed, 0x8a, 0x21, 0xa5, 0xae, 0x13, 0x86, 0x49, 0xc3, 0x33, 0x73, 0xbe, 0x87, 0x3b,
  0x74, 0x8b, 0x17, 0x45, 0x26, 0x4c, 0x16, 0x91, 0x83, 0xfe, 0x67, 0x7d, 0xcd, 0x4d, 0x63, 0x67,
  0xfa, 0xf3, 0x03, 0x12, 0x96, 0x78, 0x06, 0x8d, 0xb1, 0x67, 0xed, 0x8e, 0x3f, 0xbe, 0x9f, 0x4f,
  0x02, 0xf5, 0xb3, 0x09, 0x2f, 0xf3, 0x4c, 0x87, 0xdf, 0x2a, 0xcb, 0x95, 0x7c, 0x01, 0xcc, 0xac,
  0x36, 0x7a, 0xbf, 0xa2, 0x73, 0x7a, 0xf7, 0x8f, 0xc1, 0xb5, 0x9a, 0xa1, 0x14, 0xb2, 0x8f, 0x33,
  0x9f, 0x0d, 0xef, 0x22, 0xdc, 0x66, 0x7b, 0x84, 0xbd, 0x45, 0x17, 0x06, 0x3d, 0x3c, 0xca, 0xb9,
  0x77, 0x34, 0x8f, 0xca, 0xea, 0xcf, 0x3f, 0x31, 0x3e, 0xe3, 0x88, 0xe3, 0x80, 0x49, 0x25, 0xc8,
  0x97, 0xb5, 0x9d, 0x9a, 0x99, 0x4d, 0xb0, 0x3c, 0xf8, 0x4a, 0x00, 0x9b, 0x64, 0xdd, 0x9f, 0x39,
  0x4b, 0xd1, 0x27, 0xd7, 0xb8]);

let priEccCredData = buffer.from([
  0x30, 0x82, 0x04, 0x6a, 0x02, 0x01, 0x03, 0x30, 0x82, 0x04, 0x30, 0x06, 0x09, 0x2a, 0x86, 0x48,
  0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0xa0, 0x82, 0x04, 0x21, 0x04, 0x82, 0x04, 0x1d, 0x30, 0x82,
  0x04, 0x19, 0x30, 0x82, 0x03, 0x0f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07,
  0x06, 0xa0, 0x82, 0x03, 0x00, 0x30, 0x82, 0x02, 0xfc, 0x02, 0x01, 0x00, 0x30, 0x82, 0x02, 0xf5,
  0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x07, 0x01, 0x30, 0x1c, 0x06, 0x0a, 0x2a,
  0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01, 0x03, 0x30, 0x0e, 0x04, 0x08, 0x1a, 0x75, 0xee,
  0xca, 0xf7, 0x3d, 0x49, 0x03, 0x02, 0x02, 0x08, 0x00, 0x80, 0x82, 0x02, 0xc8, 0x26, 0x53, 0x8f,
  0xb3, 0xb4, 0x94, 0x16, 0x73, 0x7a, 0xd1, 0xe7, 0x07, 0x16, 0x11, 0xdd, 0xd0, 0x9c, 0x04, 0x0f,
  0x4b, 0x3c, 0x3c, 0xbd, 0xa9, 0x35, 0xf7, 0xdf, 0x33, 0xc2, 0xfe, 0x49, 0xe9, 0x66, 0xe0, 0x51,
  0x31, 0xe2, 0xd1, 0xfa, 0x06, 0x98, 0x63, 0x65, 0x1c, 0xdf, 0x38, 0xa7, 0x82, 0x27, 0xe2, 0x19,
  0x8f, 0x55, 0xe0, 0x24, 0x34, 0x82, 0x5b, 0xd8, 0x36, 0xd8, 0x56, 0x09, 0x93, 0xb3, 0x1c, 0x6e,
  0xd9, 0x5e, 0x60, 0x28, 0xf3, 0x42, 0xe7, 0x52, 0x41, 0xd0, 0x95, 0x93, 0x62, 0xc2, 0xf9, 0xe6,
  0x26, 0xba, 0x07, 0x04, 0x24, 0xdf, 0xa9, 0x84, 0x98, 0xa3, 0x20, 0x10, 0xe8, 0x4c, 0x15, 0xfb,
  0xaa, 0x09, 0x81, 0xf5, 0xb7, 0x31, 0x1b, 0x22, 0xff, 0xca, 0xc3, 0xa6, 0x61, 0x98, 0x03, 0xb1,
  0x5d, 0xcc, 0x4d, 0x2e, 0xd5, 0xc6, 0x9e, 0x15, 0xb1, 0xb7, 0x67, 0xdf, 0xba, 0xb3, 0x80, 0x8e,
  0x0f, 0xc8, 0xb5, 0x04, 0xa1, 0x93, 0xfc, 0x83, 0x30, 0x15, 0x84, 0x52, 0xc7, 0xaa, 0x1f, 0x16,
  0x3d, 0xf3, 0xd8, 0x49, 0xe0, 0xfd, 0x7f, 0xe6, 0x4d, 0xfb, 0x95, 0x48, 0xe5, 0x3f, 0x88, 0xcf,
  0x8b, 0x9e, 0xa7, 0x84, 0x00, 0x5b, 0x06, 0x54, 0xcd, 0x0e, 0xeb, 0x5e, 0x3d, 0xc2, 0x50, 0x09,
  0x9a, 0x01, 0xb6, 0xb1, 0xd7, 0x5b, 0xef, 0x5a, 0x38, 0x51, 0x85, 0x37, 0x47, 0x3b, 0xc5, 0xfc,
  0x97, 0x65, 0xbc, 0xe7, 0x52, 0x9a, 0xfd, 0x86, 0x9b, 0x6e, 0x69, 0x72, 0x7f, 0x0e, 0x35, 0x4a,
  0xac, 0x2c, 0xba, 0xb6, 0xd0, 0x94, 0x96, 0x8a, 0x71, 0x2e, 0xc1, 0xe5, 0xac, 0x9e, 0xef, 0x89,
  0x91, 0xbf, 0x0f, 0x78, 0x2c, 0x61, 0x1d, 0x96, 0x95, 0x66, 0x92, 0x0a, 0xd0, 0x8d, 0x30, 0xe4,
  0x5b, 0x54, 0x7a, 0x1c, 0x3a, 0xaf, 0x2e, 0x20, 0xd8, 0x3f, 0xba, 0x57, 0xec, 0xa3, 0x5f, 0x40,
  0xd3, 0xa8, 0x2f, 0x15, 0x7d, 0xfa, 0x8f, 0x47, 0x3a, 0x1f, 0x9b, 0xd9, 0xe8, 0x59, 0xd3, 0x6f,
  0x12, 0x97, 0x63, 0xa4, 0xbf, 0x52, 0xcb, 0x11, 0x0e, 0xe8, 0xa0, 0x60, 0xe2, 0x6e, 0x83, 0xb0,
  0x55, 0x8e, 0xce, 0x90, 0xa9, 0x9a, 0xe8, 0xb3, 0x2d, 0xcb, 0xf1, 0xb4, 0x03, 0x9b, 0x17, 0xcb,
  0xf1, 0x8e, 0x1b, 0xa0, 0xc0, 0xc9, 0xfc, 0xab, 0xb6, 0x32, 0xb1, 0x5e, 0xd0, 0x7a, 0x14, 0x2f,
  0xe4, 0xfd, 0x80, 0xf1, 0xd6, 0x1f, 0xb4, 0x7c, 0xe6, 0x33, 0x91, 0xb5, 0x05, 0x7d, 0x95, 0x3b,
  0x07, 0x2f, 0x7b, 0x3d, 0x55, 0xc4, 0x55, 0x5c, 0x26, 0x87, 0x8f, 0xad, 0x51, 0xa9, 0x62, 0xf7,
  0x14, 0x18, 0x25, 0xd1, 0xdf, 0x53, 0x68, 0xd6, 0xed, 0x16, 0x92, 0x53, 0x6a, 0xd2, 0xa3, 0xfb,
  0xfc, 0xb4, 0x38, 0x98, 0xec, 0xed, 0x7f, 0x34, 0xbf, 0xa5, 0x47, 0x09, 0x58, 0x91, 0x8a, 0x99,
  0x4b, 0x2e, 0xf1, 0x60, 0xe9, 0xe8, 0xbf, 0x4c, 0xfe, 0xed, 0xda, 0x3e, 0xf4, 0x07, 0x2e, 0x96,
  0x38, 0x03, 0xb7, 0xfd, 0xdc, 0xa8, 0xdc, 0x78, 0xda, 0x74, 0xbd, 0x8a, 0x5b, 0x2e, 0x8b, 0xe9,
  0x6e, 0x51, 0x55, 0xc5, 0x2e, 0xde, 0xca, 0x6d, 0xba, 0xfe, 0x1f, 0x0b, 0x55, 0x55, 0xdf, 0x6b,
  0x6d, 0x9f, 0xa7, 0x4f, 0x6e, 0xbe, 0x46, 0x59, 0xbf, 0x75, 0x53, 0xbc, 0x3b, 0x68, 0xa1, 0x7f,
  0x1f, 0x1b, 0x26, 0xcf, 0x52, 0x0f, 0x0b, 0x9b, 0x1b, 0x89, 0x5d, 0xbb, 0x03, 0xcf, 0x7c, 0x41,
  0x35, 0x42, 0xe0, 0xf6, 0xce, 0x88, 0xd4, 0x8c, 0x60, 0xba, 0x82, 0x5a, 0x1b, 0x3b, 0xec, 0xd2,
  0x72, 0x72, 0xde, 0xf8, 0x49, 0x87, 0x59, 0xa8, 0xb6, 0x6c, 0xf5, 0xb9, 0x58, 0xbd, 0x18, 0xa1,
  0x3d, 0xd8, 0x05, 0x48, 0x02, 0x51, 0x9f, 0x4c, 0xce, 0x6d, 0x77, 0x4e, 0x8d, 0xe8, 0x41, 0x3b,
  0xb7, 0xd6, 0xf5, 0xf4, 0xbb, 0x6d, 0xc5, 0x1a, 0xa1, 0x38, 0x30, 0xff, 0x61, 0xc9, 0xa8, 0xd1,
  0x56, 0x9c, 0x69, 0x62, 0x7b, 0x71, 0x9e, 0x44, 0x64, 0x04, 0x40, 0x67, 0x00, 0x20, 0xba, 0x90,
  0x1a, 0x6c, 0xaf, 0xe9, 0x61, 0xf1, 0x45, 0x14, 0xdb, 0x0c, 0xd7, 0x2b, 0xc5, 0x61, 0x07, 0xfb,
  0x28, 0xb8, 0xbe, 0x6d, 0x01, 0x6b, 0xdc, 0x97, 0x72, 0x86, 0x42, 0xb6, 0x1c, 0x34, 0x3e, 0xec,
  0x3b, 0xca, 0x3c, 0x68, 0xfb, 0xac, 0xe6, 0xed, 0x8f, 0xce, 0x7f, 0xbf, 0xa4, 0x4a, 0xce, 0x6b,
  0x25, 0x52, 0xeb, 0x30, 0xdf, 0x73, 0xb4, 0xc2, 0x81, 0xf9, 0x0b, 0xfe, 0x12, 0xf6, 0x65, 0xc0,
  0x99, 0xa9, 0x75, 0x8b, 0xe8, 0x6b, 0x1e, 0x0b, 0xd2, 0x3f, 0x75, 0x73, 0x63, 0x7e, 0x35, 0xdc,
  0xc9, 0xa1, 0x2a, 0x3a, 0xc8, 0xe5, 0x58, 0x9f, 0x5f, 0xfc, 0x4f, 0x98, 0x4b, 0x9d, 0xff, 0xb2,
  0xc9, 0xe5, 0x45, 0xa4, 0xf3, 0x03, 0x67, 0x7d, 0xfa, 0xf8, 0x7b, 0xd5, 0x0e, 0x8f, 0xa2, 0x53,
  0x8e, 0x07, 0x26, 0x4c, 0x25, 0xb8, 0x91, 0xf0, 0xca, 0x40, 0xfa, 0x57, 0x9b, 0x46, 0x1f, 0x7c,
  0x85, 0x39, 0xb5, 0x99, 0xca, 0xa4, 0x0c, 0x24, 0x39, 0x0d, 0x63, 0x46, 0xf5, 0xe2, 0x5c, 0x10,
  0xd3, 0xbc, 0xa1, 0x03, 0xbe, 0xac, 0x43, 0x5b, 0xee, 0x40, 0xbf, 0x45, 0xca, 0x5b, 0xbe, 0x20,
  0x77, 0xb9, 0x7f, 0x3f, 0x8a, 0x30, 0x82, 0x01, 0x02, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  0x0d, 0x01, 0x07, 0x01, 0xa0, 0x81, 0xf4, 0x04, 0x81, 0xf1, 0x30, 0x81, 0xee, 0x30, 0x81, 0xeb,
  0x06, 0x0b, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x0a, 0x01, 0x02, 0xa0, 0x81, 0xb4,
  0x30, 0x81, 0xb1, 0x30, 0x1c, 0x06, 0x0a, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x0c, 0x01,
  0x03, 0x30, 0x0e, 0x04, 0x08, 0x2a, 0xb6, 0x2c, 0x63, 0x26, 0xad, 0xdb, 0x85, 0x02, 0x02, 0x08,
  0x00, 0x04, 0x81, 0x90, 0xb8, 0x7f, 0x9b, 0xaa, 0x07, 0xff, 0x57, 0xe6, 0xea, 0x25, 0xd9, 0x2e,
  0x28, 0x54, 0xdd, 0xc1, 0x23, 0x32, 0x4b, 0xda, 0x85, 0xfb, 0x2a, 0xd9, 0xe4, 0xc0, 0x98, 0x02,
  0x5a, 0x04, 0x7c, 0x47, 0xde, 0xf8, 0x8a, 0xde, 0x03, 0xac, 0x77, 0x42, 0x95, 0xdf, 0xfc, 0xcf,
  0x3a, 0xc4, 0xf3, 0xbc, 0x63, 0x7e, 0x1b, 0xb7, 0xee, 0x45, 0xda, 0x58, 0x29, 0x67, 0x3c, 0xcf,
  0xde, 0x66, 0x41, 0xce, 0x37, 0x58, 0x64, 0xdc, 0x01, 0x6c, 0xee, 0xca, 0x96, 0x13, 0x80, 0x61,
  0xa6, 0xe5, 0x1b, 0xdc, 0x16, 0xcc, 0x65, 0x4e, 0x1b, 0x2d, 0x4e, 0xd0, 0x5a, 0x9d, 0x87, 0xa4,
  0x1f, 0x9d, 0x20, 0x34, 0xe6, 0xfd, 0xf1, 0xe2, 0x13, 0xb8, 0x27, 0x56, 0x25, 0x40, 0xb9, 0x4f,
  0x9d, 0x65, 0xe5, 0xca, 0xeb, 0x67, 0xba, 0x59, 0xa5, 0x88, 0x73, 0x83, 0x70, 0xd8, 0xfa, 0xf1,
  0x9d, 0x46, 0x30, 0x6a, 0x57, 0x6b, 0x9c, 0xef, 0x9f, 0xcd, 0x72, 0x4f, 0x74, 0xa9, 0x76, 0x43,
  0xee, 0x07, 0x40, 0x38, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
  0x01, 0x09, 0x15, 0x31, 0x16, 0x04, 0x14, 0x1f, 0x76, 0x37, 0x30, 0x3a, 0xfc, 0xac, 0xf2, 0x00,
  0xc5, 0x48, 0x8c, 0xab, 0xaa, 0x55, 0x28, 0x1d, 0xf1, 0x40, 0x12, 0x30, 0x31, 0x30, 0x21, 0x30,
  0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14, 0x44, 0x6e, 0xbe, 0x14,
  0x6e, 0x93, 0x4d, 0xf6, 0x28, 0x4f, 0xb2, 0xc0, 0x5a, 0x51, 0x2b, 0x02, 0x53, 0xfb, 0x5c, 0xc3,
  0x04, 0x08, 0xcd, 0x17, 0xf0, 0x58, 0x6d, 0x8b, 0x4c, 0x49, 0x02, 0x02, 0x08, 0x00
]).buffer;

let priSM2CredData = buffer.from([
  0x30, 0x82, 0x04, 0x29, 0x02, 0x01, 0x03, 0x30, 0x82, 0x03, 0xEF, 0x06, 0x09, 0x2A, 0x86, 0x48,
  0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x03, 0xE0, 0x04, 0x82, 0x03, 0xDC, 0x30, 0x82,
  0x03, 0xD8, 0x30, 0x82, 0x03, 0xD4, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07,
  0x01, 0xA0, 0x82, 0x03, 0xC5, 0x04, 0x82, 0x03, 0xC1, 0x30, 0x82, 0x03, 0xBD, 0x30, 0x82, 0x02,
  0xF3, 0x06, 0x0B, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x0C, 0x0A, 0x01, 0x03, 0xA0, 0x82,
  0x02, 0x98, 0x30, 0x82, 0x02, 0x94, 0x06, 0x0A, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09,
  0x16, 0x01, 0xA0, 0x82, 0x02, 0x84, 0x04, 0x82, 0x02, 0x80, 0x30, 0x82, 0x02, 0x7C, 0x30, 0x82,
  0x02, 0x20, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x01, 0x93, 0x90, 0x84, 0x67, 0x30, 0x30,
  0x0C, 0x06, 0x08, 0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x75, 0x05, 0x00, 0x30, 0x4B, 0x31,
  0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x0E, 0x30, 0x0C,
  0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x05, 0x47, 0x4D, 0x53, 0x53, 0x4C, 0x31, 0x10, 0x30, 0x0E,
  0x06, 0x03, 0x55, 0x04, 0x0B, 0x13, 0x07, 0x50, 0x4B, 0x49, 0x2F, 0x53, 0x4D, 0x32, 0x31, 0x1A,
  0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x11, 0x4D, 0x69, 0x64, 0x64, 0x6C, 0x65, 0x43,
  0x41, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x54, 0x65, 0x73, 0x74, 0x30, 0x22, 0x18, 0x0F, 0x32, 0x30,
  0x32, 0x34, 0x31, 0x32, 0x30, 0x33, 0x31, 0x36, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x18, 0x0F, 0x32,
  0x30, 0x32, 0x37, 0x31, 0x32, 0x30, 0x33, 0x31, 0x36, 0x30, 0x30, 0x30, 0x30, 0x5A, 0x30, 0x81,
  0x92, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x43, 0x4E, 0x31, 0x11,
  0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x69, 0x74,
  0x79, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x0B, 0x54, 0x65, 0x73, 0x74,
  0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x11, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x04, 0x0A,
  0x13, 0x08, 0x54, 0x65, 0x73, 0x74, 0x55, 0x6E, 0x69, 0x74, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03,
  0x55, 0x04, 0x0B, 0x13, 0x07, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x31, 0x14, 0x30, 0x12,
  0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0B, 0x54, 0x65, 0x73, 0x74, 0x53, 0x4D, 0x32, 0x43, 0x65,
  0x72, 0x74, 0x31, 0x1F, 0x30, 0x1D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09,
  0x01, 0x16, 0x10, 0x74, 0x65, 0x73, 0x74, 0x73, 0x6D, 0x32, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2E,
  0x63, 0x6F, 0x6D, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01,
  0x06, 0x08, 0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x82, 0x2D, 0x03, 0x42, 0x00, 0x04, 0xC9, 0xC1,
  0x92, 0xB2, 0x7A, 0xA9, 0x7A, 0x88, 0xCD, 0x9F, 0x4B, 0x54, 0xDD, 0x4F, 0x6E, 0xFF, 0xD7, 0x36,
  0x47, 0x51, 0x93, 0x8F, 0xC9, 0x7B, 0x67, 0x9E, 0x7B, 0x6A, 0xCA, 0x97, 0xB5, 0x92, 0xB9, 0xF4,
  0x4F, 0x8C, 0xF1, 0x8F, 0x3D, 0x45, 0xCE, 0x7F, 0x57, 0x3D, 0xF4, 0x80, 0x78, 0xAF, 0x01, 0x7E,
  0xEB, 0x17, 0x34, 0x50, 0x67, 0x09, 0x5C, 0x88, 0x33, 0x37, 0x5A, 0x7A, 0x44, 0x40, 0xA3, 0x81,
  0xA1, 0x30, 0x81, 0x9E, 0x30, 0x1B, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x14, 0x30, 0x12, 0x80,
  0x10, 0xF9, 0x7F, 0x55, 0xB4, 0x27, 0x94, 0x33, 0x62, 0xA6, 0x56, 0xCA, 0x6F, 0xCC, 0x5D, 0x1A,
  0xFF, 0x30, 0x19, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x12, 0x04, 0x10, 0xE6, 0x22, 0x10, 0xB0,
  0xB4, 0x41, 0x0A, 0xE2, 0xC9, 0xD8, 0x4A, 0xCC, 0xAD, 0x1A, 0x90, 0x88, 0x30, 0x16, 0x06, 0x03,
  0x55, 0x1D, 0x11, 0x04, 0x0F, 0x30, 0x0D, 0x82, 0x0B, 0x54, 0x65, 0x73, 0x74, 0x53, 0x4D, 0x32,
  0x43, 0x65, 0x72, 0x74, 0x30, 0x31, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01,
  0x04, 0x25, 0x30, 0x23, 0x30, 0x21, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01,
  0x86, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73, 0x70, 0x2E, 0x67,
  0x6D, 0x73, 0x73, 0x6C, 0x2E, 0x63, 0x6E, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x04, 0x02,
  0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02,
  0x00, 0xC0, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x81, 0x1C, 0xCF, 0x55, 0x01, 0x83, 0x75, 0x05, 0x00,
  0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xEC, 0x68, 0x6A, 0xF8, 0xEE, 0x7A, 0x85, 0xFE,
  0xA3, 0xA9, 0xCE, 0xBC, 0x3E, 0xDD, 0x9E, 0x1F, 0x7C, 0x67, 0x90, 0xD3, 0x1B, 0x44, 0x13, 0xC7,
  0xC8, 0x9A, 0x8B, 0xD0, 0x9B, 0x72, 0x87, 0xDA, 0x02, 0x20, 0x47, 0x34, 0x85, 0x87, 0x6E, 0x38,
  0xF9, 0x6D, 0xFC, 0x67, 0x40, 0x25, 0x78, 0x5D, 0x30, 0x53, 0xE9, 0x70, 0xD7, 0x40, 0x42, 0x23,
  0x2D, 0xE3, 0xB4, 0x8B, 0xEA, 0xD3, 0x75, 0x0A, 0x4B, 0x01, 0x31, 0x48, 0x30, 0x15, 0x06, 0x09,
  0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x14, 0x31, 0x08, 0x1E, 0x06, 0x00, 0x45, 0x00,
  0x6E, 0x00, 0x64, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x15,
  0x31, 0x22, 0x04, 0x20, 0x38, 0x37, 0x35, 0x35, 0x37, 0x66, 0x31, 0x31, 0x35, 0x37, 0x35, 0x63,
  0x30, 0x61, 0x64, 0x37, 0x38, 0x65, 0x34, 0x65, 0x32, 0x38, 0x61, 0x62, 0x65, 0x64, 0x63, 0x31,
  0x33, 0x62, 0x36, 0x65, 0x30, 0x81, 0xC3, 0x06, 0x0B, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
  0x0C, 0x0A, 0x01, 0x02, 0xA0, 0x6A, 0x30, 0x68, 0x30, 0x1C, 0x06, 0x0A, 0x2A, 0x86, 0x48, 0x86,
  0xF7, 0x0D, 0x01, 0x0C, 0x01, 0x06, 0x30, 0x0E, 0x04, 0x08, 0x69, 0xF0, 0x3E, 0x1D, 0xAB, 0x11,
  0x1E, 0x9D, 0x02, 0x02, 0x04, 0x00, 0x04, 0x48, 0xA2, 0xD9, 0x4C, 0x2A, 0x6C, 0x2A, 0x3F, 0x97,
  0x7A, 0xCB, 0x0B, 0xDF, 0x37, 0x02, 0x61, 0x0C, 0xBD, 0xBF, 0x14, 0xFF, 0xEA, 0x42, 0x11, 0xF0,
  0xC2, 0xC8, 0x24, 0x67, 0x84, 0xB9, 0xA6, 0x39, 0xA3, 0xF2, 0x3B, 0x92, 0x8C, 0x66, 0x1F, 0x65,
  0x8E, 0x84, 0xF3, 0xC1, 0x70, 0xFC, 0x20, 0xBD, 0x5D, 0x1F, 0x12, 0x65, 0x57, 0x87, 0x16, 0x40,
  0x95, 0xF3, 0x5C, 0x22, 0xC4, 0x80, 0x3B, 0x85, 0xF7, 0x04, 0x69, 0xAA, 0x95, 0xCC, 0xF9, 0xB7,
  0x31, 0x48, 0x30, 0x15, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x14, 0x31,
  0x08, 0x1E, 0x06, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x30, 0x2F, 0x06, 0x09, 0x2A, 0x86, 0x48,
  0x86, 0xF7, 0x0D, 0x01, 0x09, 0x15, 0x31, 0x22, 0x04, 0x20, 0x38, 0x37, 0x35, 0x35, 0x37, 0x66,
  0x31, 0x31, 0x35, 0x37, 0x35, 0x63, 0x30, 0x61, 0x64, 0x37, 0x38, 0x65, 0x34, 0x65, 0x32, 0x38,
  0x61, 0x62, 0x65, 0x64, 0x63, 0x31, 0x33, 0x62, 0x36, 0x65, 0x30, 0x31, 0x30, 0x21, 0x30, 0x09,
  0x06, 0x05, 0x2B, 0x0E, 0x03, 0x02, 0x1A, 0x05, 0x00, 0x04, 0x14, 0x05, 0x2D, 0xD5, 0xF0, 0x7C,
  0x44, 0xA5, 0x50, 0xFE, 0xB4, 0x09, 0x57, 0x90, 0x3F, 0x5C, 0x63, 0x59, 0x8E, 0x45, 0xA0, 0x04,
  0x08, 0x28, 0x3F, 0xCA, 0xD3, 0x99, 0xB2, 0xFE, 0x5C, 0x02, 0x02, 0x04, 0x00
]).buffer;

export default function api16CertFuncTestUnit() {
  describe('api16CertFuncTestUnit', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })

    /**
     * @tc.number Security_CertManager_InstallPrivateCertificate_Func_0010
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level1
     */
    it('Security_CertManager_InstallPrivateCertificate_Func_0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('Security_CertManager_InstallPrivateCertificate_Func_0010 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let level = certManager.AuthStorageLevel.EL1;

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level);
        console.info('Security_CertManager_InstallPrivateCertificate_Func_0010 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_InstallPrivateCertificate_Func_0010: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await certManager.uninstallPrivateCertificate(keyUri);
      } else {
        console.error("Security_CertManager_InstallPrivateCertificate_Func_0010 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_InstallPrivateCertificate_Func_0010: success.");
      done();
    });

    /**
     * @tc.number Security_CertManager_InstallPrivateCertificate_Func_0011
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level1
     */
    it('Security_CertManager_InstallPrivateCertificate_Func_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('Security_CertManager_InstallPrivateCertificate_Func_0011 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let level = certManager.AuthStorageLevel.EL2;

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level);
        console.info('Security_CertManager_InstallPrivateCertificate_Func_0011 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_InstallPrivateCertificate_Func_0011: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await certManager.uninstallPrivateCertificate(keyUri);
      } else {
        console.error("Security_CertManager_InstallPrivateCertificate_Func_0011 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_InstallPrivateCertificate_Func_0011: success.");
      done();
    });

    /**
     * @tc.number Security_CertManager_InstallPrivateCertificate_Func_0012
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level1
     */
    it('Security_CertManager_InstallPrivateCertificate_Func_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('Security_CertManager_InstallPrivateCertificate_Func_0012 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let level = certManager.AuthStorageLevel.EL4;

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level);
        console.info('Security_CertManager_InstallPrivateCertificate_Func_0012 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_InstallPrivateCertificate_Func_0012: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await certManager.uninstallPrivateCertificate(keyUri);
      } else {
        console.error("Security_CertManager_InstallPrivateCertificate_Func_0012 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_InstallPrivateCertificate_Func_0012: success.");
      done();
    });

    /**
     * @tc.number Security_CertManager_InstallPrivateCertificate_Func_0013
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level2
     */
    it('Security_CertManager_InstallPrivateCertificate_Func_0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('Security_CertManager_InstallPrivateCertificate_Func_0013 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let level = 666;

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level);
      } catch (e) {
        console.log("Security_CertManager_InstallPrivateCertificate_Func_0013: e.code " + e.code);
        expect(e.code).assertEqual(401);
      }
      console.log("Security_CertManager_InstallPrivateCertificate_Func_0013: success.");
      done();
    });

    /**
     * @tc.number Security_CertManager_InstallPrivateCertificate_Func_0014
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level3
     */
    it('Security_CertManager_InstallPrivateCertificate_Func_0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      console.info('Security_CertManager_InstallPrivateCertificate_Func_0014 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let level = certManager.AuthStorageLevel.EL1;
      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level);
        console.info('Security_CertManager_InstallPrivateCertificate_Func_0014 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_InstallPrivateCertificate_Func_0014: e.code " + e.code);
      }

      const promise = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias, level)
      Promise.allSettled([promise, promise, promise, promise, promise, promise, promise, promise, promise, promise]).then(results => {
        console.log('Security_CertManager_InstallPrivateCertificate_Func_0014 results is ' + results);
        results.forEach(result =>{
          console.log('Security_CertManager_InstallPrivateCertificate_Func_0014 result.status is ' + result.status);
          if (result.status === 'fulfilled') {
            console.log('Security_CertManager_InstallPrivateCertificate_Func_0014 result.value is ' + result.value.uri);
          } else {
            console.log('Security_CertManager_InstallPrivateCertificate_Func_0014 result.reason is ' + result.reason);
            expect(null).assertFail();
          }
        })
      })

      if (keyUri != undefined) {
        await certManager.uninstallPrivateCertificate(keyUri);
      } else {
        console.error("Security_CertManager_InstallPrivateCertificate_Func_0014 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_InstallPrivateCertificate_Func_0014: success.");
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0010
     * @tc.name certType is a system preset, while cerScope is a device public
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0010: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
        certScope: certManager.CertScope.GLOBAL_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0010: userCACurrentPath " + userCACurrentPath);
        expect(userCACurrentPath).assertEqual('/etc/security/certificates');
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0010: e.code " + err.code);
        expect(null).assertFail();
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0011
     * @tc.name certType is 2 and cerScope is the current user
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0011: started ");
      let property: certManager.CertStoreProperty = {
        certType: 2,
        certScope: certManager.CertScope.CURRENT_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0011: userCACurrentPath " + userCACurrentPath);
        expect(null).assertFail();
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0011: e.code " + err.code);
        expect(err.code).assertEqual(401);
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0012
     * @tc.name certType is preset by the system, while cerScope is set for the current user
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0012: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
        certScope: certManager.CertScope.CURRENT_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0012: userCACurrentPath " + userCACurrentPath);
        expect(userCACurrentPath).assertEqual('/etc/security/certificates');
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0012: e.code " + err.code);
        expect(null).assertFail();
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0013
     * @tc.name certType is set to the system with a preset cerScope of 3
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0013: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
        certScope: 3,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0013: userCACurrentPath " + userCACurrentPath);
        expect(null).assertFail();
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0013: e.code " + err.code);
        expect(err.code).assertEqual(401);
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0014
     * @tc.name certType is the system preset cerScope is null
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0014: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0014: userCACurrentPath " + userCACurrentPath);
        expect(userCACurrentPath).assertEqual('/etc/security/certificates');
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0014: e.code " + err.code);
        expect(null).assertFail();
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0015
     * @tc.name certType is CA certificate, cerScope is device public
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0015: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_USER,
        certScope: certManager.CertScope.GLOBAL_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0015: userCACurrentPath " + userCACurrentPath);
        expect(userCACurrentPath).assertEqual('/data/certificates/user_cacerts/0');
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0015: e.code " + err.code);
        expect(null).assertFail();
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0016
     * @tc.name certType is CA certificate, cerScope is the current user
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0016', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0016: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_USER,
        certScope: certManager.CertScope.CURRENT_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0016: userCACurrentPath " + userCACurrentPath);
        expect(userCACurrentPath).assertEqual('/data/certificates/user_cacerts/100');
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0016: e.code " + err.code);
        expect(null).assertFail();
      }
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetCertificateStorePath_Func_0018
     * @tc.name certType is set to the system with a preset cerScope of 3
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetCertificateStorePath_Func_0018', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0013: started ");
      let property: certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_USER,
      }
      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0018: userCACurrentPath " + userCACurrentPath);
        expect(null).assertFail();
      } catch (err) {
        console.log("SUB_Security_CertManager_GetCertificateStorePath_Func_0018: e.code " + err.code);
        expect(err.code).assertEqual(401);
      }
      done();
    });

    /**
     * @tc.number Security_CertManager_VerifyPromiseSM3_Func_0010
     * @tc.name Test installPrivateCertificate
     * @tc.desc normal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level1
     */
    it('Security_CertManager_VerifyPromiseSM3_Func_0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('Security_CertManager_VerifyPromiseSM3_Func_0010 start');
      let keyUri: string | undefined;
      let pwd = '12345678';
      let alias = 'appCertAliasDemoSM2';
      let credData: Uint8Array = new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06 ]);
      let signspec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_SIGN,
        digest: certManager.CmKeyDigest.CM_DIGEST_SM3,
      }

      let verifySpec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_VERIFY,
        digest: certManager.CmKeyDigest.CM_DIGEST_SM3,
      }

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priSM2CredData), pwd, alias);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0010 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_VerifyPromiseSM3_Func_0010: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await signVerifyPromise.signVerifyNormalProcess(keyUri, credData, signspec, verifySpec).then(result1 => {
          expect(result1.outData == null).assertTrue();
        }).catch((err: BusinessError) => {
          console.error("Security_CertManager_VerifyPromiseSM3_Func_0010 get err: " + err);
          expect(null).assertFail();
        });
        await certManager.uninstallPrivateCertificate(keyUri);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0010 uninstallPrivateCertificate promise success! ')
      } else {
        console.error("Security_CertManager_VerifyPromiseSM3_Func_0010 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_VerifyPromiseSM3_Func_0010: success.");
      done();
    });

    /**
     * @tc.number Security_CertManager_VerifyPromiseSM3_Func_0011
     * @tc.name Test installPrivateCertificate
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level2
     */
    it('Security_CertManager_VerifyPromiseSM3_Func_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('Security_CertManager_VerifyPromiseSM3_Func_0011 start');
      let keyUri: string | undefined;
      let pwd = '12345678';
      let alias = 'appCertAliasDemoSM2';
      let credData: Uint8Array = new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06 ]);
      let signspec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_SIGN,
        digest: certManager.CmKeyDigest.CM_DIGEST_SHA256,
      }

      let verifySpec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_VERIFY,
        digest: certManager.CmKeyDigest.CM_DIGEST_SHA256,
      }

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priSM2CredData), pwd, alias);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0011 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_VerifyPromiseSM3_Func_0011: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await signVerifyPromise.signVerifyNormalProcess(keyUri, credData, signspec, verifySpec).then(result1 => {
          expect(null).assertFail();
        }).catch((err: BusinessError) => {
          console.error("Security_CertManager_VerifyPromiseSM3_Func_0011 get err: " + err);
          console.error("Security_CertManager_VerifyPromiseSM3_Func_0011 get err.code: " + err.code);
          expect(err.code).assertEqual(certManager.CMErrorCode.CM_ERROR_GENERIC);
        });
        await certManager.uninstallPrivateCertificate(keyUri);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0011 uninstallPrivateCertificate promise success! ')
      } else {
        console.error("Security_CertManager_VerifyPromiseSM3_Func_0011 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_VerifyPromiseSM3_Func_0011: success.");
      done();
    });


    /**
     * @tc.number Security_CertManager_VerifyPromiseSM3_Func_0012
     * @tc.name Test installPrivateCertificate
     * @tc.desc abnormal test
     * @tc.size MediumTest
     * @tc.type Function
     * @tc.level Level2
     */
    it('Security_CertManager_VerifyPromiseSM3_Func_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('Security_CertManager_VerifyPromiseSM3_Func_0010 start');
      let keyUri: string | undefined;
      let pwd = '123456';
      let alias = 'appCertAliasDemoEcc';
      let credData: Uint8Array = new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06 ]);
      let signspec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_SIGN,
        digest: certManager.CmKeyDigest.CM_DIGEST_SM3,
      }

      let verifySpec: certManager.CMSignatureSpec = {
        purpose: certManager.CmKeyPurpose.CM_KEY_PURPOSE_VERIFY,
        digest: certManager.CmKeyDigest.CM_DIGEST_SM3,
      }

      try {
        let result: certManager.CMResult = await certManager.installPrivateCertificate(new Uint8Array(priEccCredData), pwd, alias);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0012 installPrivateCertificate promise success! uri:' + JSON.stringify(result.uri))
        keyUri = result.uri;
      } catch (e) {
        console.log("Security_CertManager_VerifyPromiseSM3_Func_0012 installPrivateCertificate: e.code " + e.code);
      }

      if (keyUri != undefined) {
        await signVerifyPromise.signVerifyNormalProcess(keyUri, credData, signspec, verifySpec).then(result1 => {
          expect(null).assertFail();
        }).catch((err: BusinessError) => {
          console.error("Security_CertManager_VerifyPromiseSM3_Func_0012 get err: " + err);
          console.error("Security_CertManager_VerifyPromiseSM3_Func_0012 get err.code: " + err.code);
          expect(err.code).assertEqual(certManager.CMErrorCode.CM_ERROR_GENERIC);
        });
        await certManager.uninstallPrivateCertificate(keyUri);
        console.info('Security_CertManager_VerifyPromiseSM3_Func_0012 uninstallPrivateCertificate promise success! ')
      } else {
        console.error("Security_CertManager_VerifyPromiseSM3_Func_0012 keyUri is undefined!");
        expect(null).assertFail();
      }
      console.log("Security_CertManager_VerifyPromiseSM3_Func_0012: success.");
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetAllUserTrustedCertificates_0011
     * @tc.name test getAllUserTrustedCertificates interface parameter is abnormal
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetAllUserTrustedCertificates_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0011 start');
      try {
        await certManager.getAllUserTrustedCertificates(undefined);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }

      try {
        await certManager.getAllUserTrustedCertificates(null);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0011 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetAllUserTrustedCertificates_0012
     * @tc.name test getAllUserTrustedCertificates interface 
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level1
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetAllUserTrustedCertificates_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, async (done: Function) => {
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0012 start');
      try {
        let scope: certManager.CertScope = certManager.CertScope.CURRENT_USER;
        certManager.getAllUserTrustedCertificates(scope).then((cmResult) => {
          expect(cmResult.certList).assertEqual(undefined);
        }).catch((err: BusinessError) => {
          console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0012  err.code: ${err.code}, message: ${err.message}`);
          expect(null).assertFail();
        })
      } catch (error) {
        console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0012 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0012 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_GetAllUserTrustedCertificates_0013
     * @tc.name test getAllUserTrustedCertificates interface
     * @tc.desc normal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_GetAllUserTrustedCertificates_0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0013 start');
      try {
        let scope: certManager.CertScope = certManager.CertScope.GLOBAL_USER;
        certManager.getAllUserTrustedCertificates(scope).then((cmResult) => {
          expect(cmResult.certList).assertEqual(undefined);
        }).catch((err: BusinessError) => {
          console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0013  err.code: ${err.code}, message: ${err.message}`);
          expect(null).assertFail();
        })
      } catch (error) {
        console.error(`SUB_Security_CertManager_GetAllUserTrustedCertificates_0013 error.code: ${error.code}, message: ${error.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_GetAllUserTrustedCertificates_0013 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_InstallUserTrustedCertificates_0011
     * @tc.name test installUserTrustedCertificateSync interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallUserTrustedCertificates_0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0011 start');
      let caCert1 = new Uint8Array();
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, 3);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }

      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert, null);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }

      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(caCert1, certManager.CertScope.CURRENT_USER);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0011 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INVALID_PARAMS);
      }
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0011 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_InstallUserTrustedCertificates_0012
     * @tc.name test installUserTrustedCertificateSync interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_InstallUserTrustedCertificates_0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0012 start');
      let certData: Uint8Array = new Uint8Array([
        0x30, 0x82, 0x0b, 0xc1,
      ]);
      try {
        let result: certManager.CMResult = certManager.installUserTrustedCertificateSync(certData, certManager.CertScope.CURRENT_USER);
        expect(null).assertFail();
      } catch (error) {
        console.error(`SUB_Security_CertManager_InstallUserTrustedCertificates_0012 error.code: ${error.code}, message: ${error.message}`);
        expect(error.code).assertEqual(certManager.CMErrorCode.CM_ERROR_INCORRECT_FORMAT);
      }
      console.info('SUB_Security_CertManager_InstallUserTrustedCertificates_0012 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_getCertificateStorePath_0150
     * @tc.name test getCertificateStorePath interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_getCertificateStorePath_0150', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_getCertificateStorePath_0150 start');
      let property : certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
        certAlg: 299,
      };

      try {
        let smSystemCAPath = certManager.getCertificateStorePath(property);
        console.info(`SUB_Security_CertManager_getCertificateStorePath_0150 get SM system ca path: ${smSystemCAPath}`);
      } catch (err) {
        console.error(`SUB_Security_CertManager_getCertificateStorePath_0150 Failed to get store path. Code: ${err.code}, message: ${err.message}`);
        expect(err.code).assertEqual(401);
      }
      console.info('SUB_Security_CertManager_getCertificateStorePath_0150 end');
      done();
    });

    /**
     * @tc.number SUB_Security_CertManager_getCertificateStorePath_0151
     * @tc.name test getCertificateStorePath interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level2
     * @tc.type Function
     */
    it('SUB_Security_CertManager_getCertificateStorePath_0151', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done: Function) => {
      console.info('SUB_Security_CertManager_getCertificateStorePath_0151 start');
      let property : certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_SYSTEM,
        certAlg: 1,
      };

      try {
        let smSystemCAPath = certManager.getCertificateStorePath(property);
        console.info(`SUB_Security_CertManager_getCertificateStorePath_0151 get SM system ca path: ${smSystemCAPath}`);
        expect(smSystemCAPath).assertEqual('/etc/security/certificates')
      } catch (err) {
        console.error(`SUB_Security_CertManager_getCertificateStorePath_0151 Failed to get store path. Code: ${err.code}, message: ${err.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_getCertificateStorePath_0151 end');
      done();
    });

        /**
     * @tc.number SUB_Security_CertManager_getCertificateStorePath_0154
     * @tc.name test getCertificateStorePath interface
     * @tc.desc abnormal test
     * @tc.size SmallTest
     * @tc.level Level3
     * @tc.type Function
     */
    it('SUB_Security_CertManager_getCertificateStorePath_0154', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL3, async (done: Function) => {
      console.info('SUB_Security_CertManager_getCertificateStorePath_0154 start');
      let property : certManager.CertStoreProperty = {
        certType: certManager.CertType.CA_CERT_USER,
        certScope: certManager.CertScope.CURRENT_USER,
        certAlg: certManager.CertAlgorithm.SM,
      };

      try {
        let userCACurrentPath = certManager.getCertificateStorePath(property);
        console.info(`SUB_Security_CertManager_getCertificateStorePath_0154 getCertificateStorePath Success to get current user's user ca path: ${userCACurrentPath}`);
        expect(userCACurrentPath).assertEqual('/data/certificates/user_cacerts/100');
      } catch (err) {
        console.error(`SUB_Security_CertManager_getCertificateStorePath_0154 Failed to get store path. Code: ${err.code}, message: ${err.message}`);
        expect(null).assertFail();
      }
      console.info('SUB_Security_CertManager_getCertificateStorePath_0154 end');
      done();
    });
  })
}