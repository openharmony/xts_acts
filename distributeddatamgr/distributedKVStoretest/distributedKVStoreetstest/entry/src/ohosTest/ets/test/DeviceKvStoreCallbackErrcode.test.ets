/*
* Copyright (c) 2025 Huawei Device Co., Ltd.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import {describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, TestType, Level, Size} from '@ohos/hypium';
import factory from '@ohos.data.distributedKVStore';
import common from "@ohos.app.ability.common";
import fs from "@ohos.file.fs";


import AbilityDelegatorRegistry from '@ohos.app.ability.abilityDelegatorRegistry';
import { BusinessError } from '@kit.BasicServicesKit';

const delegator = AbilityDelegatorRegistry.getAbilityDelegator();
const context = delegator.getAppContext().getApplicationContext();

const KEY_TEST_STRING_ELEMENT = 'key_test_string_2';
const VALUE_TEST_STRING_ELEMENT = 'value-string-002';

const TEST_BUNDLE_NAME = 'ohos.acts.distributedKvStore';
const TEST_STORE_ID = 'dstoreId';
let kvManager: factory.KVManager ;
let kvStore : factory.DeviceKVStore;
let localDeviceId = '';
const USED_DEVICE_IDS =  ['A12C1F9261528B21F95778D2FDC0B2E33943E6251AC5487F4473D005758905DB'];
const UNUSED_DEVICE_IDS =  [];  /* add you test device-ids here */
let syncDeviceIds = USED_DEVICE_IDS.concat(UNUSED_DEVICE_IDS);

let keyPrefix = null;

function sleep(ms:number) {
  return new Promise<ESObject>(resolve => setTimeout(resolve, ms));
}

const TAG = "[DeviceKv_Ets_TEST >>>>>> ]"

// 创建数据库损坏
const dbName = "gen_natural_store.db";
const dbPath = context.databaseDir+"/kvdb/d9a2756029fbcf2ce92cb649edeb3ad75be45ac1905b681a7127400be783ddd9/single_ver/main/" + dbName;
const dbPathWal = dbPath + "-wal";
const dbPathShm = dbPath + "-shm";

async function CreateCorruptDb() {
  try {
    let fileExist = fs.accessSync(dbPath);
    console.info(TAG + 'CreateCorruptDb begin ... ');
    console.info(TAG + 'fileExist=' + fileExist);
    expect(fileExist).assertTrue();
    fs.truncateSync(dbPathWal, 4);
    fs.truncateSync(dbPathShm, 4);
    let file = fs.openSync(dbPath, fs.OpenMode.READ_WRITE);
    fs.truncateSync(file.fd, 4);
    fs.fsyncSync(file.fd);
    fs.closeSync(file);
    console.info(TAG + "CreateCorruptDb succeed");
  }catch (err) {
    console.error(TAG + "CreateCorruptDb failed, errCode:" + err.code + "errMessage" + err.message);
    expect().assertFail();
  }
  console.info(TAG + "quit creat corrupt store");
};

let entries: factory.Entry [] = [];
let resultSet: factory.KVStoreResultSet;

export default function deviceKvStoreCallbackErrcodeTest(){
  describe('deviceKvStoreCallbackErrcodeTest', () => {
    const options: factory.Options = {
      createIfMissing: true,
      encrypt: false,
      backup: false,
      autoSync: true,
      kvStoreType: factory.KVStoreType.DEVICE_COLLABORATION,

      securityLevel: factory.SecurityLevel.S2,
    };
    beforeAll(async (done:Function) => {
      console.info(TAG + 'beforeAll context.databaseDir=' + context.databaseDir);

      for (let i = 0; i < 10; i++) {
        let key = 'batch_test_string_key';
        let entry : factory.Entry = {
          key : key + i,
          value : {
            type : factory.ValueType.STRING,
            value : 'batch_test_string_value'
          }
        }
        entries.push(entry);
      }

      const config : factory.KVManagerConfig = {
        bundleName: TEST_BUNDLE_NAME,
        context: context
      };
      console.info(TAG + 'beforeAll config:' + JSON.stringify(config));
      kvManager = factory.createKVManager(config);
      await kvManager!.getKVStore(TEST_STORE_ID, options).then((store: factory.DeviceKVStore) => {
        kvStore = store;
        console.info(TAG + 'beforeAll getKVStore for getDeviceId success');
      }).catch((err: BusinessError) => {
        console.error(TAG + 'beforeAll getKVStore err ' + `, error code is ${err.code}, message is ${err.message}`);
      });
      let getDeviceId = new Promise<string>((resolve, reject) => {
        kvStore.on('dataChange', 0, (data) => {
          console.info(TAG + 'beforeAll on data change: ' + JSON.stringify(data));
          resolve(data.deviceId);
        });
        kvStore.put("getDeviceId", "byPut").then((data) => {
          console.info(TAG + 'beforeAll put success');
          expect(data == undefined).assertTrue();
        });
        setTimeout(() => {
          reject(new Error('not resolved in 2 second, reject it.'));
        }, 2000);
      });
      await getDeviceId.then((deviceId) => {
        console.info(TAG + 'beforeAll getDeviceId ' + JSON.stringify(deviceId));
        localDeviceId = deviceId;
      }).catch((error: BusinessError) => {
        console.error(TAG + 'beforeAll can NOT getDeviceId, fail: ' +
          `, error code is ${error.code}, message is ${error.message}`);
        expect(null).assertFail();
      });
      await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
      await kvManager.deleteKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
      console.info(TAG + 'beforeAll end');
      done();
    });
    afterAll(async (done:Function) => {
      console.info(TAG + 'afterAll');
      done();
    });


    beforeEach(async (done:Function) =>  {
      console.info(TAG + 'beforeEach' + JSON.stringify(options));
      await kvManager!.getKVStore(TEST_STORE_ID, options).then((store: factory.DeviceKVStore) => {
        kvStore = store;
        console.info(TAG + 'beforeEach getKVStore for DeviceId success');
      }).catch((err: BusinessError) => {
        console.error(TAG + 'beforeEach getKVStore err ' + `, error code is ${err.code}, message is ${err.message}`);
      });

      await kvStore.put(KEY_TEST_STRING_ELEMENT, VALUE_TEST_STRING_ELEMENT).then((data) => {
        expect(data == undefined).assertTrue();
        console.info(TAG + 'beforeEach put success');
      }).catch((err: BusinessError) => {
        console.error(TAG + 'beforeEach put err ' + `, error code is ${err.code}, message is ${err.message}`);
      });

      console.info(TAG + 'beforeEach entries: ' + JSON.stringify(entries));
      await kvStore.putBatch(entries, async () => {
        console.info(TAG + 'beforeEach putBatch success');
        done();
      });

    });
    afterEach(async (done:Function) =>  {
      console.info(TAG + 'afterEach');
      await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID, async (err, data) => {
        console.info(TAG + 'afterEach closeKVStore success');
        await kvManager.deleteKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID, (err, data) => {
          console.info(TAG + 'afterEach deleteKVStore success');
          done();
        });
      });

    });

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_Get_Did_ErrCode_0001
     * @tc.desc get(deviceId: string, key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(Deviceid) ErrCode 0
     */
    it('SUB_DDM_DKV_Get_Did_ErrCode_0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_Did_ErrCode_0001');
      try {
        await kvStore.get(localDeviceId, KEY_TEST_STRING_ELEMENT, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_Get_Did_ErrCode_0100
     * @tc.desc get(deviceId: string, key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(Deviceid) ErrCode 401
     */
    it('SUB_DDM_DKV_Get_Did_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_Did_ErrCode_0100');
      try {
        await kvStore.get(localDeviceId, keyPrefix, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail');
            expect(null).assertFail();
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_Get_Did_ErrCode_0200
     * @tc.desc get(deviceId: string, key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(Deviceid) ErrCode 15100003
     */
    it('SUB_DDM_DKV_Get_Did_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_Did_ErrCode_0200');
      try {
        //数据库损坏
        await CreateCorruptDb();
        await kvStore.get(localDeviceId, KEY_TEST_STRING_ELEMENT, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
            done();
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_Get_Did_ErrCode_0300
     * @tc.desc
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(Deviceid) ErrCode 15100004
     */
    it('SUB_DDM_DKV_Get_Did_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_Did_ErrCode_0300');
      try {
        await kvStore.get(localDeviceId, 'keyno', (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100004).assertEqual(err.code);
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_Get_Did_ErrCode_0400
     * @tc.desc
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(Deviceid) ErrCode 15100005
     */
    it('SUB_DDM_DKV_Get_Did_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_Did_ErrCode_0400');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.get(localDeviceId, KEY_TEST_STRING_ELEMENT, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GET_ErrCode_0100
     * @tc.desc get(key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get(key) ErrCode 401
     */
    it('SUB_DDM_DKV_Get_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_ErrCode_0100');
      try {
        await kvStore.get(keyPrefix, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail');
            expect(null).assertFail();
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GET_ErrCode_0200
     * @tc.desc get(key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get ErrCode 15100003
     */
    it('SUB_DDM_DKV_Get_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_ErrCode_0200');
      try {
        //数据库损坏
        await CreateCorruptDb();
        await kvStore.get(KEY_TEST_STRING_ELEMENT, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GET_ErrCode_0300
     * @tc.desc get(key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get ErrCode 15100004
     */
    it('SUB_DDM_DKV_Get_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_ErrCode_0300');
      try {
        await kvStore.get('keyno', (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100004).assertEqual(err.code);
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GET_ErrCode_0400
     * @tc.desc get(key: string, callback: AsyncCallback<boolean | string | number | Uint8Array>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.Get ErrCode 15100005
     */
    it('SUB_DDM_DKV_Get_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_Get_ErrCode_0400');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.get(KEY_TEST_STRING_ELEMENT, (err) => {
          if (err == undefined) {
            console.info(TAG + ' get success');
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
          }
          done();
        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Key_ErrCode_0001
     * @tc.desc Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 0
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 0
     */
    it('SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0001 000 ');
      try {
        await kvStore.getEntries(localDeviceId, 'batch_test_string_key', (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            console.info(TAG + ' entrys.length: ' + entrys.length);
            console.info(TAG + ' entrys[0]: ' + JSON.stringify(entrys[0]));
            expect(entrys.length == 10).assertTrue();
            expect(entrys[0].value.value == 'batch_test_string_value').assertTrue();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Key_ErrCode_0100
     * @tc.desc getEntries(deviceId: string, keyPrefix: string, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 401
     */
    it('SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0100 ');
      try {
        await kvStore.getEntries(localDeviceId, keyPrefix, (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Key_ErrCode_0200
     * @tc.desc Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100003
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100003
     */
    it('SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0200 ');
      try {
        await CreateCorruptDb();
        await kvStore.getEntries(localDeviceId, 'batch_test_string_key', (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Key_ErrCode_0300
     * @tc.desc Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100005
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Key_ErrCode_0300 ');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getEntries(localDeviceId, 'batch_test_string_key', (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


      /**
       * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Key_ErrCode_0100
       * @tc.desc Test Js Api DeviceKvStore.getEntries() ErrCode 401
       * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
       * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 401
       */
    it('SUB_DDM_DKV_GetEntries_Key_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Key_ErrCode_0100 ');
      try {
        await kvStore.getEntries(keyPrefix, (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Key_ErrCode_0200
     * @tc.desc Test Js Api DeviceKvStore.getEntries() ErrCode 15100003
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 15100003
     */
    it('SUB_DDM_DKV_GetEntries_Key_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Key_ErrCode_0200 ');
      try {
        await CreateCorruptDb();
        await kvStore.getEntries('batch_test_string_key', (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Key_ErrCode_0300
     * @tc.desc Test Js Api DeviceKvStore.getEntries() ErrCode 15100005
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetEntries_Key_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Key_ErrCode_0300 ');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getEntries('batch_test_string_key', (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Query_ErrCode_0001
     * @tc.desc  getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 0
     */
    it('SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0001 000 ');
      try {
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getEntries(localDeviceId, query, (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            console.info(TAG + ' entrys.length: ' + entrys.length);
            console.info(TAG + ' entrys[0]: ' + JSON.stringify(entrys[0]));
            expect(entrys.length == 10).assertTrue();
            expect(entrys[0].value.value == 'batch_test_string_value').assertTrue();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Query_ErrCode_0100
     * @tc.desc  getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 401
     */
    it('SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0100 000 ');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        await kvStore.getEntries(localDeviceId, query, (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Query_ErrCode_0200
     * @tc.desc  getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100003
     */
    it('SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0200');
      try {
        await CreateCorruptDb();
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getEntries(localDeviceId, query, (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Did_Query_ErrCode_0300
     * @tc.desc  getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries(Deviceid) ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Did_Query_ErrCode_0300');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getEntries(localDeviceId, query, (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(entrys.length == 10).assertTrue();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })



    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Query_ErrCode_0100
     * @tc.desc  getEntries(query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 401
     */
    it('SUB_DDM_DKV_GetEntries_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Query_ErrCode_0100 000 ');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        await kvStore.getEntries(query, (err) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Query_ErrCode_0200
     * @tc.desc  getEntries(query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 15100003
     */
    it('SUB_DDM_DKV_GetEntries_Query_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Query_ErrCode_0200');
      try {
        await CreateCorruptDb();
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getEntries(query, (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100003).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetEntries_Query_ErrCode_0300
     * @tc.desc  getEntries(query: Query, callback: AsyncCallback<Entry[]>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getEntries() ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetEntries_Query_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetEntries_Query_ErrCode_0300');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getEntries(query, (err, entrys) => {
          if (err == undefined) {
            console.info(TAG + ' getEntries success');
            expect(entrys.length == 10).assertTrue();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Key_ErrCode_0001
     * @tc.desc getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 0
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0001');
      try {
        await kvStore.getResultSet(localDeviceId, 'batch_test_string_key', async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(resultSet.getCount() == 10).assertTrue();
            await kvStore.closeResultSet(resultSet, (err) => {
              console.info(TAG + ' closeResultSet success');
              expect(err == undefined).assertTrue();
              done();
            })
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Key_ErrCode_0100
     * @tc.desc getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 401
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0100');
      try {
        await kvStore.getResultSet(localDeviceId, keyPrefix, async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Key_ErrCode_0200
     * @tc.desc getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 15100001
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0200');
      try {
        let resultSets: factory.KVStoreResultSet[] = [];
        for (let i=0; i<9; i++) {
          await kvStore.getResultSet(localDeviceId, 'key_test_string_2', async (err, result) => {
            if (err == undefined) {
              console.info(TAG + ' getResultSet success, i=' + i);
              resultSets.push(result);
            } else {
              console.error(TAG + ' get fail' + `,  i is ${i}, error code is ${err.code}, message is ${err.message}`);
              expect(15100001).assertEqual(err.code);
              for (let j=0; j<9; j++) {
                try{
                  await kvStore.closeResultSet(resultSets[j], (err) => {
                    if (err == undefined) {
                      console.info(TAG + ' closeResultSet success, j=' + j);
                    } else {
                      console.error(TAG + ' closeResultSet fail' + `,  j is ${j}, error code is ${err.code}, message is ${err.message}`);
                    }
                  })
                }catch(er){
                  console.error(TAG + 'catch  closeResultSet fail' + `,  j is ${j}, error code is ${er.code}, message is ${er.message}`);
                  done();
                }

              }
            }
          });
        }

      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Key_ErrCode_0400
     * @tc.desc getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Key_ErrCode_0400');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getResultSet(localDeviceId, 'batch_test_string_key', async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


      /**
       * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Key_ErrCode_0100
       * @tc.desc getResultSet(keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
       * @tc.size MEDIUMTEST
       * @tc.type FUNCTION
       * @tc.level LEVEL2
       * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 401
       */
      it('SUB_DDM_DKV_GetResultSet_Key_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
        console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Key_ErrCode_0100');
        try {
          await kvStore.getResultSet(keyPrefix, async (err) => {
            if (err == undefined) {
              console.info(TAG + ' getResultSet success');
              expect(null).assertFail();
              done();
            } else {
              console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
              expect(null).assertFail();
              done();
            }

          });
        } catch (e) {
          console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
          expect(401).assertEqual(e.code);
          done();
        }
      })

      /**
       * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Key_ErrCode_0200
       * @tc.desc getResultSet(keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
       * @tc.size MEDIUMTEST
       * @tc.type FUNCTION
       * @tc.level LEVEL2
       * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 15100001
       */
      it('SUB_DDM_DKV_GetResultSet_Key_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
        console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Key_ErrCode_0200');
        try {
          let resultSets: factory.KVStoreResultSet[] = [];
          for (let i=0; i<9; i++) {
            await kvStore.getResultSet('key_test_string_2', async (err, result) => {
              if (err == undefined) {
                console.info(TAG + ' getResultSet success, i=' + i);
                resultSets.push(result);
              } else {
                console.error(TAG + ' get fail' + `,  i is ${i}, error code is ${err.code}, message is ${err.message}`);
                expect(15100001).assertEqual(err.code);
                for (let j=0; j<9; j++) {
                  try{
                    await kvStore.closeResultSet(resultSets[j], (err) => {
                      if (err == undefined) {
                        console.info(TAG + ' closeResultSet success, j=' + j);
                      } else {
                        console.error(TAG + ' closeResultSet fail' + `,  j is ${j}, error code is ${err.code}, message is ${err.message}`);
                      }
                    })
                  }catch(er){
                    console.error(TAG + 'catch  closeResultSet fail' + `,  j is ${j}, error code is ${er.code}, message is ${er.message}`);
                    done();
                  }

                }
              }
            });
          }

        } catch (e) {
          console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
          expect(null).assertFail();
          done();
        }
      })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Key_ErrCode_0400
     * @tc.desc getResultSet(keyPrefix: string, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetResultSet_Key_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Key_ErrCode_0400');
      try {
        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getResultSet('batch_test_string_key', async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })


    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Query_ErrCode_0001
     * @tc.desc getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 0
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0001');
      try {
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        await kvStore.getResultSet(localDeviceId, query, async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(resultSet.getCount() == 10).assertTrue();
            await kvStore.closeResultSet(resultSet, (err) => {
              console.info(TAG + ' closeResultSet success');
              expect(err == undefined).assertTrue();
              done();
            })
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Query_ErrCode_0100
     * @tc.desc getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 401
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0100');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        await kvStore.getResultSet(localDeviceId, query, async (err) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Query_ErrCode_0200
     * @tc.desc getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 15100001
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
        console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0200');
        try {
          let resultSets: factory.KVStoreResultSet[] = [];
          let query = new factory.Query();
          query.deviceId(localDeviceId);
          query.prefixKey("batch_test");
          for (let i=0; i<9; i++) {
            await kvStore.getResultSet(localDeviceId, query, async (err, result) => {
              if (err == undefined) {
                console.info(TAG + ' getResultSet success, i=' + i);
                resultSets.push(result);
              } else {
                console.error(TAG + ' get fail' + `,  i is ${i}, error code is ${err.code}, message is ${err.message}`);
                expect(15100001).assertEqual(err.code);
                for (let j=0; j<9; j++) {
                  try{
                    await kvStore.closeResultSet(resultSets[j], (err) => {
                      if (err == undefined) {
                        console.info(TAG + ' closeResultSet success, j=' + j);
                      } else {
                        console.error(TAG + ' closeResultSet fail' + `,  j is ${j}, error code is ${err.code}, message is ${err.message}`);
                      }
                    })
                  }catch(er){
                    console.error(TAG + 'catch  closeResultSet fail' + `,  j is ${j}, error code is ${er.code}, message is ${er.message}`);
                    done();
                  }

                }
              }
            });
          }

        } catch (e) {
          console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
          expect(null).assertFail();
          done();
        }
      })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Did_Query_ErrCode_0400
     * @tc.desc getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet(Deviceid) ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Did_Query_ErrCode_0400');
      try {
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");

        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getResultSet(localDeviceId, query, async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

      /**
       * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Query_ErrCode_0100
       * @tc.desc getResultSet(query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
       * @tc.size MEDIUMTEST
       * @tc.type FUNCTION
       * @tc.level LEVEL2
       * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 401
       */
    it('SUB_DDM_DKV_GetResultSet_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Query_ErrCode_0100');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        await kvStore.getResultSet(query, async (err) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            expect(null).assertFail();
            done();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(null).assertFail();
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(401).assertEqual(e.code);
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Query_ErrCode_0200
     * @tc.desc getResultSet(query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 15100001
     */
    it('SUB_DDM_DKV_GetResultSet_Query_ErrCode_0200', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Query_ErrCode_0200');
      try {
        let resultSets: factory.KVStoreResultSet[] = [];
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");
        for (let i=0; i<9; i++) {
          await kvStore.getResultSet(query, async (err, result) => {
            if (err == undefined) {
              console.info(TAG + ' getResultSet success, i=' + i);
              resultSets.push(result);
            } else {
              console.error(TAG + ' get fail' + `,  i is ${i}, error code is ${err.code}, message is ${err.message}`);
              expect(15100001).assertEqual(err.code);
              for (let j=0; j<9; j++) {
                try{
                  await kvStore.closeResultSet(resultSets[j], (err) => {
                    if (err == undefined) {
                      console.info(TAG + ' closeResultSet success, j=' + j);
                    } else {
                      console.error(TAG + ' closeResultSet fail' + `,  j is ${j}, error code is ${err.code}, message is ${err.message}`);
                    }
                  })
                }catch(er){
                  console.error(TAG + 'catch  closeResultSet fail' + `,  j is ${j}, error code is ${er.code}, message is ${er.message}`);
                  done();
                }

              }
            }
          });
        }

      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_GetResultSet_Query_ErrCode_0400
     * @tc.desc getResultSet(query: Query, callback: AsyncCallback<KVStoreResultSet>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSet() ErrCode 15100005
     */
    it('SUB_DDM_DKV_GetResultSet_Query_ErrCode_0400', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_GetResultSet_Query_ErrCode_0400');
      try {
        let query = new factory.Query();
        query.deviceId(localDeviceId);
        query.prefixKey("batch_test");

        await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        await kvStore.getResultSet(query, async (err, result) => {
          if (err == undefined) {
            console.info(TAG + ' getResultSet success');
            resultSet = result;
            expect(null).assertFail();
          } else {
            console.error(TAG + ' get fail' + `, error code is ${err.code}, message is ${err.message}`);
            expect(15100005).assertEqual(err.code);
            done();
          }

        });
      } catch (e) {
        console.error(TAG + ' catch get e' + `, error code is ${e.code}, message is ${e.message}`);
        expect(null).assertFail();
        done();
      }
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_getResultSize_Did_Query_ErrCode_0100
     * @tc.desc getResultSize(deviceId: string, query: Query, callback: AsyncCallback<number>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSize ErrCode 401
     */
    it('SUB_DDM_DKV_getResultSize_Did_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_getResultSize_Did_Query_ErrCode_0100');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        kvStore?.getResultSize(localDeviceId, query, (err: BusinessError) => {
          if (err) {
            console.error(TAG + `Failed to get.code is ${err.code},message is ${err.message}`);
            done();
          }
          console.info(TAG + "Succeeded in getResultSize");
          expect().assertFail();
        });
      } catch (e) {
        let error = e as BusinessError;
        console.error(TAG + `An unexpected error occurred.code is ${error.code},message is ${error.message}`);
        expect(error.code).assertEqual(401);
      }
      done();
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_getResultSize_Did_Query_ErrCode_0300
     * @tc.desc getResultSize(deviceId: string, query: Query, callback: AsyncCallback<number>): void;
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSize ErrCode 15100005
     */
    it('SUB_DDM_DKV_getResultSize_Did_Query_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_getResultSize_Did_Query_ErrCode_0300');
      try {
        await kvManager?.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        console.info(TAG + 'Succeeded in closeKVStore');
        let  query: factory.Query | null = new factory.Query();
        kvStore?.getResultSize(localDeviceId, query, (err: BusinessError) => {
          if (err != undefined) {
            console.error(TAG + `Failed to getResultSize.code is ${err.code},message is ${err.message}`);
            expect(err.code).assertEqual(15100005);
            done();
          }else{
            console.info(TAG + `Succeeded in getResultSize`);
            expect().assertFail();
          }
        });
      } catch (err) {
        console.error(TAG + `Failed to catch is ${err.code},message is ${err.message}`);
        done();
        expect().assertFail();
      }
    })


    /**
       * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_getResultSize_Query_ErrCode_0100
       * @tc.desc getResultSize(query: Query, callback: AsyncCallback<number>): void
       * @tc.size MEDIUMTEST
       * @tc.type FUNCTION
       * @tc.level LEVEL2
       * @tc.name Test Js Api DeviceKvStore.getResultSize ErrCode 401
       */
    it('SUB_DDM_DKV_getResultSize_Query_ErrCode_0100', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_getResultSize_Query_ErrCode_0100');
      try {
        let  query: factory.Query | null = new factory.Query();
        query = null;
        kvStore?.getResultSize(query, (err: BusinessError) => {
          if (err) {
            console.error(TAG + `Failed to get.code is ${err.code},message is ${err.message}`);
            done();
          }
          console.info(TAG + "Succeeded in getResultSize");
          expect().assertFail();
        });
      } catch (e) {
        let error = e as BusinessError;
        console.error(TAG + `An unexpected error occurred.code is ${error.code},message is ${error.message}`);
        expect(error.code).assertEqual(401);
      }
      done();
    })

    /**
     * @tc.number SUB_DistributedData_KVStore_SDK_DeviceKVCallbackEtsApiTest_getResultSize_Query_ErrCode_0300
     * @tc.desc getResultSize(query: Query, callback: AsyncCallback<number>): void
     * @tc.size MEDIUMTEST
     * @tc.type FUNCTION
     * @tc.level LEVEL2
     * @tc.name Test Js Api DeviceKvStore.getResultSize ErrCode 15100005
     */
    it('SUB_DDM_DKV_getResultSize_Query_ErrCode_0300', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL2, async (done:Function) =>  {
      console.info(TAG + 'SUB_DDM_DKV_getResultSize_Query_ErrCode_0300');
      try {
        await kvManager?.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);
        console.info(TAG + 'Succeeded in closeKVStore');
        let query: factory.Query | null = new factory.Query();
        kvStore?.getResultSize(query, (err: BusinessError) => {
          if (err != undefined) {
            console.error(TAG + `Failed to getResultSize.code is ${err.code},message is ${err.message}`);
            expect(err.code).assertEqual(15100005);
            done();
          }else{
            console.info(TAG + `Succeeded in getResultSize`);
            expect().assertFail();
          }
        });
      } catch (err) {
        console.error(TAG + `Failed to catch is ${err.code},message is ${err.message}`);
        done();
        expect().assertFail();
      }
    })










  })
}