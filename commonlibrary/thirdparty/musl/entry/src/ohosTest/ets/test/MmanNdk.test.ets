/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { beforeEach, describe, expect, it } from '@ohos/hypium'
import Utils from './Utils'
import mman from 'libmmanndk.so'

export default function mmanNdkTest() {
  describe('MuslMmanTest', () => {

    beforeEach(async () => {
      await Utils.sleep(50)
    })

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MEMFDCREATE_0100
     * @tc.name       : testMuslMmanmemfdCreate001
     * @tc.desc       : test memfd_create
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 2
     */
    it('testMuslMmanmemfdCreate001', 0, async (done: Function) => {
      let data: number = mman.memfdCreate();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MINCORE_0100
     * @tc.name       : testMuslMmanMinCore001
     * @tc.desc       : test mincore
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 2
     */
    it('testMuslMmanMinCore001', 0, async (done: Function) => {
      let data: number = mman.mincore();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MUNMAP_0100
     * @tc.name       : testMuslMmanMunmap001
     * @tc.desc       : test munmap
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMunmap001', 0, async (done: Function) => {
      let a = 4;
      let data: number = mman.munmap(a);
      console.info("Test NAPI data = \"" + data + "\"");
      expect(data).assertEqual(0);
      done();
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MPROTECT_0100
     * @tc.name       : testMuslMmanMProtect001
     * @tc.desc       : test mprotect
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMProtect001', 0, async (done: Function) => {
      let data: number = mman.mProtect();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MREMAP_0100
     * @tc.name       : testMuslMmanMreMap001
     * @tc.desc       : test mremap
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMreMap001', 0, async (done: Function) => {
      let data: number = mman.mreMap();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MSYNC_0100
     * @tc.name       : testMuslMmanMSync001
     * @tc.desc       : test mremap
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMSync001', 0, async (done: Function) => {
      let data: number = mman.mSync();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MUNLOCK_0100
     * @tc.name       : testMuslMmanMunlock001
     * @tc.desc       : test munlock
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMunlock001', 0, async (done: Function) => {
      let data: number = mman.mUnLock();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MUNLOCKALL_0100
     * @tc.name       : testMuslMmanMunlockAll001
     * @tc.desc       : test munlockall
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMunlockAll001', 0, async (done: Function) => {
      let data: number = mman.mUnLockAll();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_MMAN_MADVISE_0100
     * @tc.name       : testMuslMmanMadvise001
     * @tc.desc       : test madvise
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslMmanMadvise001', 0, async (done: Function) => {
      let data: number = mman.mAdvise();
      console.info("Test NAPI data= " + JSON.stringify(data));
      expect(data).assertEqual(0);
      done()
    });
    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MLOCK_0100
     * @tc.name     : testMuslMmanMLock001
     * @tc.desc     : test mlock
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 1
     */
    it('testMuslMmanMLock001', 0, async (done: Function) => {
      let result: number = mman.mLock(0);
      expect(result).assertEqual(0)
      done()
    });

    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MLOCK_0200
     * @tc.name     : testMuslMmanMLock002
     * @tc.desc     : test mlock
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 2
     */
    it('testMuslMmanMLock002', 0, async (done: Function) => {
      let result: number = mman.mLock(-1);
      expect(result).assertEqual(-1)
      done()
    });

    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MLOCK2_0100
     * @tc.name     : testMuslMmanMLock2001
     * @tc.desc     : test mlock2
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 1
     */
    it('testMuslMmanMLock2001', 0, async (done: Function) => {
      let result: number = mman.mLock2(0);
      expect(result).assertEqual(0)
      done()
    });

    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MLOCK2_0200
     * @tc.name     : testMuslMmanMLock2002
     * @tc.desc     : test mlock2
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 2
     */
    it('testMuslMmanMLock2002', 0, async (done: Function) => {
      let result: number = mman.mLock2(-1);
      expect(result).assertEqual(-1)
      done()
    });

    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MLOCKALL_0100
     * @tc.name     : testMuslMmanMLockAll001
     * @tc.desc     : test mlockall
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 1
     */
    it('testMuslMmanMLockAll001', 0, async (done: Function) => {
      let result: number = mman.mLockAll();
      expect(result).assertEqual(0)
      done()
    });

    /**
     * @tc.number   : SUB_THIRDPARTY_MUSL_MMAN_MMAP64_0100
     * @tc.name     : testMuslMmanMmap64001
     * @tc.desc     : test mmap64
     * @tc.size     : MediumTest
     * @tc.type     : Function
     * @tc.level    : Level 1
     */
    it('testMuslMmanMmap64001', 0, async (done: Function) => {
      let result: number = mman.mmap64();
      expect(result).assertEqual(0)
      done()
    });

  })

}