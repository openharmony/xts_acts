/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { beforeEach, describe, expect, it } from '@ohos/hypium'
import Utils from './Utils'
import dirent from 'libdirent1ndk.so'

export default function dirent1NdkTest() {
  describe('MuslDirent1Test', () => {

    beforeEach(async () => {
      await Utils.sleep(50)
    })

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_TELLDIR_0100
     * @tc.name       : testMuslDirentTelldir001
     * @tc.desc       : telldir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentTelldir001', 0, async (done: Function) => {
      let a: number = dirent.telldir(0);
      expect(a).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_TELLDIR_0200
     * @tc.name       : testMuslDirentTelldir002
     * @tc.desc       : telldir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentTelldir002', 0, async (done: Function) => {
      let a: number = dirent.telldir(-1);
      expect(a).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR_0100
     * @tc.name       : testMuslDirentReaddir001
     * @tc.desc       : test readdir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir001', 0, async (done: Function) => {
      let result: number = dirent.readdir(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR_0200
     * @tc.name       : testMuslDirentReaddir002
     * @tc.desc       : test readdir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir002', 0, async (done: Function) => {
      let result: number = dirent.readdir(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIRR_0100
     * @tc.name       : testMuslDirentReaddirR001
     * @tc.desc       : test readdir_r
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddirR001', 0, async (done: Function) => {
      let result: number = dirent.readdirR(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIRR_0200
     * @tc.name       : testMuslDirentReaddirR002
     * @tc.desc       : test readdir_r
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddirR002', 0, async (done: Function) => {
      let result: number = dirent.readdirR(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR64_0100
     * @tc.name       : testMuslDirentReaddir64001
     * @tc.desc       : test readdir64
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir64001', 0, async (done: Function) => {
      let result: number = dirent.readdir64(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR64_0200
     * @tc.name       : testMuslDirentReaddir64002
     * @tc.desc       : test readdir64
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir64002', 0, async (done: Function) => {
      let result: number = dirent.readdir64(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR64R_0100
     * @tc.name       : testMuslDirentReaddir64R001
     * @tc.desc       : test readdir64_r
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir64R001', 0, async (done: Function) => {
      let result: number = dirent.readdir64R(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_READDIR64R_0200
     * @tc.name       : testMuslDirentReaddir64R002
     * @tc.desc       : test readdir64_r
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentReaddir64R002', 0, async (done: Function) => {
      let result: number = dirent.readdir64R(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_REWINDDIR_0100
     * @tc.name       : testMuslDirentRewinddir001
     * @tc.desc       : test rewinddir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentRewinddir001', 0, async (done: Function) => {
      let result: number = dirent.rewinddir(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_REWINDDIR_0200
     * @tc.name       : testMuslDirentRewinddir002
     * @tc.desc       : test rewinddir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testMuslDirentRewinddir002', 0, async (done: Function) => {
      let result: number = dirent.rewinddir(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_FDOPENDIR_0100
     * @tc.name       : testMuslDirentFdOpenDir001
     * @tc.desc       : test fdopendir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentFdOpenDir001', 0, async (done: Function) => {
      let result: number = dirent.fdopendir(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_FDOPENDIR_0200
     * @tc.name       : testMuslDirentFdOpenDir002
     * @tc.desc       : test fdopendir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentFdOpenDir002', 0, async (done: Function) => {
      let result: number = dirent.fdopendir(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_CLOSEDIR_0100
     * @tc.name       : testMuslDirentCloseDir001
     * @tc.desc       : test closedir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentCloseDir001', 0, async (done: Function) => {
      let result: number = dirent.closedir(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_CLOSEDIR_0200
     * @tc.name       : testMuslDirentCloseDir002
     * @tc.desc       : test closedir
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentCloseDir002', 0, async (done: Function) => {
      let result: number = dirent.closedir(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_DIRFD_0100
     * @tc.name       : testMuslDirentDirFd001
     * @tc.desc       : test dirfd
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentDirFd001', 0, async (done: Function) => {
      let result: number = dirent.dirfd(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_DIRFD_0200
     * @tc.name       : testMuslDirentDirFd002
     * @tc.desc       : test dirfd
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 0
     */
    it('testMuslDirentDirFd002', 0, async (done: Function) => {
      let result: number = dirent.dirfd(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_ALPHASORT_0100
     * @tc.name       : testMuslDirentAlphasort001
     * @tc.desc       : test alphasort
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     * @
     */
    it('testMuslDirentAlphasort001', 0, async (done: Function) => {
      let result: number = dirent.alphasort(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_ALPHASORT_0200
     * @tc.name       : testMuslDirentAlphasort002
     * @tc.desc       : test alphasort
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     * @
     */
    it('testMuslDirentAlphasort002', 0, async (done: Function) => {
      let result: number = dirent.alphasort(-1);
      expect(result).assertEqual(-1);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_ALPHASORT64_0100
     * @tc.name       : testMuslDirentAlphasort64001
     * @tc.desc       : test alphasort64
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     * @
     */
    it('testMuslDirentAlphasort64001', 0, async (done: Function) => {
      let result: number = dirent.alphasort64(0);
      expect(result).assertEqual(0);
      done()
    });

    /**
     * @tc.number     : SUB_THIRDPARTY_MUSL_DIRENT_ALPHASORT64_0200
     * @tc.name       : testMuslDirentAlphasort64002
     * @tc.desc       : test alphasort64
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     * @
     */
    it('testMuslDirentAlphasort64002', 0, async (done: Function) => {
      let result: number = dirent.alphasort64(-1);
      expect(result).assertEqual(-1);
      done()
    });

  })
}
