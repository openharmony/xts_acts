/*
* Copyright (c) 2024 SwanLink (Jiangsu) Technology Development Co., LTD.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium'
import { TreeSet } from '@kit.ArkTS';

export default function TreeSetTest() {
  describe('treeSetTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })


    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0100
     * @tc.name       : testConstructor0001
     * @tc.desc       : Test the function of the interface Constructor.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testConstructor0001', 0, () => {
      const TAG = "testConstructor0001";
      try {
        const treeSet: TreeSet<number> = new TreeSet();
        treeSet.add(65536);
        let length = treeSet.length
        expect(length).assertEqual(1);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0200
     * @tc.name       : testConstructor0002
     * @tc.desc       : Test the function of the interface Constructor.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testConstructor0002', 0, () => {
      const TAG = "testConstructor0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        let length = treeSet.length
        expect(length).assertEqual(3);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0300
     * @tc.name       : testConstructor0003
     * @tc.desc       : Test the function of the interface Constructor.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testConstructor0003', 0, () => {
      const TAG = "testConstructor0003";
      try {
        class TestEntry {
          public id: number = 0;
        }

        let ts1: TreeSet<TestEntry> = new TreeSet<TestEntry>((t1: TestEntry, t2: TestEntry): boolean => {
          return t1.id > t2.id;
        });
        let entry1: TestEntry = {
          id: 0
        };
        let entry2: TestEntry = {
          id: 1
        }
        ts1.add(entry1);
        ts1.add(entry2);
        let length = ts1.length
        expect(length).assertEqual(2);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0400
     * @tc.name       : testConstructor0004
     * @tc.desc       : Test the function of the interface Constructor.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testConstructor0004', 0, () => {
      const TAG = "testConstructor0004";
      try {
        class TestEntry {
          public id: number = 0;
        }

        let ts1: TreeSet<TestEntry> = new TreeSet();
        let entry1: TestEntry = {
          id: 0
        };
        let entry2: TestEntry = {
          id: 1
        }
        ts1.add(entry1);
        ts1.add(entry2);
        let length = ts1.length
        expect(length).assertEqual(1);
        console.log("treeSet: ", ts1.length);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0500
     * @tc.name       : testIsEmpty0001
     * @tc.desc       : Test the function of the interface isEmpty.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testIsEmpty0001', 0, () => {
      const TAG = "testIsEmpty0001";
      try {
        const treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        let result = treeSet.isEmpty();
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0600
     * @tc.name       : testIsEmpty0002
     * @tc.desc       : Test the function of the interface isEmpty.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testIsEmpty0002', 0, () => {
      const TAG = "testIsEmpty0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.isEmpty();
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0700
     * @tc.name       : testIsEmpty0003
     * @tc.desc       : Test the function of the interface isEmpty.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testIsEmpty0003', 0, () => {
      const TAG = "testIsEmpty0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.remove("squirrel");
        let result = treeSet.isEmpty();
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0800
     * @tc.name       : testHas0001
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0001', 0, () => {
      const TAG = "testHas0001";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        let result = treeSet.has("");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_0900
     * @tc.name       : testHas0002
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0002', 0, () => {
      const TAG = "testHas0002";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.has("");
        expect(result).assertFalse();
        ;
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1000
     * @tc.name       : testHas0003
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0003', 0, () => {
      const TAG = "testHas0003";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        let result = treeSet.has(null);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1100
     * @tc.name       : testHas0004
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0004', 0, () => {
      const TAG = "testHas0004";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.has(null);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1200
     * @tc.name       : testHas0005
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0005', 0, () => {
      const TAG = "testHas0005";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        let result = treeSet.has(undefined);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1300
     * @tc.name       : testHas0006
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0006', 0, () => {
      const TAG = "testHas0006";
      setTimeout(() => {
        try {
          let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
          treeSet.add("squirrel");
          let result = treeSet.has(undefined);
          expect(result).assertFalse();
        } catch (err) {
          console.error(`${TAG} failed, error: ${err}`);
          expect().assertFail();
        }
      }, 3000);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1400
     * @tc.name       : testHas0007
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0007', 0, () => {
      const TAG = "testHas0007";
      try {
        let treeSet: TreeSet<string | number | boolean | Object> = new TreeSet();
        let result = treeSet.has(123);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1500
     * @tc.name       : testHas0008
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0008', 0, () => {
      const TAG = "testHas0008";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.has("squirrel");
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1600
     * @tc.name       : testHas0009
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0009', 0, () => {
      const TAG = "testHas0009";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.has("AA");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1700
     * @tc.name       : testHas0010
     * @tc.desc       : Test the function of the interface has.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testHas0010', 0, () => {
      const TAG = "testHas0010";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let resultOne = treeSet.has("squirrel");
        expect(resultOne).assertTrue();
        expect(treeSet.length).assertEqual(1);
        treeSet.add("aa");
        let resultTwo = treeSet.has("aa");
        expect(resultTwo).assertTrue();
        expect(treeSet.length).assertEqual(2);
        treeSet.remove("squirrel");
        let resultThree = treeSet.has("squirrel");
        expect(resultThree).assertFalse();
        expect(treeSet.length).assertEqual(1);
        treeSet.add("squirrel");
        treeSet.clear();
        let resultFive = treeSet.has("aa");
        expect(resultFive).assertFalse();
        let resultSix = treeSet.has("squirrel");
        expect(resultSix).assertFalse();
        expect(treeSet.length).assertEqual(0);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1800
     * @tc.name       : testGetFirstValue0001
     * @tc.desc       : Test the function of the interface getFirstValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetFirstValue0001', 0, () => {
      const TAG = "testGetFirstValue0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.getFirstValue();
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_1900
     * @tc.name       : testGetFirstValue0002
     * @tc.desc       : Test the function of the interface getFirstValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetFirstValue0002', 0, () => {
      const TAG = "testGetFirstValue0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.getFirstValue();
        expect(result).assertEqual("squirrel");
      } catch (err) {
        expect(err.code).assertEqual(401);
      }
    })

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2000
     * @tc.name       : testGetFirstValue0003
     * @tc.desc       : Test the function of the interface getFirstValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetFirstValue0003', 0, () => {
      const TAG = "testGetFirstValue0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        let result = treeSet.getFirstValue();
        expect(result).assertEqual("sparrow");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2100
     * @tc.name       : testGetFirstValue0004
     * @tc.desc       : Test the function of the interface getFirstValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetFirstValue0004', 0, () => {
      const TAG = "testGetFirstValue0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        let result = treeSet.getFirstValue();
        expect(result).assertEqual("d");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2200
     * @tc.name       : testGetLastValue0001
     * @tc.desc       : Test the function of the interface getLastValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLastValue0001', 0, () => {
      const TAG = "testGetLastValue0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.getLastValue();
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2300
     * @tc.name       : testGetLastValue0002
     * @tc.desc       : Test the function of the interface getLastValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLastValue0002', 0, () => {
      const TAG = "testGetLastValue0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.getLastValue();
        expect(result).assertEqual("squirrel");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2400
     * @tc.name       : testGetLastValue0003
     * @tc.desc       : Test the function of the interface getLastValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLastValue0003', 0, () => {
      const TAG = "testGetLastValue0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        let result = treeSet.getLastValue();
        expect(result).assertEqual("squirrel");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2500
     * @tc.name       : testGetLastValue0004
     * @tc.desc       : Test the function of the interface getLastValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLastValue0004', 0, () => {
      const TAG = "testGetLastValue0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        let result = treeSet.getLastValue();
        expect(result).assertEqual("a");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2600
     * @tc.name       : testAdd0001
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0001', 0, () => {
      const TAG = "testAdd0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("");
        expect(treeSet.length).assertEqual(1);
        let result = treeSet.has("");
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2700
     * @tc.name       : testAdd0002
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0002', 0, () => {
      const TAG = "testAdd0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("a");
        expect(treeSet.length).assertEqual(1);
        let result = treeSet.has("a");
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2800
     * @tc.name       : testAdd0003
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0003', 0, () => {
      const TAG = "testAdd0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add(null);
        expect(treeSet.length).assertEqual(1);
        let result = treeSet.has(null);
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_2900
     * @tc.name       : testAdd0004
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0004', 0, () => {
      const TAG = "testAdd0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add(undefined);
        expect(treeSet.length).assertEqual(1);
        let result = treeSet.has(undefined);
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3000
     * @tc.name       : testAdd0005
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0005', 0, () => {
      const TAG = "testAdd0005";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add(undefined);
        expect(treeSet.length).assertEqual(1);
        let result = treeSet.has(undefined);
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3100
     * @tc.name       : testAdd0006
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0006', 0, () => {
      const TAG = "testAdd0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        for (let i = 0; i < 1000; i++) {
          treeSet.add("sparrow" + i);
          expect(treeSet.has("sparrow" + i)).assertTrue();
        }
        expect(treeSet.length).assertEqual(1000);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3200
     * @tc.name       : testAdd0007
     * @tc.desc       : Test the function of the interface add.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testAdd0007', 0, () => {
      const TAG = "testAdd0007";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        for (let i = 0; i < 1000; i++) {
          treeSet.add("sparrow" + i);
          expect(treeSet.has("sparrow" + i)).assertTrue();
        }
        expect(treeSet.length).assertEqual(1000);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err.message}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3300
     * @tc.name       : testRemove0001
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0001', 0, () => {
      const TAG = "testRemove0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.remove("");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3400
     * @tc.name       : testRemove0002
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0002', 0, () => {
      const TAG = "testRemove0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.remove("");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3500
     * @tc.name       : testRemove0003
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0003', 0, () => {
      const TAG = "testRemove0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.remove(null);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3600
     * @tc.name       : testRemove0004
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0004', 0, () => {
      const TAG = "testRemove0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.remove(null);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3700
     * @tc.name       : testRemove0005
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0005', 0, () => {
      const TAG = "testRemove0005";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.remove(undefined);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3800
     * @tc.name       : testRemove0006
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0006', 0, () => {
      const TAG = "testRemove0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.remove(undefined);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_3900
     * @tc.name       : testRemove0007
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0007', 0, () => {
      const TAG = "testRemove0007";
      try {
        let treeSet: TreeSet<number> = new TreeSet();
        let result = treeSet.remove(123);
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4000
     * @tc.name       : testRemove0008
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0008', 0, () => {
      const TAG = "testRemove0008";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.remove("squirrel");
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4100
     * @tc.name       : testRemove0009
     * @tc.desc       : Test the function of the interface remove.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testRemove0009', 0, () => {
      const TAG = "testRemove0009";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        let result = treeSet.remove("AA");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4200
     * @tc.name       : testGetLowerValue0001
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0001', 0, () => {
      const TAG = "testGetLowerValue0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.getLowerValue("");
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4300
     * @tc.name       : testGetLowerValue0002
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0002', 0, () => {
      const TAG = "testGetLowerValue0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.getLowerValue(null);
        expect(true).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect(err.code).assertEqual(401);
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4400
     * @tc.name       : testGetLowerValue0003
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0003', 0, () => {
      const TAG = "testGetLowerValue0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.getLowerValue(undefined);
        expect(true).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect(err.code).assertEqual(401);
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4500
     * @tc.name       : testGetLowerValue0004
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0004', 0, () => {
      const TAG = "testGetLowerValue0004";
      try {
        let treeSet: TreeSet<number> = new TreeSet();
        let result = treeSet.getLowerValue(123);
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4600
     * @tc.name       : testGetLowerValue0005
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0005', 0, () => {
      const TAG = "testGetLowerValue0005";
      try {
        let treeSet: TreeSet<number> = new TreeSet();
        let result = treeSet.getLowerValue(123);
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4700
     * @tc.name       : testGetLowerValue0006
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0006', 0, () => {
      const TAG = "testGetLowerValue0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        let result = treeSet.getLowerValue("squirrel");
        expect(result).assertEqual("sparrow");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4800
     * @tc.name       : testGetLowerValue0007
     * @tc.desc       : Test the function of the interface getLowerValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetLowerValue0007', 0, () => {
      const TAG = "testGetLowerValue0007";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        let result = treeSet.getLowerValue("c");
        expect(result).assertEqual("d");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_4900
     * @tc.name       : testGetHigherValue0001
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0001', 0, () => {
      const TAG = "testGetHigherValue0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.getHigherValue("");
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5000
     * @tc.name       : testGetHigherValue0002
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0002', 0, () => {
      const TAG = "testGetHigherValue0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.getHigherValue(null);
        expect(true).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect(err.code).assertEqual(401);
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5100
     * @tc.name       : testGetHigherValue0003
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0003', 0, () => {
      const TAG = "testGetHigherValue0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.getHigherValue(undefined);
        expect(true).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect(err.code).assertEqual(401);
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5200
     * @tc.name       : testGetHigherValue0004
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0004', 0, () => {
      const TAG = "testGetHigherValue0004";
      try {
        let treeSet: TreeSet<number> = new TreeSet();
        let result = treeSet.getHigherValue(123);
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5300
     * @tc.name       : testGetHigherValue0005
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0005', 0, () => {
      const TAG = "testGetHigherValue0005";
      try {
        let treeSet: TreeSet<number> = new TreeSet();
        let result = treeSet.getHigherValue(123);
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5400
     * @tc.name       : testGetHigherValue0006
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0006', 0, () => {
      const TAG = "testGetHigherValue0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        let result = treeSet.getHigherValue("sparrow");
        expect(result).assertEqual("squirrel");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5500
     * @tc.name       : testGetHigherValue0007
     * @tc.desc       : Test the function of the interface getHigherValue.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testGetHigherValue0007', 0, () => {
      const TAG = "testGetHigherValue0007";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        let result = treeSet.getHigherValue("c");
        expect(result).assertEqual("b");
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5600
     * @tc.name       : testPopFirst0001
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0001', 0, () => {
      const TAG = "testPopFirst0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.popFirst();
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5700
     * @tc.name       : testPopFirst0002
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0002', 0, () => {
      const TAG = "testPopFirst0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        treeSet.popFirst();
        let result = treeSet.has("sparrow");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5800
     * @tc.name       : testPopFirst0003
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0003', 0, () => {
      const TAG = "testPopFirst0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        treeSet.popFirst();
        let result = treeSet.has("d");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_5900
     * @tc.name       : testPopFirst0004
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0004', 0, () => {
      const TAG = "testPopFirst0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.popFirst();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6000
     * @tc.name       : testPopFirst0005
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0005', 0, () => {
      const TAG = "testPopFirst0005";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.remove("squirrel");
        treeSet.popFirst();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6100
     * @tc.name       : testPopFirst0006
     * @tc.desc       : Test the function of the interface popFirst.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopFirst0006', 0, () => {
      const TAG = "testPopFirst0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        treeSet.clear();
        let result = treeSet.popFirst();
        expect(result).assertEqual(undefined);
        let resultOne = treeSet.has("squirrel");
        expect(resultOne).assertFalse();
        let resultTwo = treeSet.has("sparrow");
        expect(resultTwo).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6200
     * @tc.name       : testPopLast0001
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0001', 0, () => {
      const TAG = "testPopLast0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let result = treeSet.popLast();
        expect(result).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6300
     * @tc.name       : testPopLast0002
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0002', 0, () => {
      const TAG = "testPopLast0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        treeSet.popLast();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6400
     * @tc.name       : testPopLast0003
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0003', 0, () => {
      const TAG = "testPopLast0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        treeSet.popLast();
        let result = treeSet.has("a");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6500
     * @tc.name       : testPopLast0004
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0004', 0, () => {
      const TAG = "testPopLast0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.popLast();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6600
     * @tc.name       : testPopLast0005
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0005', 0, () => {
      const TAG = "testPopLast0005";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.remove("squirrel");
        treeSet.popLast();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6700
     * @tc.name       : testPopLast0006
     * @tc.desc       : Test the function of the interface popLast.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testPopLast0006', 0, () => {
      const TAG = "testPopLast0006";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        treeSet.clear();
        let result = treeSet.popLast();
        expect(result).assertEqual(undefined);
        let resultOne = treeSet.has("squirrel");
        expect(resultOne).assertFalse();
        let resultTwo = treeSet.has("sparrow");
        expect(resultTwo).assertFalse();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6800
     * @tc.name       : testClear0001
     * @tc.desc       : Test the function of the interface clear.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testClear0001', 0, () => {
      const TAG = "testClear0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.clear();
        let result = treeSet.has("");
        expect(result).assertFalse();
        expect(treeSet.length).assertEqual(0);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_6900
     * @tc.name       : testClear0002
     * @tc.desc       : Test the function of the interface clear.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testClear0002', 0, () => {
      const TAG = "testClear0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add("squirrel");
        treeSet.add("sparrow");
        treeSet.clear();
        let result = treeSet.has("squirrel");
        expect(result).assertFalse();
        let resultOne = treeSet.has("sparrow");
        expect(resultOne).assertFalse();
        expect(treeSet.length).assertEqual(0);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7000
     * @tc.name       : testClear0003
     * @tc.desc       : Test the function of the interface clear.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testClear0003', 0, () => {
      const TAG = "testClear0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add("b");
        treeSet.add("c");
        treeSet.add("d");
        treeSet.add("a");
        treeSet.clear();
        let result = treeSet.has("a");
        expect(result).assertFalse();
        let resultOne = treeSet.has("b");
        expect(resultOne).assertFalse();
        let resultTwo = treeSet.has("c");
        expect(resultTwo).assertFalse();
        let resultThree = treeSet.has("d");
        expect(resultThree).assertFalse();
        expect(treeSet.length).assertEqual(0);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7100
     * @tc.name       : testValues0001
     * @tc.desc       : Test the function of the interface values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testValues0001', 0, () => {
      const TAG = "testValues0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let it = treeSet.values();
        let result = it.next().done;
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7200
     * @tc.name       : testValues0002
     * @tc.desc       : Test the function of the interface values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testValues0002', 0, () => {
      const TAG = "testValues0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        let res = treeSet.values();
        expect(res.next().value).assertEqual('AAA');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('DDD');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7300
     * @tc.name       : testValues0003
     * @tc.desc       : Test the function of the interface values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testValues0003', 0, () => {
      const TAG = "testValues0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        let res = treeSet.values();
        expect(res.next().value).assertEqual('DDD');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('AAA');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7400
     * @tc.name       : testTreeSetForEach0001
     * @tc.desc       : Test the function of the interface forEach.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetForEach0001', 0, () => {
      const TAG = "testTreeSetForEach0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.forEach((value ?: string, key ?: string): void => {
          let length = treeSet.length
          expect(length).assertEqual(0)
        });
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7500
     * @tc.name       : testTreeSetForEach0002
     * @tc.desc       : Test the function of the interface forEach.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetForEach0002', 0, () => {
      const TAG = "testTreeSetForEach0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.forEach((value ?: string, key ?: string): void => {
        });
        let res = treeSet.values();
        expect(res.next().value).assertEqual('AAA');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('DDD');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7600
     * @tc.name       : testTreeSetForEach0003
     * @tc.desc       : Test the function of the interface forEach.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetForEach0003', 0, () => {
      const TAG = "testTreeSetForEach0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.forEach((value ?: string, key ?: string): void => {
        });
        let res = treeSet.values();
        expect(res.next().value).assertEqual('DDD');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('AAA');
        let length = treeSet.length;
        expect(length).assertEqual(4)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7700
     * @tc.name       : testTreeSetForEach0004
     * @tc.desc       : Test the function of the interface forEach.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetForEach0004', 0, () => {
      const TAG = "testTreeSetForEach0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.forEach((value ?: string, key ?: string): void => {
        });
        let res = treeSet.values();
        treeSet.remove('BBB')
        expect(res.next().value).assertEqual('AAA');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('DDD');
        let length = treeSet.length;
        expect(length).assertEqual(3)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7800
     * @tc.name       : testTreeSetForEach0005
     * @tc.desc       : Test the function of the interface forEach.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetForEach0005', 0, () => {
      const TAG = "testTreeSetForEach0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.forEach((value ?: string, key ?: string): void => {
        });
        treeSet.clear()
        let length = treeSet.length;
        expect(length).assertEqual(0)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_7900
     * @tc.name       : testTreeSetEntries0001
     * @tc.desc       : Test the function of the interface entries.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetEntries0001', 0, () => {
      const TAG = "testTreeSetEntries0001";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        let it = treeSet.entries();
        let result = it.next().done;
        expect(result).assertTrue();
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_8000
     * @tc.name       : testTreeSetEntries0002
     * @tc.desc       : Test the function of the interface entries.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetEntries0002', 0, () => {
      const TAG = "testTreeSetEntries0002";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.entries()
        let res = treeSet.values();
        expect(res.next().value).assertEqual('AAA');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('DDD');
        let length = treeSet.length;
        expect(length).assertEqual(4)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_8100
     * @tc.name       : testTreeSetEntries0003
     * @tc.desc       : Test the function of the interface entries.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetEntries0003', 0, () => {
      const TAG = "testTreeSetEntries0003";
      try {
        let treeSet: TreeSet<string> = new TreeSet<string>((firstValue: string, secondValue: string): boolean => {
          return firstValue > secondValue
        });
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.entries()
        let res = treeSet.values();
        expect(res.next().value).assertEqual('DDD');
        expect(res.next().value).assertEqual('CCC');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('AAA');
        let length = treeSet.length;
        expect(length).assertEqual(4)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_8200
     * @tc.name       : testTreeSetEntries0004
     * @tc.desc       : Test the function of the interface entries.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetEntries0004', 0, () => {
      const TAG = "testTreeSetEntries0004";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.entries()
        let res = treeSet.values();
        treeSet.remove("CCC")
        expect(res.next().value).assertEqual('AAA');
        expect(res.next().value).assertEqual('BBB');
        expect(res.next().value).assertEqual('DDD');
        let length = treeSet.length;
        expect(length).assertEqual(3)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_TREESET_8300
     * @tc.name       : testTreeSetEntries0005
     * @tc.desc       : Test the function of the interface entries.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testTreeSetEntries0005', 0, () => {
      const TAG = "testTreeSetEntries0005";
      try {
        let treeSet: TreeSet<string> = new TreeSet();
        treeSet.add('AAA');
        treeSet.add('BBB');
        treeSet.add('CCC');
        treeSet.add('DDD');
        treeSet.entries()
        treeSet.clear()
        let length = treeSet.length;
        expect(length).assertEqual(0)
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });
  })
}