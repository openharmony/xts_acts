/*
 * Copyright (c) 2025 SwanLink (Jiangsu) Technology Development Co., LTD.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect, TestType, Level, Size } from '@ohos/hypium';
import { Constants } from './BigUint64ArrayData.test';

function sleep(time: number) {
  return new Promise<void>((resolve, reject) => {
    setTimeout(() => {
      resolve()
    }, time)
  }).then(() => {
    console.info( `sleep ${time} over...`)
  })
}

export default function BigUint64ArrayTest() {
  describe('BigUint64ArrayTest', () => {
    let value: string;
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(async (done:Function) => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
      console.info('TypeArray after each called');
      value == '';
      await sleep(10);
      done();
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0100
     * @tc.name       : testBigUint64ArrayConstructor0001
     * @tc.desc       : Testing Constructor of BigUint64Array without param.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0001', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0001";
      try {
        let array = new BigUint64Array();
        expect(array.toString()).assertEqual('');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0200
     * @tc.name       : testBigUint64ArrayConstructor0002
     * @tc.desc       : Testing Constructor of BigUint64Array with length 0,and set index 0 with 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0002', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0002";
      try {
        let array = new BigUint64Array(0);
        array[0] = BigInt(3);
        expect(array[0]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0300
     * @tc.name       : testBigUint64ArrayConstructor0003
     * @tc.desc       : Testing Constructor of BigUint64Array with length 10,and set index 0 with 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0003', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0003";
      try {
        let array = new BigUint64Array(10);
        array[0] = BigInt(3);
        expect(array[0]).assertEqual(BigInt(3));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0400
     * @tc.name       : testBigUint64ArrayConstructor0004
     * @tc.desc       : Testing Constructor of BigUint64Array with length 10,and set index 0 with 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0004', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0004";
      try {
        let array = new BigUint64Array(10);
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0500
     * @tc.name       : testBigUint64ArrayConstructor0005
     * @tc.desc       : Testing Constructor of BigUint64Array with length 10,and get value of index 1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0005', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0005";
      try {
        let array = new BigUint64Array(10);
        expect(array[1]).assertEqual(BigInt(0));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0600
     * @tc.name       : testBigUint64Constructor0006
     * @tc.desc       : Testing Constructor of BigUint64Array with 'q',and get value of index 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0006', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0006";
      try {
        const array = Constants.bigUint64ConstructTestArray1;
        expect(array[0]).assertEqual(113n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGINT64ARRAY_CONSTRUCTOR_0700
     * @tc.name       : testBigUint64Constructor0007
     * @tc.desc       : Testing Constructor of BigUint64Array with '56',and get value of index 1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0007', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0007";
      try {
        const array = Constants.bigUint64ConstructTestArray2;
        expect(array[0]).assertEqual(56n);
        expect(array.length).assertEqual(1);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0800
     * @tc.name       : testBigUint64ArrayConstructor0008
     * @tc.desc       : Testing Constructor of BigUint64Array with array[21,31],and get value of index 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0008', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0008";
      try {
        let array = new BigUint64Array([BigInt(21), BigInt(31)]);
        expect(array[0]).assertEqual(BigInt(21));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_0900
     * @tc.name       : testBigUint64ArrayConstructor0009
     * @tc.desc       : Testing Constructor of BigUint64Array with array[21,31],and get value of index 1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0009', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0009";
      try {
        let array = new BigUint64Array([BigInt(21), BigInt(31)]);
        expect(array[1]).assertEqual(BigInt(31));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1000
     * @tc.name       : testBigUint64ArrayConstructor0010
     * @tc.desc       : Testing Constructor of BigUint64Array with array[21,31],and get value of index 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0010', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0010";
      try {
        let array = new BigUint64Array([BigInt(21), BigInt(31)]);
        expect(array[3]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1100
     * @tc.name       : testBigUint64ArrayConstructor0011
     * @tc.desc       : Testing Constructor of BigUint64Array with array[21,31],and set value of index 10,get value of index 10.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0011', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0011";
      try {
        let array = new BigUint64Array([BigInt(21), BigInt(31)]);
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1200
     * @tc.name       : testBigUint64ArrayConstructor0012
     * @tc.desc       : Testing Constructor of BigUint64Array with BigUint64Array which construct by array [21,31],and get value of index 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0012', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0012";
      try {
        let array = new BigUint64Array(new BigUint64Array([BigInt(21), BigInt(31)]));
        expect(array[0]).assertEqual(BigInt(21));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1300
     * @tc.name       : testBigUint64ArrayConstructor0013
     * @tc.desc       : Testing Constructor of BigUint64Array with BigUint64Array which construct by array [21,31],and get value of index 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0013', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0013";
      try {
        let array = new BigUint64Array(new BigUint64Array([BigInt(21), BigInt(31)]));
        expect(array[1]).assertEqual(BigInt(31));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1400
     * @tc.name       : testBigUint64ArrayConstructor0014
     * @tc.desc       : Testing Constructor of BigUint64Array with BigUint64Array which construct by array [21,31],and get value of index 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0014', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0014";
      try {
        let array = new BigUint64Array(new BigUint64Array([BigInt(21), BigInt(31)]));
        expect(array[3]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1500
     * @tc.name       : testBigUint64ArrayConstructor0015
     * @tc.desc       : Testing Constructor of BigUint64Array with BigUint64Array which construct by array [21,31],and set value of index 10,and get value of index 10.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0015', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0015";
      try {
        let array = new BigUint64Array(new BigUint64Array([BigInt(21), BigInt(31)]));
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_1600
     * @tc.name       : testBigUint64ArrayConstructor0016
     * @tc.desc       : Testing Constructor of BigUint64Array with ArrayBuffer,and get value of index 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0016', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0016";
      try {
        let array = new BigUint64Array(new BigUint64Array([BigInt(21), BigInt(31)]));
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_BYTESPERELEMENT_1700
     * @tc.name       : testBigUint64ArrayBytesPerElement0017
     * @tc.desc       : Testing BYTES_PER_ELEMENT of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayBytesPerElement0017', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayBytesPerElement0017";
      try {
        let bytes = BigUint64Array.BYTES_PER_ELEMENT;
        expect(bytes).assertEqual(8);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_FROM_1800
     * @tc.name       : testBigUint64ArrayFrom0018
     * @tc.desc       : Testing static function from of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0018', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0018";
      try {
        let array = BigUint64Array.from(Array.from([1, 2, 3], (x) => BigInt(x + x)));
        expect(array[0]).assertEqual(BigInt(2));
        expect(array[1]).assertEqual(BigInt(4));
        expect(array[2]).assertEqual(BigInt(6));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_1900
     * @tc.name       : testBigUint64ArrayOf0019
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0019', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0019";
      try {
        let array = BigUint64Array.of();
        expect(array.toString()).assertEqual('');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2000
     * @tc.name       : testBigUint64ArrayOf0020
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0020', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0020";
      try {
        let array = BigUint64Array.of(BigInt(0));
        array[0] = BigInt(3);
        expect(array[0]).assertEqual(BigInt(3));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2100
     * @tc.name       : testBigUint64ArrayOf0021
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0021', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0021";
      try {
        let array = BigUint64Array.of(BigInt(10));
        array[0] = BigInt(3);
        expect(array[0]).assertEqual(BigInt(3));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2200
     * @tc.name       : testBigUint64ArrayOf0022
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0022', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0022";
      try {
        let array = BigUint64Array.of(BigInt(10));
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2300
     * @tc.name       : testBigUint64ArrayOf0023
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0023', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0023";
      try {
        let array = BigUint64Array.of(BigInt(10));
        expect(array[1]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2400
     * @tc.name       : testBigUint64ArrayOf0024
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0024', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0024";
      try {
        let array = BigUint64Array.of(BigInt(21), BigInt(31));
        expect(array[0]).assertEqual(BigInt(21));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2500
     * @tc.name       : testBigUint64ArrayOf0025
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0025', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0025";
      try {
        let array = BigUint64Array.of(BigInt(21), BigInt(31));
        expect(array[1]).assertEqual(BigInt(31));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2600
     * @tc.name       : testBigUint64ArrayOf0026
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0026', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0026";
      try {
        let array = BigUint64Array.of(BigInt(21), BigInt(31));
        expect(array[3]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_2700
     * @tc.name       : testBigUint64ArrayOf0027
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0027', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0027";
      try {
        let array = BigUint64Array.of(BigInt(21), BigInt(31));
        array[10] = BigInt(3);
        expect(array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_BYTEOFFSET_2800
     * @tc.name       : testBigUint64ArrayByteOffset0028
     * @tc.desc       : Testing instance property byteOffset of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayByteOffset0028', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayByteOffset0028";
      try {
        const buffer = new ArrayBuffer(32);
        const arrayOffSet0 = new BigUint64Array(buffer);
        expect(arrayOffSet0.byteOffset).assertEqual(0);
        const arrayOffSet8 = new BigUint64Array(buffer, 8);
        expect(arrayOffSet8.byteOffset).assertEqual(8);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_BYTELENGTH_2900
     * @tc.name       : testBigUint64ArrayByteLength0029
     * @tc.desc       : Testing instance property byteLength of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayByteLength0029', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayByteLength0029";
      try {
        const buffer = new ArrayBuffer(32);
        const arrayOffSet0 = new BigUint64Array(buffer);
        expect(arrayOffSet0.byteLength).assertEqual(32);
        const arrayOffSet8 = new BigUint64Array(buffer, 8);
        expect(arrayOffSet8.byteLength).assertEqual(24);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_BUFFER_3000
     * @tc.name       : testBigUint64ArrayBuffer0030
     * @tc.desc       : Testing instance property buffer of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayBuffer0030', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayBuffer0030";
      try {
        const buffer = new ArrayBuffer(32);
        const arrayOffSet0 = new BigUint64Array(buffer);
        expect(arrayOffSet0.buffer.byteLength).assertEqual(32);
        const arrayOffSet8 = new BigUint64Array(buffer, 8);
        expect(arrayOffSet8.buffer.byteLength).assertEqual(32);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_LENGTH_3100
     * @tc.name       : testBigUint64ArrayLength0031
     * @tc.desc       : Testing instance function length of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayLength0031', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayLength0031";
      try {
        const buffer = new ArrayBuffer(32);
        const arrayOffSet0 = new BigUint64Array(buffer);
        expect(arrayOffSet0.length).assertEqual(4);
        const arrayOffSet8 = new BigUint64Array(buffer, 8);
        expect(arrayOffSet8.length).assertEqual(3);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3200
     * @tc.name       : testBigUint64ArrayConstructor0032
     * @tc.desc       : Testing Constructor of BigUint64Array with string param.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0032', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0032";
      try {
        const array = Constants.bigUint64ConstructTestArray1;
        expect(array.toString()).assertEqual('113');
        const array2 = Constants.bigUint64ConstructTestArray2;
        expect(array2[1]).assertEqual(undefined);
        expect(array2.length).assertEqual(1);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3300
     * @tc.name       : testBigUint64ArrayConstructor0033
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0033', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0033";
      try {
        const int8Array = new Int8Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(int8Array[0]), true);
        view.setBigInt64(8, BigInt(int8Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3400
     * @tc.name       : testBigUint64ArrayConstructor0034
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0034', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0034";
      try {
        const uint8Array = new Uint8Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(uint8Array[0]), true);
        view.setBigInt64(8, BigInt(uint8Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3500
     * @tc.name       : testBigUint64ArrayConstructor0035
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0035', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0035";
      try {
        const uint8ClampedArray = new Uint8ClampedArray([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(uint8ClampedArray[0]), true);
        view.setBigInt64(8, BigInt(uint8ClampedArray[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3600
     * @tc.name       : testBigUint64ArrayConstructor0036
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0036', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0036";
      try {
        const int16Array = new Int16Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(int16Array[0]), true);
        view.setBigInt64(8, BigInt(int16Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3700
     * @tc.name       : testBigUint64ArrayConstructor0037
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0037', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0037";
      try {
        const uint16Array = new Uint16Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(uint16Array[0]), true);
        view.setBigInt64(8, BigInt(uint16Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3800
     * @tc.name       : testBigUint64ArrayConstructor0038
     * @tc.desc       : Testing Constructor of BigUint64Array with Int32Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0038', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0038";
      try {
        const int32Array = new Int32Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(int32Array[0]), true);
        view.setBigInt64(8, BigInt(int32Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_3900
     * @tc.name       : testBigUint64ArrayConstructor0039
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint32Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0039', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0039";
      try {
        const uint32Array = new Uint32Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(uint32Array[0]), true);
        view.setBigInt64(8, BigInt(uint32Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4000
     * @tc.name       : testBigUint64ArrayConstructor0040
     * @tc.desc       : Testing Constructor of BigUint64Array with BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0040', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0040";
      try {
        const array = new BigUint64Array([21n, 31n]);
        let array1 = new BigUint64Array(array);
        expect(array1[0]).assertEqual(21n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4200
     * @tc.name       : testBigUint64ArrayConstructor0042
     * @tc.desc       : Testing Constructor of BigUint64Array with Float32Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0042', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0042";
      try {
        const float32Array = new Float32Array([21, 31]);
        const buffer = new ArrayBuffer(16);
        const view = new DataView(buffer);
        view.setBigInt64(0, BigInt(float32Array[0]), true);
        view.setBigInt64(8, BigInt(float32Array[1]), true);
        const bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_length_4300
     * @tc.name       : testBigUint64ArrayLength0043
     * @tc.desc       : Testing instance function length of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayLength0043', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayLength0043";
      try {
        let bigInt64Array = new BigUint64Array(8);
        expect(bigInt64Array.length).assertEqual(8);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_FROM_4400
     * @tc.name       : testBigUint64ArrayFrom0044
     * @tc.desc       : Testing static function from of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0044', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0044";
      try {
        expect(Constants.bigUint64ConstructTestArray3[0]).assertEqual(BigInt(102));
        expect(Constants.bigUint64ConstructTestArray3[1]).assertEqual(BigInt(111));
        expect(Constants.bigUint64ConstructTestArray3[2]).assertEqual(BigInt(111));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4500
     * @tc.name       : testBigUint64ArrayConstructor0045
     * @tc.desc       : Testing Constructor of BigUint64Array with Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0045', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0045";
      try {
        let array: Array<number> = new Array<number>(2);
        array[0] = 21;
        array[1] = 31;
        let bigIntArray = array.map(num => BigInt(num));
        let bigInt64Array = new BigUint64Array(bigIntArray);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4600
     * @tc.name       : testBigUint64ArrayConstructor0046
     * @tc.desc       : Testing Constructor of BigUint64Array with Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0046', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0046";
      try {
        let array: Array<number> = new Array<number>(2);
        array[0] = 21;
        array[1] = 31;
        let bigIntArray = array.map(num => BigInt(num));
        let buffer = new ArrayBuffer(bigIntArray.length * 8);
        let view = new DataView(buffer);
        bigIntArray.forEach((num, index) => {
          view.setBigInt64(index * 8, num, true);
        });
        let bigInt64Array = new BigUint64Array(buffer);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4700
     * @tc.name       : testBigUint64ArrayConstructor0047
     * @tc.desc       : Testing Constructor of BigUint64Array with ArrayBuffer.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0047', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0047";
      try {
        let arrayBuffer = new ArrayBuffer(16);
        let bigInt64Array = new BigUint64Array(arrayBuffer);
        bigInt64Array[0] = BigInt(21);
        bigInt64Array[1] = BigInt(31);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_CONSTRUCTOR_4800
     * @tc.name       : testBigUint64ArrayConstructor0048
     * @tc.desc       : Testing Constructor of BigUint64Array with ArrayBuffer.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayConstructor0048', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayConstructor0048";
      try {
        let arrayBuffer = new ArrayBuffer(16);
        let bigInt64Array = new BigUint64Array(arrayBuffer, 0, 2);
        bigInt64Array[0] = BigInt(21);
        bigInt64Array[1] = BigInt(31);
        expect(bigInt64Array[0]).assertEqual(BigInt(21));
        expect(bigInt64Array[1]).assertEqual(BigInt(31));
        expect(bigInt64Array[3]).assertEqual(undefined);
        bigInt64Array[10] = BigInt(3);
        expect(bigInt64Array[10]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_FROM_4900
     * @tc.name       : testBigUint64ArrayFrom0049
     * @tc.desc       : Testing static function from of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0049', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0049";
      try {
        expect(Constants.bigUint64ConstructTestArray4[0]).assertEqual(BigInt(102));
        expect(Constants.bigUint64ConstructTestArray4[1]).assertEqual(BigInt(98));
        expect(Constants.bigUint64ConstructTestArray4[2]).assertEqual(BigInt(122));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_FROM_5000
     * @tc.name       : testBigUint64ArrayFrom0050
     * @tc.desc       : Testing static function from of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0050', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0050";
      try {
        expect(Constants.bigUint64ConstructTestArray5[0]).assertEqual(BigInt(2));
        expect(Constants.bigUint64ConstructTestArray5[1]).assertEqual(BigInt(4));
        expect(Constants.bigUint64ConstructTestArray5[2]).assertEqual(BigInt(8));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_FROM_5100
     * @tc.name       : testBigUint64ArrayFrom0051
     * @tc.desc       : Testing static function from of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0051', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0051";
      try {
        expect(Constants.bigUint64FromTestArray[0]).assertEqual(BigInt(0));
        expect(Constants.bigUint64FromTestArray[1]).assertEqual(BigInt(1));
        expect(Constants.bigUint64FromTestArray[2]).assertEqual(BigInt(2));
        expect(Constants.bigUint64FromTestArray[3]).assertEqual(BigInt(3));
        expect(Constants.bigUint64FromTestArray[4]).assertEqual(BigInt(4));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_5200
     * @tc.name       : testBigUint64ArrayOf0052
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0052', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0052";
      try {
        expect(Constants.bigUint64OfTestNumber1.toString()).assertEqual('123');
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIG_UINT64ARRAY_OF_5300
     * @tc.name       : testBigUint64ArrayOf0053
     * @tc.desc       : Testing static function of of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayOf0053', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayOf0053";
      try {
        expect(Constants.bigUint64OfTestNumber2[0]).assertEqual(BigInt(1));
        expect(Constants.bigUint64OfTestNumber2[2]).assertEqual(BigInt(3));
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAYFROM_5400
     * @tc.name       : testBigUint64ArrayFrom0054
     * @tc.desc       : Testing static function from range length step + 1 => of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0054', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0054";
      try {
        expect(Constants.bigUint64ArrayNumber[0]).assertEqual(0n);
        expect(Constants.bigUint64ArrayNumber[1]).assertEqual(1n);
        expect(Constants.bigUint64ArrayNumber[2]).assertEqual(2n);
        expect(Constants.bigUint64ArrayNumber[3]).assertEqual(3n);
        expect(Constants.bigUint64ArrayNumber[4]).assertEqual(4n);
        expect(Constants.bigUint64ArrayNumber[5]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAYFROM_5500
     * @tc.name       : testBigUint64ArrayFrom0055
     * @tc.desc       : Testing static function from range length 'A~Z' => of BigUint64Array.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64ArrayFrom0055', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64ArrayFrom0055";
      try {
        expect(Constants.bigUint64ArrayCharacter[0]).assertEqual(65n);
        expect(Constants.bigUint64ArrayCharacter[1]).assertEqual(66n);
        expect(Constants.bigUint64ArrayCharacter[2]).assertEqual(67n);
        expect(Constants.bigUint64ArrayCharacter[25]).assertEqual(90n);
        expect(Constants.bigUint64ArrayCharacter[26]).assertEqual(undefined);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_5600
     * @tc.name       : testBigUint64Constructor0056
     * @tc.desc       : Testing Constructor of BigUint64Array with threshold value([0]).
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0056', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0056";
      try {
        let array = new BigUint64Array([0n]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_5700
     * @tc.name       : testBigUint64Constructor0057
     * @tc.desc       : Testing Constructor of BigUint64Array with out of bounds value([-1n]),
     * and get value of index 0 is 18446744073709551615n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0057', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0057";
      try {
        let array = new BigUint64Array([-1n]);
        expect(array[0]).assertEqual(18446744073709551615n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_5800
     * @tc.name       : testBigUint64Constructor0058
     * @tc.desc       : Testing Constructor of BigUint64Array with threshold value([2*64 - 1]),
     * and get value of index 0 is 18446744073709551615n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0058', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0058";
      try {
        let array = new BigUint64Array([18446744073709551615n]);
        expect(array[0]).assertEqual(18446744073709551615n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_5900
     * @tc.name       : testBigUint64Constructor0059
     * @tc.desc       : Testing Constructor of BigUint64Array with out of bounds value([2*64]),
     * and get value of index 0 is 0n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0059', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0059";
      try {
        let array = new BigInt64Array([18446744073709551616n]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6000
     * @tc.name       : testBigUint64Constructor0060
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array threshold value([-128]),
     * and get value of index 0 is 18446744073709551488n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0060', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0060";
      try {
        let array1 = new Int8Array([-128]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(18446744073709551488n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6100
     * @tc.name       : testBigUint64Constructor0061
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array out of bounds value([-129]),
     * and get value of index 0 is 127n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0061', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0061";
      try {
        let array1 = new Int8Array([-129]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(127n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6200
     * @tc.name       : testBigUint64Constructor0062
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array threshold value([127]),
     * and get value of index 0 is 127n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0062', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0062";
      try {
        let array1 = new Int8Array([127]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(127n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6300
     * @tc.name       : testBigUint64Constructor0063
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array value([126]),
     * and get value of index 0 is -2.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0063', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0063";
      try {
        let array1 = new Int8Array([126]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(126n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6400
     * @tc.name       : testBigUint64Constructor0064
     * @tc.desc       : Testing Constructor of BigUint64Array with Int8Array out of bounds value([128]),
     * and get value of index 0 is 18446744073709551488n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0064', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0064";
      try {
        let array1 = new Int8Array([128]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(18446744073709551488n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6500
     * @tc.name       : testBigUint64Constructor0065
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray threshold value([0]),
     * and get value of index 0 is 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0065', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0065";
      try {
        let array1 = new Uint8ClampedArray([0]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6600
     * @tc.name       : testBigUint64Constructor0066
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray out of bounds value([-1]),
     * and get value of index 0 is 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0066', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0066";
      try {
        let array1 = new Uint8ClampedArray([-1]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6700
     * @tc.name       : testBigUint64Constructor0067
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray threshold value([255]),
     * and get value of index 0 is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0067', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0067";
      try {
        let array1 = new Uint8ClampedArray([255]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(255n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6800
     * @tc.name       : testBigUint64Constructor0068
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray out of bounds value([256]),
     * and get value of index 0 is 255n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0068', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0068";
      try {
        let array1 = new Uint8ClampedArray([256]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(255n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_6900
     * @tc.name       : testBigUint64Constructor0069
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint8ClampedArray value([254]),
     * and get value of index 0 is 254n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0069', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0069";
      try {
        let array1 = new Uint8ClampedArray([254]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(254n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7000
     * @tc.name       : testBigUint64Constructor0070
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array threshold value([-32768]),
     * and get value of index 0 is 18446744073709518848n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0070', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0070";
      try {
        let array1 = new Int16Array([-32768]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(18446744073709518848n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7100
     * @tc.name       : testBigUint64Constructor0071
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array out of bounds value([-32769]),
     * and get value of index 0 is 32767n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0071', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0071";
      try {
        let array1 = new Int16Array([-32769]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(32767n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7200
     * @tc.name       : testBigUint64Constructor0072
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array threshold value([32767]),
     * and get value of index 0 is 32767n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0072', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0072";
      try {
        let array1 = new Int16Array([32767]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(32767n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7300
     * @tc.name       : testBigUint64Constructor0073
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array out of bounds value([32768]),
     * and get value of index 0 is 18446744073709518848n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0073', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0073";
      try {
        let array1 = new Int16Array([32768]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(18446744073709518848n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7400
     * @tc.name       : testBigUint64Constructor0074
     * @tc.desc       : Testing Constructor of BigUint64Array with Int16Array value([32766]),
     * and get value of index 0 is 32766n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0074', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0074";
      try {
        let array1 = new Int16Array([32766]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(32766n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7500
     * @tc.name       : testBigUint64Constructor0075
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array threshold value([0]),
     * and get value of index 0 is 0n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0075', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0075";
      try {
        let array1 = new Uint16Array([0]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7600
     * @tc.name       : testBigUint64Constructor0076
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array out of bounds value([-1]),
     * and get value of index 0 is 65535n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0076', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0076";
      try {
        let array1 = new Uint16Array([-1]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(65535n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7700
     * @tc.name       : testBigUint64Constructor0077
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array threshold value([65535]),
     * and get value of index 0 is 65535n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0077', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0077";
      try {
        let array1 = new Uint16Array([65535]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(65535n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7800
     * @tc.name       : testBigUint64Constructor0078
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array out of bounds value([65536]),
     * and get value of index 0 is 0n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0078', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0078";
      try {
        let array1 = new Uint16Array([65536]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(0n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_7900
     * @tc.name       : testBigUint64Constructor0079
     * @tc.desc       : Testing Constructor of BigUint64Array with Uint16Array value([65534]),
     * and get value of index 0 is 65534n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0079', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0079";
      try {
        let array1 = new Uint16Array([65534]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(65534n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_BIGUINT64ARRAY_CONSTRUCTOR_8000
     * @tc.name       : testBigUint64Constructor0080
     * @tc.desc       : Testing Constructor of BigUint64Array with Int32Array threshold value([-2147483648]),
     * and get value of index 0 is 18446744071562067968n.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testBigUint64Constructor0080', TestType.FUNCTION | Size.MEDIUMTEST | Level.LEVEL1, () => {
      const TAG = "testBigUint64Constructor0080";
      try {
        let array1 = new Int32Array([-2147483648]);
        let array = new BigUint64Array([BigInt(array1[0])]);
        expect(array[0]).assertEqual(18446744071562067968n);
      } catch (err) {
        console.error(`${TAG} failed, error: ${err}`);
        expect().assertFail();
      }
    });

  })
}