/*
* Copyright (C) 2025 HiHope Open Source Organization.
* Licensed under the Apache License, Version 2.0 (the 'License');
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an 'AS IS' BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
import { ArkTSUtils, MessageEvents, taskpool, worker } from '@kit.ArkTS';

export function sleep(time: number): Promise<void> {
  return new Promise((re, je) => {
    setTimeout(() => {
      re();
    }, time);
  });
};



@Concurrent
export function printArgs1(args: number): number {
  console.info('printArgs: ' + args);
  return args;
}

@Concurrent
export function ConcurrentFunc(num: number): number {
  const promises: Promise<void>[] = [];
  let count: number = 0;
  count = num;
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  const promise = lock1.lockAsync(async () => {
    console.log('Enter shared lock lock1');
    await lock2.lockAsync(async () => {
      console.log('Enter exclusive lock lock2');
      await lock3.lockAsync(async () => {
        console.log('Enter shared lock lock3');
        await new Promise<void>((resolve) => {
          setTimeout(() => {
            console.log('Asynchronous operation completed');
            count++;
            resolve();
          }, 1000);
        });
        console.log('Exit shared lock lock3');
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
    console.log('Exit shared lock lock1');
  }, ArkTSUtils.locks.AsyncLockMode.SHARED);
  promises.push(promise);
  taskpool.Task.sendData(count);
  return count;
}

@Concurrent
export function delay(args: number): number {
  let t: number = Date.now();
  while ((Date.now() - t) < 1000) {
    continue;
  }
  return args;
}

@Concurrent
export function printArgs2(args: number): number {
  let count:number = 0;
  count = args
  let LOCK1 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = LOCK1.lockAsync(async () => {
      console.log('SHARED');
      try {
        throw new Error('Error occurred in asynchronous operation');
      } catch (error) {
        count++;
        console.error('Caught an exception:', error.message);
      }
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs4(args: number): number {
  let count:number = 0;
  count = args
  let lock1 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await new Promise<void>((resolve) => {
        console.log('Asynchronous operation completed');
        resolve();
        count++;
      });
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs6(args: number): number {
  let count:number = 0;
  count = args
  let lock1 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await new Promise<void>((_,reject) => {
        console.log('Asynchronous operation completed');
        reject();
        count++;
      });
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs9(args: number): number {
  let count:number = 0;
  count = args
  let lock1 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await new Promise<void>((_, reject) => {
        try {
          count++;
          const error = new Error('Simulated asynchronous operation error');
          console.error('Caught an exception:', error.message);
          throw error;
        } catch (e) {
          reject(e);
        }
      });
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs12(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((_, reject) => {
          try {
            count++;
            const error = new Error('Simulated asynchronous operation error');
            console.error('Caught an exception:', error.message);
            throw error;
          } catch (e) {
            reject(e);
          }
        });
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs15(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((resolve) => {
          count++;
          resolve();
        });
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs17(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((_, reject) => {
          count++;
          reject();
        });
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs20(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((_, reject) => {
          setTimeout(() => {
            try {
              count++;
              const error = new Error('Simulated asynchronous operation error');
              console.error('Caught an exception:', error.message);
              throw error;
            } catch (e) {
              reject(e);
            }
          }, 200);
        });
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}


@Concurrent
export function printArgs21(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((_, reject) => {
          setTimeout(() => {
            try {
              count++;
              const error = new Error('Simulated asynchronous operation error');
              console.error('Caught an exception:', error.message);
              throw error;
            } catch (e) {
              reject(e);
            }
          }, 200);
        });
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs23(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((resolve) => {
          setTimeout(() => {
            count++;
            resolve();
          }, 200);
        });
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs25(args: number): number {
  let count:number = 0;
  count = args
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  const promises: Promise<void>[] = [];
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter exclusive lock lock2');
        await new Promise<void>((_, reject) => {
          setTimeout(() => {
            count++;
            reject();
          }, 200);
        });
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs28(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(() => {
        console.log('Enter exclusive lock lock2');
        count++;
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs31(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = new ArkTSUtils.locks.AsyncLock();
  const lock2 = new ArkTSUtils.locks.AsyncLock();
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(() => {
        console.log('Enter exclusive lock lock2');
        count++;
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit exclusive lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs34(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter shared lock lock2');
        await lock3.lockAsync(() => {
          console.log('Enter shared lock lock3');
          count++;
          console.log('Exit shared lock lock3');
        }, ArkTSUtils.locks.AsyncLockMode.SHARED);
        console.log('Exit shared lock lock2');
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit shared lock lock1');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs37(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter shared lock lock2');
        await lock3.lockAsync(async () => {
          await new Promise<void>((resolve) => {
            setTimeout(() => {
              console.log('Asynchronous operation completed');
              resolve();
              count++;
            }, 200);
          });
          console.log('Exit shared lock lock3');
        }, ArkTSUtils.locks.AsyncLockMode.SHARED);
        console.log('Exit shared lock lock2');
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit shared lock lock1');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs40(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  for (let i = 0; i < 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter shared lock lock2');
        await lock3.lockAsync(async () => {
          setTimeout(() => {
            console.log('Asynchronous operation completed');
            count++;
          }, 200);
          console.log('Exit EXCLUSIVE lock lock3');
        }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
        console.log('Exit shared lock lock2');
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit shared lock lock1');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs41(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  const promise1 = lock1.lockAsync(async () => {
    console.log('Enter shared lock lock1');
    await lock2.lockAsync(async () => {
      console.log('Enter shared lock lock2');
      await lock3.lockAsync(async () => {
        setTimeout(() => {
          console.log('Asynchronous operation completed');
          count++;
        }, 200);
        console.log('Exit shared lock lock3');
      }, ArkTSUtils.locks.AsyncLockMode.SHARED);
      console.log('Exit shared lock lock2');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
  }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
  console.log('Exit shared lock lock1');
  promises.push(promise1);
  return count;
}

@Concurrent
export function printArgs43(args: number): number {
  const caseName = 'TaskpoolUtilsAsynclockDifferentTest4300';
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  for (let i = 0; i < 10; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter EXCLUSIVE lock lock2');
        await lock3.lockAsync(async () => {
          let workThread: worker.ThreadWorker;
          workThread = new worker.ThreadWorker('../testability/workers/Worker');
          workThread.postMessage(caseName);
          workThread.onmessage = (e: MessageEvents): void => {
            count = e.data;
            console.log('e:' + JSON.stringify(e));
            console.info('main2 thread count is  ' + count);
            workThread.terminate();
          }
          console.log('Exit EXCLUSIVE lock lock3');
        }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
        console.log('Exit EXCLUSIVE lock lock2');
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit shared lock lock1');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs44(args: number): number {
  const caseName = 'TaskpoolUtilsAsynclockDifferentTest4300';
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const lock3 = ArkTSUtils.locks.AsyncLock.request('lock3');
  for (let i = 0; i < 10; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('Enter shared lock lock1');
      await lock2.lockAsync(async () => {
        console.log('Enter EXCLUSIVE lock lock2');
        await lock3.lockAsync(async () => {
          let WorkThread: worker.ThreadWorker;
          WorkThread = new worker.ThreadWorker('../testability/workers/Worker');
          WorkThread.postMessage(caseName);
          WorkThread.onmessage = (e: MessageEvents): void => {
            count = e.data;
            console.log('e:' + JSON.stringify(e));
            console.info('main2 thread count is  ' + count);
            WorkThread.terminate();
          }
          console.log('Exit EXCLUSIVE lock lock3');
        }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
        console.log('Exit EXCLUSIVE lock lock2');
      }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE);
      console.log('Exit shared lock lock1');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED);
    console.log('Exit shared lock lock1');
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs46(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const options1 = new ArkTSUtils.locks.AsyncLockOptions<void>();
  options1.timeout = 1000;
  const options2 = new ArkTSUtils.locks.AsyncLockOptions<void>();
  options2.timeout = 1000;
  for (let i = 0; i <= 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('enter SHARE lock1');
      try {
        await lock2.lockAsync(async () => {
          console.log('enter EXCLUSIVE lock2');
          await new Promise<void>((resolve) => {
            setTimeout(() => {
              resolve();
            }, 100);
          });
          console.log('Exit EXCLUSIVE lock');
        }, ArkTSUtils.locks.AsyncLockMode.EXCLUSIVE, options2);
      } catch (e) {
        count++;
        console.log(`Promise execution completed in ${count} second`);
      }
      console.log('Exit SHARED lock');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED, options1);
    promises.push(promise1);
  }
  return count;
}

@Concurrent
export function printArgs49(args: number): number {
  let count = 0;
  count = args;
  const promises: Promise<void>[] = [];
  const lock1 = ArkTSUtils.locks.AsyncLock.request('lock1');
  const lock2 = ArkTSUtils.locks.AsyncLock.request('lock2');
  const options1 = new ArkTSUtils.locks.AsyncLockOptions<void>();
  options1.timeout = 1000;
  const options2 = new ArkTSUtils.locks.AsyncLockOptions<void>();
  options2.timeout = 1000;
  for (let i = 0; i <= 3; i++) {
    const promise1 = lock1.lockAsync(async () => {
      console.log('enter SHARE lock1');
      try {
        await lock2.lockAsync(async () => {
          console.log('enter SHARED lock2');
          await new Promise<void>((resolve) => {
            setTimeout(() => {
              resolve();
            }, 1000);
          });
          console.log('Exit SHARED lock');
        }, ArkTSUtils.locks.AsyncLockMode.SHARED, options2);
      } catch (e) {
        count++;
        console.log(`Promise execution completed in ${count} second`);
      }
      console.log('Exit SHARED lock');
    }, ArkTSUtils.locks.AsyncLockMode.SHARED, options1);
    promises.push(promise1);
  }
  return count;
}


