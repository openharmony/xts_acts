/*
 * Copyright (c) 2024 SwanLink (Jiangsu) Technology Development Co., LTD.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, it, expect } from '@ohos/hypium';
import { collections, taskpool } from '@kit.ArkTS';
import {
  sleep,
  testUint8ClampedArrayTaskPool0001,
  testUint8ClampedArrayTaskPool0002,
  testUint8ClampedArrayTaskPool0003,
  testUint8ClampedArrayTaskPool0004,
  testUint8ClampedArrayTaskPool0005,
  testUint8ClampedArrayTaskPool0006,
  testUint8ClampedArrayTaskPool0007,
  testUint8ClampedArrayTaskPool0008,
  testUint8ClampedArrayTaskPool0009,
  testUint8ClampedArrayTaskPool0010,
  testUint8ClampedArrayTaskPool0011,
  testUint8ClampedArrayTaskPool0012,
  testUint8ClampedArrayTaskPool0013,
  testUint8ClampedArrayTaskPool0014,
  testUint8ClampedArrayTaskPool0015,
  testUint8ClampedArrayTaskPool0016,
  testUint8ClampedArrayTaskPool0017,
  testUint8ClampedArrayTaskPool0018,
  testUint8ClampedArrayTaskPool0019,
  testUint8ClampedArrayTaskPool0020,
  testUint8ClampedArrayTaskPool0021,
  testUint8ClampedArrayTaskPool0022,
  testUint8ClampedArrayTaskPool0023,
  testUint8ClampedArrayTaskPool0024,
  testUint8ClampedArrayTaskPool0025,
  testUint8ClampedArrayTaskPool0026,
  testUint8ClampedArrayTaskPool0027,
  testUint8ClampedArrayTaskPool0028,
  testUint8ClampedArrayTaskPool0029,
  testUint8ClampedArrayTaskPool0030,
  testUint8ClampedArrayTaskPool0031,
  testUint8ClampedArrayTaskPool0032,
  testUint8ClampedArrayTaskPool0033,
  testUint8ClampedArrayTaskPool0034,
  testUint8ClampedArrayTaskPool0035,
  testUint8ClampedArrayTaskPool0036,
  testUint8ClampedArrayTaskPool0037,
  testUint8ClampedArrayTaskPool0038,
  testUint8ClampedArrayTaskPool0039,
  testUint8ClampedArrayTaskPool0040,
  testUint8ClampedArrayTaskPool0041,
  testUint8ClampedArrayTaskPool0042,
  testUint8ClampedArrayTaskPool0043,
  testUint8ClampedArrayTaskPool0044,
  testUint8ClampedArrayTaskPool0045,
  testUint8ClampedArrayTaskPool0046,
  testUint8ClampedArrayTaskPool0047,
  testUint8ClampedArrayTaskPool0048,
  testUint8ClampedArrayTaskPool0049,
  testUint8ClampedArrayTaskPool0050,
  testUint8ClampedArrayTaskPool0051,
  testUint8ClampedArrayTaskPool0052,
  testUint8ClampedArrayTaskPool0053,
  testUint8ClampedArrayTaskPool0054,
  testUint8ClampedArrayTaskPool0055,
  testUint8ClampedArrayTaskPool0056,
  testUint8ClampedArrayTaskPool0057,
  testUint8ClampedArrayTaskPool0058,
  testUint8ClampedArrayTaskPool0059,
  testUint8ClampedArrayTaskPool0060,
  testUint8ClampedArrayTaskPool0061,
  testUint8ClampedArrayTaskPool0062,
  testUint8ClampedArrayTaskPool0063,
  testUint8ClampedArrayTaskPool0064,
  testUint8ClampedArrayTaskPool0065,
  testUint8ClampedArrayTaskPool0066,
  testUint8ClampedArrayTaskPool0067,
  testUint8ClampedArrayTaskPool0068,
  testUint8ClampedArrayTaskPool0069,
  testUint8ClampedArrayTaskPool0070,
  testUint8ClampedArrayTaskPool0071,
  testUint8ClampedArrayTaskPool0072,
  testUint8ClampedArrayTaskPool0073,
  testUint8ClampedArrayTaskPool0074,
  testUint8ClampedArrayTaskPool0075,
  testUint8ClampedArrayTaskPool0076,
  testUint8ClampedArrayTaskPool0077,
  testUint8ClampedArrayTaskPool0078,
  testUint8ClampedArrayTaskPool0079,
  testUint8ClampedArrayTaskPool0080,
  testUint8ClampedArrayTaskPool0081,
  testUint8ClampedArrayTaskPool0082,
  testUint8ClampedArrayTaskPool0083,
  testUint8ClampedArrayTaskPool0084,
  testUint8ClampedArrayTaskPool0085,
  testUint8ClampedArrayTaskPool0086,
  testUint8ClampedArrayTaskPool0087,
  testUint8ClampedArrayTaskPool0088,
  testUint8ClampedArrayTaskPool0089,
  testUint8ClampedArrayTaskPool0090,
  testUint8ClampedArrayTaskPool0091,
  testUint8ClampedArrayTaskPool0092,
  testUint8ClampedArrayTaskPool0093,
  testUint8ClampedArrayTaskPool0094,
  testUint8ClampedArrayTaskPool0095,
  testUint8ClampedArrayTaskPool0096,
  testUint8ClampedArrayTaskPool0097,
  testUint8ClampedArrayTaskPool0098,
  testUint8ClampedArrayTaskPool0099,
  testUint8ClampedArrayTaskPool0100,
  testUint8ClampedArrayTaskPool0101,
  testUint8ClampedArrayTaskPool0102,
  testUint8ClampedArrayTaskPool0103,
  testUint8ClampedArrayTaskPool0104,
  testUint8ClampedArrayTaskPool0105,
  testUint8ClampedArrayTaskPool0106,
  testUint8ClampedArrayTaskPool0107,
  testUint8ClampedArrayTaskPool0108,
  testUint8ClampedArrayTaskPool0109,
  testUint8ClampedArrayTaskPool0110,
  testUint8ClampedArrayTaskPool0111,
  testUint8ClampedArrayTaskPool0112,
  testUint8ClampedArrayTaskPool0113,
  testUint8ClampedArrayTaskPool0114,
  testUint8ClampedArrayTaskPool0115,
  testUint8ClampedArrayTaskPool0116,
  testUint8ClampedArrayTaskPool0117,
  testUint8ClampedArrayTaskPool0118,
  testUint8ClampedArrayTaskPool0119,
  testUint8ClampedArrayTaskPool0120,
  testUint8ClampedArrayTaskPool0121,
  testUint8ClampedArrayTaskPool0122,
  testUint8ClampedArrayTaskPool0123,
  testUint8ClampedArrayTaskPool0124,
  testUint8ClampedArrayTaskPool0125,
  testUint8ClampedArrayTaskPool0126,
  testUint8ClampedArrayTaskPool0127,
  testUint8ClampedArrayTaskPool0128,
  testUint8ClampedArrayTaskPool0129,
  testUint8ClampedArrayTaskPool0130,
  testUint8ClampedArrayTaskPool0131,
  testUint8ClampedArrayTaskPool0132,
  testUint8ClampedArrayTaskPool0133,
  testUint8ClampedArrayTaskPool0134,
  testUint8ClampedArrayTaskPool0135,
  testUint8ClampedArrayTaskPool0136,
  testUint8ClampedArrayTaskPool0137,
  testUint8ClampedArrayTaskPool0138,
  testUint8ClampedArrayTaskPool0139,
  testUint8ClampedArrayTaskPool0140,
  testUint8ClampedArrayTaskPool0141,
  testUint8ClampedArrayTaskPool0142,
  testUint8ClampedArrayTaskPool0143,
  testUint8ClampedArrayTaskPool0144,
  testUint8ClampedArrayTaskPool0145,
  testUint8ClampedArrayTaskPool0146,
  testUint8ClampedArrayTaskPool0147,
  testUint8ClampedArrayTaskPool0148,
  testUint8ClampedArrayTaskPool0149,
  testUint8ClampedArrayTaskPool0150,
  testUint8ClampedArrayTaskPool0151,
  testUint8ClampedArrayTaskPool0152,
  testUint8ClampedArrayTaskPool0153,
  testUint8ClampedArrayTaskPool0154,
  testUint8ClampedArrayTaskPool0155,
  testUint8ClampedArrayTaskPool0156,
  testUint8ClampedArrayTaskPool0157,
  testUint8ClampedArrayTaskPool0158,
  testUint8ClampedArrayTaskPool0159,
  testUint8ClampedArrayTaskPool0160,
  testUint8ClampedArrayTaskPool0161,
  testUint8ClampedArrayTaskPool0162,
  testUint8ClampedArrayTaskPool0163,
  testUint8ClampedArrayTaskPool0164,
  testUint8ClampedArrayTaskPool0165,
  testUint8ClampedArrayTaskPool0166,
  testUint8ClampedArrayTaskPool0167,
  testUint8ClampedArrayTaskPool0168,
  testUint8ClampedArrayTaskPool0169,
  testUint8ClampedArrayTaskPool0170,
  testUint8ClampedArrayTaskPool0171,
  testUint8ClampedArrayTaskPool0172,
  testUint8ClampedArrayTaskPool0173,
  testUint8ClampedArrayTaskPool0174,
  testUint8ClampedArrayTaskPool0175,
  testUint8ClampedArrayTaskPool0176,
  testUint8ClampedArrayTaskPool0177,
  testUint8ClampedArrayTaskPool0178,
  testUint8ClampedArrayTaskPool0179,
  testUint8ClampedArrayTaskPool0180,
  testUint8ClampedArrayTaskPool0181,
  testUint8ClampedArrayTaskPool0182,
  testUint8ClampedArrayTaskPool0183,
  testUint8ClampedArrayTaskPool0184,
  testUint8ClampedArrayTaskPool0185,
  testUint8ClampedArrayTaskPool0186,
  testUint8ClampedArrayTaskPool0187,
} from '../TypedArray_function/uint8ClampedArray_function';

export default function uint8ClampedArrayTaskPoolTest() {
  describe('uint8ClampedArrayTaskPoolTest', () => {
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0100
     * @tc.name       : testUint8ClampedArrayTaskPool0001
     * @tc.desc       : Testing the iterative ability of Uint8ClampedArray using a for loop in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0001', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0001';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0001).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8,9,10');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0200
     * @tc.name       : testUint8ClampedArrayTaskPool0002
     * @tc.desc       : Testing the iterative ability of Uint8ClampedArray using ... deconstruction in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0002', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0002';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0002).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8,9,10');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0300
     * @tc.name       : testUint8ClampedArrayTaskPool0003
     * @tc.desc       : Testing create an empty ArkTS TypedArray object with Uint8ClampedArray in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0003', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0003';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0003).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })


    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0400
     * @tc.name       : testUint8ClampedArrayTaskPool0004
     * @tc.desc       : Testing creation of ArkTS TypedArray object with invalid size in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0004', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0004';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0004).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0500
     * @tc.name       : testUint8ClampedArrayTaskPool0005
     * @tc.desc       : Testing ArrayLength constructs 0 parameter and checks the length in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0005', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0005';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0005).then((value) => {
            num++;
            expect(value).assertEqual(0);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0600
     * @tc.name       : testUint8ClampedArrayTaskPool0006
     * @tc.desc       : Testing ArrayLength constructs 10 parameter and checks the length in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0006', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0006';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0006).then((value) => {
            num++;
            expect(value).assertEqual(10);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0700
     * @tc.name       : testUint8ClampedArrayTaskPool0007
     * @tc.desc       : Testing ArrayLength constructs 100000 parameter and checks the length in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0007', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0007';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0007).then((value) => {
            num++;
            expect(value).assertEqual(100000);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0800
     * @tc.name       : testUint8ClampedArrayTaskPool0008
     * @tc.desc       : Testing construct an object from an ArrayLike in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0008', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0008';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0008).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_0900
     * @tc.name       : testUint8ClampedArrayTaskPool0009
     * @tc.desc       : Testing construct an object from an ArrayBuffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0009', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0009';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0009).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1000
     * @tc.name       : testUint8ClampedArrayTaskPool0010
     * @tc.desc       : Testing construct an object from another ArkTS TypedArray in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0010', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0010';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0010).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1100
     * @tc.name       : testUint8ClampedArrayTaskPool0011
     * @tc.desc       : Testing create an ArrayBuffer with an empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0011', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0011';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0011).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1200
     * @tc.name       : testUint8ClampedArrayTaskPool0012
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0012', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0012';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0012).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1300
     * @tc.name       : testUint8ClampedArrayTaskPool0013
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0013', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0013';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0013).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1400
     * @tc.name       : testUint8ClampedArrayTaskPool0014
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0014', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0014';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0014).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1500
     * @tc.name       : testUint8ClampedArrayTaskPool0015
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0015', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0015';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0015).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1600
     * @tc.name       : testUint8ClampedArrayTaskPool0016
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0016', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0016';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0016).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1700
     * @tc.name       : testUint8ClampedArrayTaskPool0017
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0017', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0017';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0017).then((value) => {
            num++;
            expect(value).assertEqual('1,2');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1800
     * @tc.name       : testUint8ClampedArrayTaskPool0018
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0018', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0018';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0018).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_1900
     * @tc.name       : testUint8ClampedArrayTaskPool0019
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0019', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0019';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0019).then((value) => {
            num++;
            expect(value).assertEqual('integerIndex < 0 or integerIndex > SAFE_NUMBER');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2000
     * @tc.name       : testUint8ClampedArrayTaskPool0020
     * @tc.desc       : Testing create an ArrayBuffer with a not empty buffer in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0020', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0020';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0020).then((value) => {
            num++;
            expect(value).assertEqual('3,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2100
     * @tc.name       : testUint8ClampedArrayTaskPool0021
     * @tc.desc       : Testing the 'from' interface with an array-like structure [1, 3, 5] in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0021', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0021';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0021).then((value) => {
            num++;
            expect(value).assertEqual('1,3,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2200
     * @tc.name       : testUint8ClampedArrayTaskPool0022
     * @tc.desc       : Testing the 'from' interface with an array-like structure [] in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0022', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0022';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0022).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2300
     * @tc.name       : testUint8ClampedArrayTaskPool0023
     * @tc.desc       : Testing the array-like map function created from an object in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0023', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0023';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0023).then((value) => {
            num++;
            expect(value).assertEqual('0,1,2,3,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2400
     * @tc.name       : testUint8ClampedArrayTaskPool0024
     * @tc.desc       : Testing the array-like map function created from a character array in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0024', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0024';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0024).then((value) => {
            num++;
            expect(value).assertEqual('1,3,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2500
     * @tc.name       : testUint8ClampedArrayTaskPool0025
     * @tc.desc       : Testing the array-like map function created from a string in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0025', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0025';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0025).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2600
     * @tc.name       : testUint8ClampedArrayTaskPool0026
     * @tc.desc       : Testing the array-like map function created from a num array in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0026', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0026';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0026).then((value) => {
            num++;
            expect(value).assertEqual('1,3,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2700
     * @tc.name       : testUint8ClampedArrayTaskPool0027
     * @tc.desc       : Testing the array-like map function created from a nesting array in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0027', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0027';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0027).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2800
     * @tc.name       : testUint8ClampedArrayTaskPool0028
     * @tc.desc       : Testing the array-like map function without specifying a mapping function in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0028', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0028';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0028).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_2900
     * @tc.name       : testUint8ClampedArrayTaskPool0029
     * @tc.desc       : Testing the array-like map function with specifying a mapping function in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0029', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0029';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0029).then((value) => {
            num++;
            expect(value).assertEqual('1,3,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3000
     * @tc.name       : testUint8ClampedArrayTaskPool0030
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself in TaskPool.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0030', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0030';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0030).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,2,3,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3100
     * @tc.name       : testUint8ClampedArrayTaskPool0031
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0031', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0031';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0031).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3200
     * @tc.name       : testUint8ClampedArrayTaskPool0032
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0032', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0032';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0032).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,1');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3300
     * @tc.name       : testUint8ClampedArrayTaskPool0033
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0033', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0033';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0033).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3400
     * @tc.name       : testUint8ClampedArrayTaskPool0034
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0034', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0034';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0034).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,1');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3500
     * @tc.name       : testUint8ClampedArrayTaskPool0035
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0035', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0035';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0035).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,1');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3600
     * @tc.name       : testUint8ClampedArrayTaskPool0036
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0036', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0036';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0036).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,3');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3700
     * @tc.name       : testUint8ClampedArrayTaskPool0037
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0037', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0037';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0037).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3800
     * @tc.name       : testUint8ClampedArrayTaskPool0038
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0038', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0038';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0038).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_3900
     * @tc.name       : testUint8ClampedArrayTaskPool0039
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0039', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0039';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0039).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,3');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4000
     * @tc.name       : testUint8ClampedArrayTaskPool0040
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0040', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0040';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0040).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4100
     * @tc.name       : testUint8ClampedArrayTaskPool0041
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0041', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0041';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0041).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4200
     * @tc.name       : testUint8ClampedArrayTaskPool0042
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0042', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0042';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0042).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4300
     * @tc.name       : testUint8ClampedArrayTaskPool0043
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0043', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0043';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0043).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4400
     * @tc.name       : testUint8ClampedArrayTaskPool0044
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0044', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0044';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0044).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4500
     * @tc.name       : testUint8ClampedArrayTaskPool0045
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0045', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0045';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0045).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4600
     * @tc.name       : testUint8ClampedArrayTaskPool0046
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0046', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0046';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0046).then((value) => {
            num++;
            expect(value).assertEqual('3,4,5,6,7,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4700
     * @tc.name       : testUint8ClampedArrayTaskPool0047
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0047', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0047';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0047).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4800
     * @tc.name       : testUint8ClampedArrayTaskPool0048
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0048', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0048';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0048).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_4900
     * @tc.name       : testUint8ClampedArrayTaskPool0049
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0049', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0049';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0049).then((value) => {
            num++;
            expect(value).assertEqual('3,4,5,6,7,8,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5000
     * @tc.name       : testUint8ClampedArrayTaskPool0050
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0050', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0050';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0050).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5100
     * @tc.name       : testUint8ClampedArrayTaskPool0051
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0051', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0051';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0051).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5200
     * @tc.name       : testUint8ClampedArrayTaskPool0052
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0052', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0052';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0052).then((value) => {
            num++;
            expect(value).assertEqual('1,2,1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5300
     * @tc.name       : testUint8ClampedArrayTaskPool0053
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0053', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0053';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0053).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5400
     * @tc.name       : testUint8ClampedArrayTaskPool0054
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0054', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0054';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0054).then((value) => {
            num++;
            expect(value).assertEqual('1,2,1,2,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5500
     * @tc.name       : testUint8ClampedArrayTaskPool0055
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0055', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0055';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0055).then((value) => {
            num++;
            expect(value).assertEqual('1,2,1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5600
     * @tc.name       : testUint8ClampedArrayTaskPool0056
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0056', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0056';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0056).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5700
     * @tc.name       : testUint8ClampedArrayTaskPool0057
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0057', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0057';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0057).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5800
     * @tc.name       : testUint8ClampedArrayTaskPool0058
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0058', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0058';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0058).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_5900
     * @tc.name       : testUint8ClampedArrayTaskPool0059
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0059', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0059';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0059).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6000
     * @tc.name       : testUint8ClampedArrayTaskPool0060
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0060', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0060';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0060).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6100
     * @tc.name       : testUint8ClampedArrayTaskPool0061
     * @tc.desc       : Testing the copyWithin function to copy part of the array within itself.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0061', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0061';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0061).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6,7,8');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6200
     * @tc.name       : testUint8ClampedArrayTaskPool0062
     * @tc.desc       : Testing whether it returns true when there are elements that meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0062', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0062';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0062).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6300
     * @tc.name       : testUint8ClampedArrayTaskPool0063
     * @tc.desc       : Testing whether it returns false when no elements meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0063', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0063';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0063).then((value) => {
            num++;
            expect(value).assertEqual(false);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6400
     * @tc.name       : testUint8ClampedArrayTaskPool0064
     * @tc.desc       : Testing whether it returns true when all elements that meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0064', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0064';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0064).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6500
     * @tc.name       : testUint8ClampedArrayTaskPool0065
     * @tc.desc       : Testing whether it returns true when all elements that meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0065', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0065';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0065).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6600
     * @tc.name       : testUint8ClampedArrayTaskPool0066
     * @tc.desc       : Testing whether it returns false when not all elements meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0066', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0066';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0066).then((value) => {
            num++;
            expect(value).assertEqual(false);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6700
     * @tc.name       : testUint8ClampedArrayTaskPool0067
     * @tc.desc       : Testing whether it returns false when no elements meet the specified conditions.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0067', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0067';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0067).then((value) => {
            num++;
            expect(value).assertEqual(false);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6800
     * @tc.name       : testUint8ClampedArrayTaskPool0068
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0068', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0068';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0068).then((value) => {
            num++;
            expect(value).assertEqual('4,4,4,1,4,4,1,4,3');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_6900
     * @tc.name       : testUint8ClampedArrayTaskPool0069
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0069', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0069';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0069).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7000
     * @tc.name       : testUint8ClampedArrayTaskPool0070
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0070', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0070';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0070).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7100
     * @tc.name       : testUint8ClampedArrayTaskPool0071
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0071', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0071';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0071).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7200
     * @tc.name       : testUint8ClampedArrayTaskPool0072
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0072', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0072';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0072).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7300
     * @tc.name       : testUint8ClampedArrayTaskPool0073
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0073', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0073';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0073).then((value) => {
            num++;
            expect(value).assertEqual('4,4,4,4,4,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7400
     * @tc.name       : testUint8ClampedArrayTaskPool0074
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0074', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0074';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0074).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7500
     * @tc.name       : testUint8ClampedArrayTaskPool0075
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0075', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0075';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0075).then((value) => {
            num++;
            expect(value).assertEqual('4,4,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7600
     * @tc.name       : testUint8ClampedArrayTaskPool0076
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0076', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0076';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0076).then((value) => {
            num++;
            expect(value).assertEqual('4,4,4,4,4,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7700
     * @tc.name       : testUint8ClampedArrayTaskPool0077
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0077', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0077';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0077).then((value) => {
            num++;
            expect(value).assertEqual('1,2,4,4,4,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7800
     * @tc.name       : testUint8ClampedArrayTaskPool0078
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0078', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0078';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0078).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_7900
     * @tc.name       : testUint8ClampedArrayTaskPool0079
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0079', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0079';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0079).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8000
     * @tc.name       : testUint8ClampedArrayTaskPool0080
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0080', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0080';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0080).then((value) => {
            num++;
            expect(value).assertEqual('1,2,4,4,4,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8100
     * @tc.name       : testUint8ClampedArrayTaskPool0081
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0081', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0081';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0081).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8200
     * @tc.name       : testUint8ClampedArrayTaskPool0082
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0082', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0082';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0082).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8300
     * @tc.name       : testUint8ClampedArrayTaskPool0083
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0083', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0083';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0083).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8400
     * @tc.name       : testUint8ClampedArrayTaskPool0084
     * @tc.desc       : Testing the filling of an ArkTS TypedArray within a specified range with specific values.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0084', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0084';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0084).then((value) => {
            num++;
            expect(value).assertEqual('1,2,3,4,5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8500
     * @tc.name       : testUint8ClampedArrayTaskPool0085
     * @tc.desc       : Testing if filter returns a new ArkTS TypedArray with elements that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0085', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0085';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0085).then((value) => {
            num++;
            expect(value).assertEqual('0,2,4');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8600
     * @tc.name       : testUint8ClampedArrayTaskPool0086
     * @tc.desc       : Testing if filter returns a new ArkTS TypedArray with elements that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0086', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0086';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0086).then((value) => {
            num++;
            expect(value).assertEqual(0);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8700
     * @tc.name       : testUint8ClampedArrayTaskPool0087
     * @tc.desc       : Testing if filter returns a new ArkTS TypedArray with elements that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0087', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0087';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0087).then((value) => {
            num++;
            expect(value).assertEqual(' after set is 5,6');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8800
     * @tc.name       : testUint8ClampedArrayTaskPool0088
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0088', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0088';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0088).then((value) => {
            num++;
            expect(value).assertEqual(3);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_8900
     * @tc.name       : testUint8ClampedArrayTaskPool0089
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0089', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0089';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0089).then((value) => {
            num++;
            expect(value).assertEqual(undefined);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9000
     * @tc.name       : testUint8ClampedArrayTaskPool0090
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0090', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0090';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0090).then((value) => {
            num++;
            expect(value).assertEqual('undefined,5');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9100
     * @tc.name       : testUint8ClampedArrayTaskPool0091
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0091', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0091';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0091).then((value) => {
            num++;
            expect(value).assertEqual(undefined);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9200
     * @tc.name       : testUint8ClampedArrayTaskPool0092
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0092', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0092';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0092).then((value) => {
            num++;
            expect(value).assertEqual(0);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9300
     * @tc.name       : testUint8ClampedArrayTaskPool0093
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0093', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0093';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0093).then((value) => {
            num++;
            expect(value).assertEqual(undefined);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9400
     * @tc.name       : testUint8ClampedArrayTaskPool0094
     * @tc.desc       : Testing if find returns a new ArkTS TypedArray with the first element that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0094', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0094';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0094).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9500
     * @tc.name       : testUint8ClampedArrayTaskPool0095
     * @tc.desc       : Testing if findIndex returns the first element index that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0095', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0095';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0095).then((value) => {
            num++;
            expect(value).assertEqual(-1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9600
     * @tc.name       : testUint8ClampedArrayTaskPool0096
     * @tc.desc       : Testing if findIndex returns the first element index that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0096', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0096';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0096).then((value) => {
            num++;
            expect(value).assertEqual(1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9700
     * @tc.name       : testUint8ClampedArrayTaskPool0097
     * @tc.desc       : Testing if findIndex returns the first element index that meet the criteria.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0097', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0097';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0097).then((value) => {
            num++;
            expect(value).assertEqual(-1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9800
     * @tc.name       : testUint8ClampedArrayTaskPool0098
     * @tc.desc       : Testing if forEach executes the provided callback function for each element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0098', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0098';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0098).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_9900
     * @tc.name       : testUint8ClampedArrayTaskPool0099
     * @tc.desc       : Testing if forEach executes the provided callback function for each element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0099', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0099';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0099).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10000
     * @tc.name       : testUint8ClampedArrayTaskPool0100
     * @tc.desc       : Testing if forEach executes the provided callback function for each element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0100', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0100';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0100).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10100
     * @tc.name       : testUint8ClampedArrayTaskPool0101
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0101', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0101';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0101).then((value) => {
            num++;
            expect(value).assertEqual(-1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10200
     * @tc.name       : testUint8ClampedArrayTaskPool0102
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0102', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0102';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0102).then((value) => {
            num++;
            expect(value).assertEqual(-1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10300
     * @tc.name       : testUint8ClampedArrayTaskPool0103
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0103', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0103';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0103).then((value) => {
            num++;
            expect(value).assertEqual(1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10400
     * @tc.name       : testUint8ClampedArrayTaskPool0104
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0104', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0104';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0104).then((value) => {
            num++;
            expect(value).assertEqual(9);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10500
     * @tc.name       : testUint8ClampedArrayTaskPool0105
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0105', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0105';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0105).then((value) => {
            num++;
            expect(value).assertEqual(6);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10600
     * @tc.name       : testUint8ClampedArrayTaskPool0106
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0106', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0106';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0106).then((value) => {
            num++;
            expect(value).assertEqual(2);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10700
     * @tc.name       : testUint8ClampedArrayTaskPool0107
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0107', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0107';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0107).then((value) => {
            num++;
            expect(value).assertEqual(3);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10800
     * @tc.name       : testUint8ClampedArrayTaskPool0108
     * @tc.desc       : Testing whether indexOf returns the first index of the given element or -1 if it does not exist.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0108', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0108';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0108).then((value) => {
            num++;
            expect(value).assertEqual(-1);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_10900
     * @tc.name       : testUint8ClampedArrayTaskPool0109
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0109', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0109';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0109).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11000
     * @tc.name       : testUint8ClampedArrayTaskPool0110
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0110', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0110';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0110).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11100
     * @tc.name       : testUint8ClampedArrayTaskPool0111
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0111', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0111';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0111).then((value) => {
            num++;
            expect(value).assertEqual("1,2,3,4,5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11200
     * @tc.name       : testUint8ClampedArrayTaskPool0112
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0112', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0112';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0112).then((value) => {
            num++;
            expect(value).assertEqual("12345");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11300
     * @tc.name       : testUint8ClampedArrayTaskPool0113
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0113', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0113';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0113).then((value) => {
            num++;
            expect(value).assertEqual("1,2,3,4,5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11400
     * @tc.name       : testUint8ClampedArrayTaskPool0114
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0114', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0114';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0114).then((value) => {
            num++;
            expect(value).assertEqual("1/2/3/4/5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11500
     * @tc.name       : testUint8ClampedArrayTaskPool0115
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0115', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0115';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0115).then((value) => {
            num++;
            expect(value).assertEqual("1,。￥·2,。￥·3,。￥·4,。￥·5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11600
     * @tc.name       : testUint8ClampedArrayTaskPool0116
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0116', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0116';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0116).then((value) => {
            num++;
            expect(value).assertEqual("1녕하こんйте2녕하こんйте3녕하こんйте4녕하こんйте5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11700
     * @tc.name       : testUint8ClampedArrayTaskPool0117
     * @tc.desc       : Testing concatenation of all elements into a string with a specified delimiter.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0117', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0117';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0117).then((value) => {
            num++;
            expect(value).assertEqual("1，2，3，4，5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11800
     * @tc.name       : testUint8ClampedArrayTaskPool0118
     * @tc.desc       : Testing applying a callback function to each element to create a new ArkTS TypedArray.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0118', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0118';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0118).then((value) => {
            num++;
            expect(value).assertEqual("");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_11900
     * @tc.name       : testUint8ClampedArrayTaskPool0119
     * @tc.desc       : Testing applying a callback function to each element to create a new ArkTS TypedArray.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0119', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0119';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0119).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12000
     * @tc.name       : testUint8ClampedArrayTaskPool0120
     * @tc.desc       : Testing applying a callback function to each element to create a new ArkTS TypedArray.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0120', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0120';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0120).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12100
     * @tc.name       : testUint8ClampedArrayTaskPool0121
     * @tc.desc       : Testing a reduction function on each element and returning the final result.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0121', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0121';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0121).then((value) => {
            num++;
            expect(value).assertEqual('out of range.');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12200
     * @tc.name       : testUint8ClampedArrayTaskPool0122
     * @tc.desc       : Testing a reduction function on each element and returning the final result.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0122', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0122';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0122).then((value) => {
            num++;
            expect(value).assertEqual(15);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12300
     * @tc.name       : testUint8ClampedArrayTaskPool0123
     * @tc.desc       : Testing a reduction function on each element and returning the final result.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0123', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0123';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0123).then((value) => {
            num++;
            expect(value).assertEqual(23);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12400
     * @tc.name       : testUint8ClampedArrayTaskPool0124
     * @tc.desc       : Testing a reduction function on each element and returning the final result.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0124', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0124';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0124).then((value) => {
            num++;
            expect(value).assertEqual('initialValue12345');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12500
     * @tc.name       : testUint8ClampedArrayTaskPool0125
     * @tc.desc       : Testing reverse.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0125', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0125';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0125).then((value) => {
            num++;
            expect(value).assertEqual('');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12600
     * @tc.name       : testUint8ClampedArrayTaskPool0126
     * @tc.desc       : Testing reverse.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0126', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0126';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0126).then((value) => {
            num++;
            expect(value).assertEqual('5,4,3,2,1');
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12700
     * @tc.name       : testUint8ClampedArrayTaskPool0127
     * @tc.desc       : Testing reverse.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0127', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0127';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0127).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12800
     * @tc.name       : testUint8ClampedArrayTaskPool0128
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is null
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0128', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0128';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0128).then((value) => {
            num++;
            expect(value).assertEqual("1,3,5,0,0,0,0,0");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_12900
     * @tc.name       : testUint8ClampedArrayTaskPool0129
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is null, forEach succeed.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0129', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0129';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0129).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13000
     * @tc.name       : testUint8ClampedArrayTaskPool0130
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is -1, return failed.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0130', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0130';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0130).then((value) => {
            num++;
            expect(value).assertEqual("The targetOffset of This value is less than 0.");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13100
     * @tc.name       : testUint8ClampedArrayTaskPool0131
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is 0
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0131', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0131';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0131).then((value) => {
            num++;
            expect(value).assertEqual("1,3,5,0,0,0,0,0");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13200
     * @tc.name       : testUint8ClampedArrayTaskPool0132
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is 0, forEach succeed.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0132', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0132';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0132).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13300
     * @tc.name       : testUint8ClampedArrayTaskPool0133
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is 2.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0133', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0133';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0133).then((value) => {
            num++;
            expect(value).assertEqual("0,0,1,3,5,0,0,0");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13400
     * @tc.name       : testUint8ClampedArrayTaskPool0134
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is 2, forEach succeed.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0134', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0134';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0134).then((value) => {
            num++;
            expect(value).assertEqual(true);
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13500
     * @tc.name       : testUint8ClampedArrayTaskPool0135
     * @tc.desc       : Testing the set of uint8ClampedArray, offset is 10(overstep), return failed.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0135', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0135';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0135).then((value) => {
            num++;
            expect(value).assertEqual("The sum of length and targetOffset is greater than targetLength.");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13600
     * @tc.name       : testUint8ClampedArrayTaskPool0136
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is null, start is 1, end is 3.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0136', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0136';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0136).then((value) => {
            num++;
            expect(value).assertEqual("");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13700
     * @tc.name       : testUint8ClampedArrayTaskPool0137
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is null, parameter is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0137', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0137';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0137).then((value) => {
            num++;
            expect(value).assertEqual("");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13800
     * @tc.name       : testUint8ClampedArrayTaskPool0138
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0138', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0138';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0138).then((value) => {
            num++;
            expect(value).assertEqual("1,2,3,4,5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_13900
     * @tc.name       : testUint8ClampedArrayTaskPool0139
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0139', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0139';
      console.info(`${caseName} test start`);
      let num = 0;
      try {
        for (let i = 0; i < 10; i++) {
          taskpool.execute(testUint8ClampedArrayTaskPool0139).then((value) => {
            num++;
            expect(value).assertEqual("1,2,3,4,5");
          });
        }
        while (num < 10) {
          await sleep(100);
        }
      } catch (err) {
        console.error(`${caseName} failed, error: ${err.message}`);
        expect().assertFail();
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14000
     * @tc.name       : testUint8ClampedArrayTaskPool0140
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0140', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0140';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0140).then((value) => {
          num++;
          expect(value).assertEqual("5");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14100
     * @tc.name       : testUint8ClampedArrayTaskPool0141
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, start is -1, end is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0141', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0141';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0141).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14200
     * @tc.name       : testUint8ClampedArrayTaskPool0142
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, start is -1, end is 0.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0142', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0142';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0142).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14300
     * @tc.name       : testUint8ClampedArrayTaskPool0143
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, start is 0, end is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0143', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0143';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0143).then((value) => {
          num++;
          expect(value).assertEqual("1,2,3,4");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14400
     * @tc.name       : testUint8ClampedArrayTaskPool0144
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is 2.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0144', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0144';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0144).then((value) => {
          num++;
          expect(value).assertEqual("3,4,5");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14500
     * @tc.name       : testUint8ClampedArrayTaskPool0145
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is 10(overstep).
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0145', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0145';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0145).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14600
     * @tc.name       : testUint8ClampedArrayTaskPool0146
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is 10(overstep).
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0146', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0146';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0146).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14700
     * @tc.name       : testUint8ClampedArrayTaskPool0147
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, parameter is 10(overstep).
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0147', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0147';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0147).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14800
     * @tc.name       : testUint8ClampedArrayTaskPool0148
     * @tc.desc       : Testing the Slice of uint8ClampedArray, array is not null, start is 2, end is 4.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0148', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0148';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0148).then((value) => {
          num++;
          expect(value).assertEqual("3,4");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_14900
     * @tc.name       : testUint8ClampedArrayTaskPool0149
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is null, parameter is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0149', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0149';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0149).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15000
     * @tc.name       : testUint8ClampedArrayTaskPool0150
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0150', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0150';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0150).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15100
     * @tc.name       : testUint8ClampedArrayTaskPool0151
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is not null, parameter is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0151', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0151';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0151).then((value) => {
          num++;
          expect(value).assertEqual("1,2,3,4,5");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15200
     * @tc.name       : testUint8ClampedArrayTaskPool0152
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is not null, parameter is undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0152', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0152';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0152).then((value) => {
          num++;
          expect(value).assertEqual("1,2,3,4,5");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15300
     * @tc.name       : testUint8ClampedArrayTaskPool0153
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is not null, parameter is grade down.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0153', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0153';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0153).then((value) => {
          num++;
          expect(value).assertEqual("5,4,3,2,1");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15400
     * @tc.name       : testUint8ClampedArrayTaskPool0154
     * @tc.desc       : Testing the sort of uint8ClampedArray, array is not null, set.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0154', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0154';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0154).then((value) => {
          num++;
          expect(value).assertEqual("2,5,7,8,9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15500
     * @tc.name       : testUint8ClampedArrayTaskPool0155
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, parameter is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0155', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0155';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0155).then((value) => {
          num++;
          expect(value).assertEqual("1,3,5,7,9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15600
     * @tc.name       : testUint8ClampedArrayTaskPool0156
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is -1, end is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0156', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0156';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0156).then((value) => {
          num++;
          expect(value).assertEqual("9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15700
     * @tc.name       : testUint8ClampedArrayTaskPool0157
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is -1, end is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0157', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0157';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0157).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15800
     * @tc.name       : testUint8ClampedArrayTaskPool0158
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is -1, end is 2.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0158', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0158';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0158).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_15900
     * @tc.name       : testUint8ClampedArrayTaskPool0159
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is -1, end is overstep.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0159', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0159';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0159).then((value) => {
          num++;
          expect(value).assertEqual("9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16000
     * @tc.name       : testUint8ClampedArrayTaskPool0160
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is 2, end is null.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0160', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0160';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0160).then((value) => {
          num++;
          expect(value).assertEqual("5,7,9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16100
     * @tc.name       : testUint8ClampedArrayTaskPool0161
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is 2, end is -1.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0161', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0161';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0161).then((value) => {
          num++;
          expect(value).assertEqual("5,7");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16200
     * @tc.name       : testUint8ClampedArrayTaskPool0162
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is 2, end is 2.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0162', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0162';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0162).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16300
     * @tc.name       : testUint8ClampedArrayTaskPool0163
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is 2, end is overstep.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0163', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0163';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0163).then((value) => {
          num++;
          expect(value).assertEqual("5,7,9");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16400
     * @tc.name       : testUint8ClampedArrayTaskPool0164
     * @tc.desc       : Testing the subarray of uint8ClampedArray, array is not null, begin is overstep, end is overstep.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0164', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0164';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0164).then((value) => {
          num++;
          expect(value).assertEqual("");
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16500
     * @tc.name       : testUint8ClampedArrayTaskPool0165
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [], at(1), return undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0165', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0165';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0165).then((value) => {
          num++;
          expect(value).assertEqual('undefined');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16600
     * @tc.name       : testUint8ClampedArrayTaskPool0166
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], at(3), return undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0166', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0166';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0166).then((value) => {
          num++;
          expect(value).assertEqual('undefined');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16700
     * @tc.name       : testUint8ClampedArrayTaskPool0167
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], at(-1), return element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0167', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0167';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0167).then((value) => {
          num++;
          expect(value).assertEqual(3);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16800
     * @tc.name       : testUint8ClampedArrayTaskPool0168
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], at(5), return undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0168', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0168';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0168).then((value) => {
          num++;
          expect(value).assertEqual('undefined');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_16900
     * @tc.name       : testUint8ClampedArrayTaskPool0169
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], at(0), return element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0169', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0169';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0169).then((value) => {
          num++;
          expect(value).assertEqual(1);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17000
     * @tc.name       : testUint8ClampedArrayTaskPool0170
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [], includes(2), return false.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0170', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0170';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0170).then((value) => {
          num++;
          expect(value).assertEqual(false);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17100
     * @tc.name       : testUint8ClampedArrayTaskPool0171
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], includes(5,-1), return false.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0171', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0171';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0171).then((value) => {
          num++;
          expect(value).assertEqual(false);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17200
     * @tc.name       : testUint8ClampedArrayTaskPool0172
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], includes(3,-1), return true.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0172', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0172';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0172).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17300
     * @tc.name       : testUint8ClampedArrayTaskPool0173
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], includes(10), return false.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0173', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0173';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0173).then((value) => {
          num++;
          expect(value).assertEqual(false);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17400
     * @tc.name       : testUint8ClampedArrayTaskPool0174
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], includes(1), return true.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0174', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0174';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0174).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17500
     * @tc.name       : testUint8ClampedArrayTaskPool0175
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], includes(1,5), return false.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0175', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0175';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0175).then((value) => {
          num++;
          expect(value).assertEqual(false);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17600
     * @tc.name       : testUint8ClampedArrayTaskPool0176
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [], entries(), undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0176', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0176';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0176).then((value) => {
          num++;
          expect(value).assertEqual('undefined');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17700
     * @tc.name       : testUint8ClampedArrayTaskPool0177
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], entries().
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0177', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0177';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0177).then((value) => {
          num++;
          expect(value).assertEqual('0,1');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17800
     * @tc.name       : testUint8ClampedArrayTaskPool0178
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [], keys().
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0178', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0178';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0178).then((value) => {
          num++;
          expect(value).assertEqual(0);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_17900
     * @tc.name       : testUint8ClampedArrayTaskPool0179
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], keys(),iterator.next().value.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0179', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0179';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0179).then((value) => {
          num++;
          expect(value).assertEqual('0,1,2');
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18000
     * @tc.name       : testUint8ClampedArrayTaskPool0180
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], keys(),for iterator.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0180', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0180';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0180).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18100
     * @tc.name       : testUint8ClampedArrayTaskPool0181
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [], values().
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0181', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0181';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0181).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18200
     * @tc.name       : testUint8ClampedArrayTaskPool0182
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], values(),iterator.next().
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0182', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0182';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0182).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18300
     * @tc.name       : testUint8ClampedArrayTaskPool0183
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], values(),for value iterator.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0183', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0183';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0183).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18400
     * @tc.name       : testUint8ClampedArrayTaskPool0184
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], set array,values(),for value iterator.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0184', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0184';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0184).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18500
     * @tc.name       : testUint8ClampedArrayTaskPool0185
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], index < 0, array[index] = undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0185', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0185';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0185).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18600
     * @tc.name       : testUint8ClampedArrayTaskPool0186
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], index > arrayLength, array[index] = undefined.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0186', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0186';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0186).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    });

    /**
     * @tc.number     : SUB_COMMONLIBRARY_UTIL_BASE_UINT8CLAMPED_ARRAY_TASK_POOL_18700
     * @tc.name       : testUint8ClampedArrayTaskPool0187
     * @tc.desc       : Testing Collections of Uint8ClampedArray, array is [1,2,3], 0 <= index < arrayLength, array[index] = array element.
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testUint8ClampedArrayTaskPool0187', 0, async () => {
      const caseName = 'testUint8ClampedArrayTaskPool0187';
      console.info(`${caseName} test start`);
      let num = 0;
      for (let i = 0; i < 10; i++) {
        taskpool.execute(testUint8ClampedArrayTaskPool0187).then((value) => {
          num++;
          expect(value).assertEqual(true);
        });
      }
      while (num < 10) {
        await sleep(100);
      }
      console.info(`${caseName} test end`);
    })
  })
}