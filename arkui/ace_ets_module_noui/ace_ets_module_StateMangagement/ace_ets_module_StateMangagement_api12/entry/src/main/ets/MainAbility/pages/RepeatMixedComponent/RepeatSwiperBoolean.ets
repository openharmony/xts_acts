/**
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Entry
@ComponentV2
struct RepeatSwiperBoolean {
  @Local simpleList1: Array<boolean> = [];
  @Local simpleList2: Array<boolean> = [];
  @Local tmp1: number = 0;
  @Local tmp2: number = 0;
  private swiperController: SwiperController = new SwiperController()
  private swiperController1: SwiperController = new SwiperController()

  aboutToAppear(): void {
    for (let i = 0; i < 10; i++) {
      this.simpleList1.push(i % 2 === 0);
      this.simpleList2.push(i % 2 === 0);
    }
  }

  build() {
    Column({ space: 10 }) {
      Text('Non-VirtualScroll场景 父容器Swiper组件')
        .fontSize(15)
        .fontColor(Color.Gray)
      Swiper(this.swiperController) {
        Repeat<boolean>(this.simpleList1)
          .each((ri) => {
            Text(ri.item.toString() + ' index:' + ri.index.toString() + ':' + this.tmp2.toString())
              .id('Text1' + ri.index.toString())
              .fontSize(20)
              .height('30%')
              .border({ width: 1 })
              .backgroundColor(Color.Pink)
          })
          .key((service: boolean, index: number): string => index + service.toString())
      }
      .loop(false)
      .displayMode(SwiperDisplayMode.STRETCH)
      .nextMargin(30, true)
      .displayCount(3)
      .autoPlay(false)
      .interval(1000)
      .width('90%')
      .height('40%')
      .border({ width: 1 })

      Row() {
        Button('next1 page').id('Button1')
          .onClick(() => {
            this.swiperController.showNext()
          })
        Button('next2 page')
          .id('Button2')
          .onClick(() => {
            this.swiperController1.showNext()
          })
      }

      Text('Has-VirtualScroll场景 Swiper组件')
        .fontSize(15)
        .fontColor(Color.Gray)
      Swiper(this.swiperController1) {
        Repeat<boolean>(this.simpleList2)
          .each((ri) => {
            Text(ri.item.toString() + ' index:' + ri.index.toString() + ':' + this.tmp2.toString())
              .id('Text2' + ri.index.toString())
              .fontSize(20)
              .height('30%')
              .border({ width: 1 })
              .backgroundColor(Color.Green)
          })
          .key((service: boolean, index: number): string => index + service.toString())
          .templateId((item, index) => {
            if (index > 6) {
              return 'number'
            } else {
              return 'each'
            }
          })
          .template('number', (r) => {
            Text(r.item.toString() + ' index:' + r.index.toString() + ':' + (this.tmp2 = 99).toString())
              .id('Text2' + r.index.toString())
              .fontSize(20)
              .height('30%')
              .border({ width: 1 })
              .backgroundColor(Color.Green)
          })
          .virtualScroll()
      }
      .loop(false)
      .displayMode(SwiperDisplayMode.STRETCH)
      .nextMargin(30, true)
      .displayCount(3)
      .autoPlay(false)
      .interval(1000)
      .width('90%')
      .height('40%')
      .border({ width: 1 })

    }
    .width('100%')
    .height('60%')
    .justifyContent(FlexAlign.Center)
  }
}
