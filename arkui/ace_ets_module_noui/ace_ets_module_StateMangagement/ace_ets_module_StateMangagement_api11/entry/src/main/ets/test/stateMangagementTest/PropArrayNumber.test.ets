/**
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
import router from '@ohos.router';
import {
  UiComponent,
  UiDriver,
  Component,
  Driver,
  UiWindow,
  ON,
  BY,
  MatchPattern,
  DisplayRotation,
  ResizeDirection,
  WindowMode,
  PointerMatrix
} from '@ohos.UiTest';
import CommonFunc from '../../MainAbility/common/Common'

export default function PropArrayNumber() {
  describe('PropArrayNumber', () => {
    beforeEach(async (done: Function) => {
      console.info("PropArrayNumber beforeEach start");
      let options: router.RouterOptions = {
        url: 'MainAbility/pages/stateMangagement/PropArrayNumber',
      }
      try {
        router.clear();
        let pages = router.getState();
        console.info("get PropArrayNumber state pages: " + JSON.stringify(pages));
        if (!("PropArrayNumber" == pages.name)) {
          console.info("get PropArrayNumber state pages.name: " + JSON.stringify(pages.name));
          let result = await router.pushUrl(options);
          await CommonFunc.sleep(2000);
          console.info("push PropArrayNumber success: " + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push PropArrayNumber page error: " + err);
        expect().assertFail();
      }
      done();
    });
    /* *
    * @tc.number: PropArrayNumber_0100
    * @tc.name  : PropArrayNumber_0100
    * @tc.desc  : Test if the state decorator supports PropArrayNumber types.
    * @tc.level : Level 2
    * @tc.type :
    * @tc.size :
    */
    it('PropArrayNumber_0100', 0, async (done: Function) => {
      console.info('PropArrayNumber_0100 START');
      let driver: Driver = await Driver.create()
      await CommonFunc.sleep(1000);
      let btn_init = await driver.findComponent(ON.id('propArrayNumber_init'));
      await btn_init.click();
      await CommonFunc.sleep(1000);
      let button = await driver.findComponent(ON.id('propArrayNumber_add'));
      await button.click();
      await CommonFunc.sleep(1000);
      let strJson: string = getInspectorByKey('propArrayNumber_value_3');
      console.info("[PropArrayNumber_0100] component JSON.parse(strJson) is: " + JSON.stringify(JSON.parse(strJson)));
      console.info("[PropArrayNumber_0100] value: " + JSON.stringify(JSON.parse(strJson).$attrs.content));
      expect(JSON.parse(strJson).$attrs.content).assertEqual('4 index: 3');
      console.info('[PropArrayNumber_0100] END');
      done();
    });
    /* *
    * @tc.number: PropArrayNumber_0200
    * @tc.name  : PropArrayNumber_0200
    * @tc.desc  : Test if the state decorator supports PropArrayNumber types.
    * @tc.level : Level 2
    * @tc.type :
    * @tc.size :
    */
    it('PropArrayNumber_0200', 0, async (done: Function) => {
      console.info('PropArrayNumber_0200 START');
      let driver: Driver = await Driver.create()
      await CommonFunc.sleep(1000);
      let btn_init = await driver.findComponent(ON.id('propArrayNumber_init'));
      await btn_init.click();
      await CommonFunc.sleep(1000);
      let button = await driver.findComponent(ON.id('propArrayNumber_clear'));
      await button.click();
      await CommonFunc.sleep(1000);
      let strJson: string = getInspectorByKey('propArrayNumber_value_0');
      console.info("[PropArrayNumber_0200] component JSON.parse(strJson) is: " + JSON.stringify(JSON.parse(strJson)));
      console.info("[PropArrayNumber_0200] value: " + JSON.stringify(JSON.parse(strJson).$attrs.content));
      expect(JSON.parse(strJson).$attrs.content).assertEqual('0 index: 0');
      console.info('[PropArrayNumber_0200] END');
      done();
    });
    /* *
    * @tc.number: PropArrayNumber_0300
    * @tc.name  : PropArrayNumber_0300
    * @tc.desc  : Test if the state decorator supports PropArrayNumber types.
    * @tc.level : Level 2
    * @tc.type :
    * @tc.size :
    */
    it('PropArrayNumber_0300', 0, async (done: Function) => {
      console.info('PropArrayNumber_0300 START');
      let driver: Driver = await Driver.create()
      await CommonFunc.sleep(1000);
      let btn_init = await driver.findComponent(ON.id('propArrayNumber_init'));
      await btn_init.click();
      await CommonFunc.sleep(1000);
      let button = await driver.findComponent(ON.id('propArrayNumber_delete'));
      await button.click();
      await CommonFunc.sleep(1000);
      let strJson: string = getInspectorByKey('propArrayNumber_value_1');
      console.info("[PropArrayNumber_0300] value: " + JSON.stringify(JSON.parse(strJson).$attrs.content));
      expect(JSON.parse(strJson).$attrs.content).assertEqual('3 index: 1');
      console.info('[PropArrayNumber_0300] END');
      done();
    });
  })
}