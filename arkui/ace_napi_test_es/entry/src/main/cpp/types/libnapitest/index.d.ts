/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export const External: () => Int8Array;
export const DetachTest: (para: Int8Array) => void;
export const IsDetachedTest: (para: ArrayBuffer) => number;
export const stopEventLoop: (para: number) => number;
export const NapiDefineSendableClass: () => object | number;
export const BufferCopy: () => string;
export const testStr:string;
export const createAsyncResource: (para1, para2?:boolean) => object;
export const destroyAsyncResource: (para: object) => object;
export const runInCallbackScope: (para1: object, para2: string, para3: Function) => number;
export const testResolveAsync: () => Promise<string>;
export const napiSetInstanceData: () => number;
export const asyncWorkCallback: (para: object) => object;
export const napiAsyncCleanUpHook: () => object;
export const napiEnvCleanUpHook: () => object;
export const getModuleFileName: () => string;
export const NapiIsSendable: (para: object | number) => boolean;
export const NapiCreateSendableObject: () => object;
export const NapiCreateSendableArray: () => Array<string>;
export const NapiCreateSendableArrayWithLength: () => Array<string>;
export const NapiCreateSendableArrayBuffer: () => ArrayBuffer;
export const NapiCreateSendableTypedArray: () => ArrayBuffer;
export const NapiWrapSendable: (para1:object, para2:string) => void;
export const NapiUnwrapSendable: (para:object) => string;
export const NapiRemoveWrapSendable: (para:object) => string;
export const NapiWrapSendableWithSize: (para1:object, para2:string) => void;
export const TestLatin1: (para) => string;
export const napCreateArrayBuffer: () => ArrayBuffer;
export const naiGetArrayBufferInfo: () => number;
export const napiCreateFunction: () => Function;
export const napiDefineClass: () => number;
export const napiCancelAsyncWork: () => number;
export const napiCallThreadsafeFunction: () => number;
export const napiCreateThreadsafeFunction: () => number;
export const napiRefthreadSafeFunction: () => number;
export const napiCreateDate: () => number;
export const napiCreateBigintUint64: () => number;
export const napiCreateBigintInt64: () => number;
export const napiCreateBigintWords: () => number;
export const napiGetCbInfo: (number) => number;
export const referenceRefAndUnref: () => number;
export const createSymbol: (para:string) => number;
export const createAndGetInt64: (para:number) => number;
export const getTypedArrayInfo: () => number;
export const getDataViewInfo: (para:void) => number;
export const openAndCloseHandleScope: () => void;
export const openAndCloseEscapableHandleScope: () => object;
export const createReference: () => number;
export const createArrayAndGetLength: (para:Array<number>) => Array<number>;
export const getArrayWithLength: (para:Array<number>) => Array<number>;
export const createExternal: () => number;
export const createExternalArraybuffer: () => ArrayBuffer;
export const createObject: () => object;
export const createTypeArray: () => Int32Array;
export const createDataView: () => DataView;
export const createAndGetInt32: (para:number) => number;
export const createAndGetUInt32: (para:number) => number;
export const createDouble: (para:number) => number;
export const createAndGetStringLatin1: (para:string) => string;
export const createAndGetStringUtf8: (para:string) => string;
export const getPrototype: () => object;
export const getPrototype2: (para: Function) => object;
export const getValueBool: (para: boolean) => boolean;
export const getValueDouble: (para:number) => number;
export const getValueExternal: () => number;
export const getNull: () => number;
export const getUndefined: () => number;
export const coerceToBool: (para: number) => boolean;
export const coerceToNumber: (para:string) => number;
export const coerceToObject: (para:Array<number>) => string;
export const coerceToString: (para) => string;
export const instanceOf: () => boolean;
export const isArray: () => number;
export const isDate: (para:Date) => boolean;
export const strictEquals: () => number;
export const getPropertyNames: () => number;
export const setProperty: () => object;
export const getProperty: () => object;
export const hasProperty: () => number;
export const setAndDeleteProperty: (object, string) => number;
export const hasOwnProperty: (object, string) => boolean;
export const setNamedProperty: (Array, string, boolean) => boolean;
export const getNamedProperty: (object, string) => number;
export const hasNamedProperty: (object, string) => boolean;
export const setElement: () => object;
export const getElement: () => object;
export const hasElement: () => object;
export const deleteElement: () => object;
export const defineProperties: () => object;
export const wrap: () => number;
export const unwrap: () => number;
export const removeWrap: () => number;
export const getVersion: () => number;
export const createPromise: () => number;
export const resolveAndRejectDeferred: () => number;
export const isPromise: () => number;
export const runScript: (string) => object;
export const callFunction: (Function) => number;
export const getUvEventLoop: () => object;
export class myClass {
  sayHello();
}
export const getGlobal: () => object;
export const testAsyncWork: (time: number, callback: (input: number) => number) => number;
export const testPromise: (number) => Promise<number>;
export const ThreadSafeTest: (callback: () => number) => number;
export const getAndClearLastException: () => number;
export const getLastErrorInfo: () => number;
export const cleanUpErrorInfo: () => boolean;
export const throwExistingError: () => number;
export const throwError: () => number;
export const throwTypeError: () => number;
export const throwRangeError: () => number;
export const isError: (boolean) => boolean;
export const createError: () => number;
export const createTypeError: () => number;
export const createRangeError: () => number;
export const isExceptionPending: () => number;
export const createAndGetStringUtf16: (string) => string;
export const stringUtf16OfCase: (string) => string;
export const typeTaggedInstance: (number) => object;
export const checkTypeTag: (number, object) => boolean;
export const stringUtf16OfLengthLeZero: (string) => string;
export const stringUtf16OfLengthEqOne: (string) => string;
export const stringUtf8OfLengthLeZero: (string) => string;
export const TestUtf8: (boolean) => void;
export const TestUtf16: (number) => void;
export const NapiCreateFunctionTwo: () => Function;
export const NewTargetTest: () => void;
export const napiLoadModule: () => number;
export const asyncWorkWithQos: (time: number, callback: (input: number) => number) => number;
export const createObjectWithProperties: () => number;
export const createObjectWithNamedProperties: () => number;
export const makeCallback: (para1, para2, para3) => void;
export const makeCallbackOne: (para1, para2, para3: (...args:number[]) => number, ...args:number[]) => number;
export const napiSerialize: () => number;
export const napiDeSerialize: () => number;
export const napiDeleteSerializationData: () => number;
export const napiSerializeDate: () => number;
export const napiSerializeString: () => number;
export const napiSerializeArray: () => number;
export const napiSerializeObject: () => number;
export const napiSerializeArraybuffer: () => number;
export const napiSerializeTypearray: () => number;
export const napiSerializeSharedarraybuffer: (para) => number;
export const napiSerializeMap: (para) => number;
export const napiSerializeSet: (para) => number;
export const napiSerializeRegExp: (para) => number;
export const napiSetNamedProperty: () => number;
export const napiGetNamedProperty: () => number;
export const callAddNumFunction: (para1, para2) => number;
export const napiNewInstance: () => boolean;
export const napiCrateAndGetValueString: (para) => string;
export const exceptionalSetNamedProperty: () => string;
export const exceptionalGetNamedProperty: () => string;
export const exceptionalCallAddNumFunction: (para1, para2) => string;
export const exceptionalNapiNewInstance: () => string;
export const exceptionalNapiCrateAndGetValueString: (para) => string;
export const threadSafePriorityWithInvalidParam: () => number;
export const checkUnwrapFunc: (para) => number;
export const createSendableArrayTest: (para) => ArrayBuffer;
export const createSendableArrayWithLengthTest: (para) => ArrayBuffer;
export const createSendableObjectWithProperties: () => number;
export const napiWrapSendableTest: () => number;
export const napiWrapSendableWithSizeTest: () => number;
export const napiUnWrapSendableTest: () => number;
export const napiRemoveWrapSendableTest: () => number;
export const callLockAsyncAfterRunCleanupTest: (fn: Function) => void;
