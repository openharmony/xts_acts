/**
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import events_emitter from '@ohos.events.emitter';

class TextInputFontFamilyModifier  implements AttributeModifier<TextInputAttribute> {
    fontFamily: string | Resource  = 'HarmonyOS Sans';
    applyNormalAttribute(instance: TextInputAttribute): void {
      instance.fontFamily(this.fontFamily)
    }
  }


@Entry
@Component
struct TextInputFontFamily {
   
   
  @State fontFamily: string | Resource  = 'HarmonyOS Sans';
  @State textInputFontFamilyModifier: TextInputFontFamilyModifier = new TextInputFontFamilyModifier();

  private stateChangCallBack = (eventData: events_emitter.EventData) => {
    if (eventData != null) {
      console.info("TextFontFamily page state change called:" + JSON.stringify(eventData));

      if (eventData.data?.fontFamily != null) {
        console.info("[TextFontFamily page] fontFamily change data is " + eventData.data.fontFamily);

        let _fontFamily: string | Resource = eventData.data.fontFamily;
        if ( _fontFamily === 'app.string.font_family_regular'){
          _fontFamily = $r('app.string.font_family_regular');
          console.log("_fontFamily:" + _fontFamily);
        }
        this.fontFamily = _fontFamily;
        this.textInputFontFamilyModifier.fontFamily = _fontFamily;
      }
    }
  }
  

  onPageShow() {

    for( let i = 0; i < 2; i++)
    {
      let eventid = 830 + i;

      let stateChangeEvent: events_emitter.InnerEvent = {
        eventId: eventid,
        priority: events_emitter.EventPriority.LOW
      }
      events_emitter.on(stateChangeEvent, this.stateChangCallBack);

    }

  }

  
  
  build() {
    Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Start, justifyContent: FlexAlign.SpaceBetween }) { 
 
      // 设置字体列表。
      TextInput({ placeholder: 'input you word...' })
        //.fontFamily(this.fontFamily)
        .attributeModifier( this.textInputFontFamilyModifier )
        .border({ width: 1 }).padding(10)         
        .width('100%')        
        .key('key_textinput_fontFamily')
    }.height(600).width(350).padding({ left: 35, right: 35, top: 35 })
  }
}

 