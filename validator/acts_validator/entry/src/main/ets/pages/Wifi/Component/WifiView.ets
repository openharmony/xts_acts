/*
* Copyright (c) 2023 Hunan OpenValley Digital Industry Development Co., Ltd.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import Logger from '../../model/Logger'
import wifi from '@ohos.wifiManager'

const TAG: string = 'WifiView'
const WIFI_SEC_TYPE_INVALID: wifi.WifiSecurityType = 0;
const WIFI_SEC_TYPE_OPEN: wifi.WifiSecurityType = 1;

@Component
export struct WifiView {
  private wifi: wifi.WifiScanInfo | null = null;
  private securityString: string = '加密';
  @State isLock: boolean = true;

  aboutToAppear() {
    Logger.debug(TAG, `aboutToAppear ${JSON.stringify(this.wifi)}`)
    if (this.wifi) {
      if (this.wifi.securityType) {
        if (this.wifi.securityType === WIFI_SEC_TYPE_INVALID || this.wifi.securityType === WIFI_SEC_TYPE_OPEN) {
          this.securityString = '开放'
          this.isLock = false
        }
      }
    }
  }

  build() {
    Row() {
      Column() {
        if (this.wifi) {
          if (this.wifi.ssid) {
            Text(this.wifi.ssid)
              .fontSize(20)
              .width('100%')
          }
        }
        Text(this.securityString)
          .fontSize(18)
          .fontColor(Color.Gray)
          .width('100%')
      }
      .layoutWeight(1)

      Stack({ alignContent: Alignment.BottomEnd }) {
        Image($r('app.media.wifi'))
          .height(30)
          .width(30)
          .objectFit(ImageFit.Contain)
        if (this.isLock) {
          Image($r('app.media.lock'))
            .objectFit(ImageFit.Contain)
            .width(15)
            .height(15)
        }
      }
      .width(40)
      .height(40)
      .margin({ right: 10 })
    }
    .backgroundColor(Color.White)
    .width('100%')
    .padding(10)
  }
}