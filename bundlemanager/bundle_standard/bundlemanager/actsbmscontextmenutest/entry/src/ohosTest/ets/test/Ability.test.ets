/*
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import hilog from '@ohos.hilog';
import bundle from '@ohos.bundle.bundleManager';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium'
import { BusinessError } from '@kit.BasicServicesKit';

let bundleName = 'com.example.myapplication';
let bundleFlags = bundle.BundleFlag.GET_BUNDLE_INFO_WITH_HAP_MODULE;
let userId = 100;
let uid = 101010101;

export default function abilityTest() {
  describe('ActsAbilityTest', () => {
    // Defines a test suite. Two parameters are supported: test suite name and test suite function.
    beforeAll(() => {
      // Presets an action, which is performed only once before all test cases of the test suite start.
      // This API supports only one parameter: preset action function.
    })
    beforeEach(() => {
      // Presets an action, which is performed before each unit test case starts.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: preset action function.
    })
    afterEach(() => {
      // Presets a clear action, which is performed after each unit test case ends.
      // The number of execution times is the same as the number of test cases defined by **it**.
      // This API supports only one parameter: clear action function.
    })
    afterAll(() => {
      // Presets a clear action, which is performed after all test cases of the test suite end.
      // This API supports only one parameter: clear action function.
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo_7061
     * @tc.name: getBundleInfoForSelfSyncFileContextMenu
     * @tc.desc: Test getBundleInfoForSelfSync with fileContextMenuConfig flag.
     */
    it('getBundleInfoForSelfSyncFileContextMenu', 0, async (done: Function) => {
      let data = bundle.getBundleInfoForSelfSync(bundle.BundleFlag.GET_BUNDLE_INFO_WITH_HAP_MODULE |
      bundle.BundleFlag.GET_BUNDLE_INFO_WITH_MENU);
      console.info("getBundleInfoForSelfSyncFileContextMenu" + JSON.stringify(data.hapModulesInfo));
      console.info("data.hapModulesInfo[0].fileContextMenuConfig" +
      JSON.stringify(data.hapModulesInfo[0].fileContextMenuConfig));
      expect(data.appInfo).assertEqual(null);
      expect(data.hapModulesInfo.length).assertEqual(2);
      expect(data.hapModulesInfo[0].icon).assertEqual("$media:icon");
      expect(data.hapModulesInfo[0].iconId).assertLarger(0);
      expect(data.hapModulesInfo[0].label).assertEqual("$string:EntryAbility_label");
      expect(data.hapModulesInfo[0].labelId).assertLarger(0);
      expect(data.hapModulesInfo[0].description).assertEqual("$string:module_desc");
      expect(data.hapModulesInfo[0].descriptionId).assertLarger(0);
      expect(data.hapModulesInfo[0].mainElementName).assertEqual("EntryAbility");
      expect(data.hapModulesInfo[0].abilitiesInfo.length).assertEqual(0);
      expect(data.hapModulesInfo[0].extensionAbilitiesInfo.length).assertEqual(0);
      expect(data.hapModulesInfo[0].metadata.length).assertEqual(0);
      expect(data.hapModulesInfo[0].deviceTypes.length).assertEqual(0);
      expect(data.hapModulesInfo[0].installationFree).assertFalse();
      expect(data.hapModulesInfo[0].hashValue).assertEqual("");
      expect(data.hapModulesInfo[0].fileContextMenuConfig)
        .assertEqual("{\"src\":[\"pages/Index\"]}");
      expect(data.hapModulesInfo[0].routerMap.length).assertEqual(0);
      expect(data.hapModulesInfo[0].codePath).assertEqual("/data/storage/el1/bundle/entry.hap");
      expect(data.hapModulesInfo[0].nativeLibraryPath).assertEqual("");
      expect(data.routerMap.length).assertEqual(0);
      expect(data.reqPermissionDetails.length).assertEqual(0);
      expect(data.permissionGrantStates.length).assertEqual(0);
      expect(data.signatureInfo).assertEqual(null);
      done();
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo2_2200
     * @tc.name: getBundleInfoOtherUnPermissionApi14
     * @tc.desc: Test getBundleInfo unPermission query other bundle for api14.
     */
    it('getBundleInfoOtherUnPermissionApi14', 0, async (done: Function) => {
      try {
        await bundle.getBundleInfo(bundleName, bundleFlags, userId).then(data => {
          console.info("getBundleInfoOtherUnPermissionApi14 promise success " + JSON.stringify(data));
          expect().assertFail();
        }).catch((err: BusinessError) => {
          console.info("getBundleInfoOtherUnPermissionApi14 promise error " + JSON.stringify(err));
          expect(err.code).assertEqual(201);
        })
      } catch (err) {
        console.info("getBundleInfoOtherUnPermissionApi14 catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
      try {
        bundle.getBundleInfo(bundleName, bundleFlags, userId, (err, data) => {
          console.info("getBundleInfoOtherUnPermissionApi14 callback success " + JSON.stringify(data));
          console.info("getBundleInfoOtherUnPermissionApi14 callback error " + JSON.stringify(err));
          expect(data).assertUndefined();
          expect(err.code).assertEqual(201);
        });
      } catch (err) {
        console.info("getBundleInfoOtherUnPermissionApi14 callback catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
      try {
        bundle.getBundleInfo(bundleName, bundleFlags, (err, data) => {
          console.info("getBundleInfoOtherUnPermissionApi14 callback2 success " + JSON.stringify(data));
          console.info("getBundleInfoOtherUnPermissionApi14 callback2 error " + JSON.stringify(err));
          expect(data).assertUndefined();
          expect(err.code).assertEqual(201);
          done();
        });
      } catch (err) {
        console.info("getBundleInfoOtherUnPermissionApi14 callback2 catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo2_2300
     * @tc.name: getBundleInfoSyncOtherUnPermissionApi14
     * @tc.desc: Test getBundleInfoSync unPermission query other bundle for api14.
     */
    it('getBundleInfoSyncOtherUnPermissionApi14', 0, async (done: Function) => {
      try {
        bundle.getBundleInfoSync(bundleName, bundleFlags, userId)
        expect().assertFail();
        done();
      } catch (err) {
        console.info("getBundleInfoSyncOtherUnPermissionApi14 1 catch " + JSON.stringify(err));
        expect(err.code).assertEqual(201);
      }
      try {
        bundle.getBundleInfoSync(bundleName, bundleFlags)
        expect().assertFail();
        done();
      } catch (err) {
        console.info("getBundleInfoSyncOtherUnPermissionApi14 2 catch " + JSON.stringify(err));
        expect(err.code).assertEqual(201);
        done();
      }
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo2_2400
     * @tc.name: getBundleNameByUidSyncUnPermissionApi14
     * @tc.desc: Test getBundleNameByUidSync unPermission for api14.
     */
    it('getBundleNameByUidSyncUnPermissionApi14', 0, async (done: Function) => {
      try {
        bundle.getBundleNameByUidSync(uid)
        expect().assertFail();
        done();
      } catch (err) {
        console.info("getBundleNameByUidSyncUnPermissionApi14 1 catch " + JSON.stringify(err));
        expect(err.code).assertEqual(201);
        done();
      }
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo2_2500
     * @tc.name: getBundleNameByUidUnPermissionApi14
     * @tc.desc: Test getBundleNameByUid unPermission for api14.
     */
    it('getBundleNameByUidUnPermissionApi14', 0, async (done: Function) => {
      try {
        await bundle.getBundleNameByUid(uid).then(data => {
          console.info("getBundleNameByUidUnPermissionApi14 promise success " + JSON.stringify(data));
          expect().assertFail();
        }).catch((err: BusinessError) => {
          console.info("getBundleNameByUidUnPermissionApi14 promise error " + JSON.stringify(err));
          expect(err.code).assertEqual(201);
        })
      } catch (err) {
        console.info("getBundleNameByUidUnPermissionApi14 1 catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
      try {
        bundle.getBundleNameByUid(uid, (err, data) => {
          console.info("getBundleNameByUidUnPermissionApi14 callback2 success " + JSON.stringify(data));
          console.info("getBundleNameByUidUnPermissionApi14 callback2 error " + JSON.stringify(err));
          expect(data).assertUndefined();
          expect(err.code).assertEqual(201);
          done();
        });
      } catch (err) {
        console.info("getBundleNameByUidUnPermissionApi14 callback2 catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
    })

    /*
     * @tc.number: Sub_Bms_Framework_Query_AppInfo2_2600
     * @tc.name: getAppCloneIdentityUnPermissionApi14
     * @tc.desc: Test getAppCloneIdentity unPermission for api14.
     */
    it('getAppCloneIdentityUnPermissionApi14', 0, async (done: Function) => {
      try {
        bundle.getAppCloneIdentity(uid).then(data => {
          console.info("getAppCloneIdentityUnPermissionApi14 success " + JSON.stringify(data));
          expect().assertFail();
          done();
        }).catch((err: BusinessError) => {
          console.info("getAppCloneIdentityUnPermissionApi14 promise " + JSON.stringify(err));
          expect(err.code).assertEqual(201);
          done();
        })
      } catch (err) {
        console.info("getAppCloneIdentityUnPermissionApi14 1 catch " + JSON.stringify(err));
        expect().assertFail();
        done();
      }
    })

  })
}