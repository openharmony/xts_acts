import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { window } from '@kit.ArkUI';
import commonEventManager from '@ohos.commonEventManager';
import { BusinessError } from '@kit.BasicServicesKit';

export default class EntryAbility extends UIAbility {
  private onCreateFlag = false;
  private onWindowStageCreateFlag = false;
  private onForegroundFlag = false;
  private onBackgroundFlag = false;
  private onNewWantFlag = false;
  private onDestroyFlag = false;
  private TEST_CASE_NAME = '';

  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'singleEntry Ability onCreate');
    hilog.info(0x0000, 'testTag', '%{public}s', `Wantyy4: ${JSON.stringify(want)}`);
    hilog.info(0x0000, 'testTag', '%{public}s', `Wantyy4: ${JSON.stringify(this.onCreateFlag)}`);
    this.TEST_CASE_NAME = want.action as string;
    this.onCreateFlag = true
  }

  onDestroy(): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');
    this.onDestroyFlag = true;
    let commonEventData: commonEventManager.CommonEventPublishData = {
      parameters: {
        data: {
          "onDestroyFlag": this.onDestroyFlag
        }
      }
    }
    try {
      commonEventManager.publish(`${this.TEST_CASE_NAME}_onDestroyHap_1`, commonEventData,
        (err: BusinessError) => {
          hilog.info(0x0000, 'testTag', '%{public}s',
            `onConnect SUB_Ability_AbilityRuntime_StartAndTerminate_StartAbility_0100 err:,${JSON.stringify(err)}`);
        });
    } catch (error) {
      hilog.info(0x0000, 'testTag', '%{public}s',
        `onConnect SUB_Ability_AbilityRuntime_StartAndTerminate_StartAbility_0100 error:, ${JSON.stringify(error)}`);
    }
  }

  onWindowStageCreate(windowStage: window.WindowStage): void {
    // Main window is created, set main page for this ability
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');
    hilog.info(0x0000, 'testTag', '%{public}s', `Wantyy: ${JSON.stringify(this.onWindowStageCreateFlag)}`);
    this.onWindowStageCreateFlag = true

    windowStage.loadContent('pages/Index', (err) => {
      if (err.code) {
        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');
        return;
      }
      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');
    });

    if (this.TEST_CASE_NAME === 'SUB_Ability_AbilityRuntime_StartAndTerminate_StartAbility_0100') {
      return;
    }
  }

  onWindowStageDestroy(): void {
    // Main window is destroyed, release UI related resources
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');
  }

  onNewWant(): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');

  }

  onForeground(): void {
    // Ability has brought to foreground
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');
    this.onForegroundFlag = true;

    let commonEventData: commonEventManager.CommonEventPublishData = {
      parameters: {
        data: {
          "onCreateFlag": this.onCreateFlag,
          "onWindowStageCreateFlag": this.onWindowStageCreateFlag,
          "onForegroundFlag": this.onForegroundFlag
        }
      }
    }
    try {
      commonEventManager.publish(`${this.TEST_CASE_NAME}_onForegroundHap_1`, commonEventData,
        (err: BusinessError) => {
          hilog.info(0x0000, 'testTag', '%{public}s',
            `onConnect SUB_Ability_AbilityRuntime_StartAndTerminate_StartAbility_0100 err:,${JSON.stringify(err)}`);
        });
    } catch (error) {
      hilog.info(0x0000, 'testTag', '%{public}s',
        `onConnect SUB_Ability_AbilityRuntime_StartAndTerminate_StartAbility_0100 error:, ${JSON.stringify(error)}`);
    }

    let want: Want = {
      deviceId: '', // deviceId为空表示本设备
      bundleName: 'com.example.actsapplicationstartabilitytest',
      abilityName: 'EntryAbility11',
      action: this.TEST_CASE_NAME,
      parameters: {
        instanceKey: this.TEST_CASE_NAME
      }
    };
    this.context.startAbility(want).then((data) => {
      hilog.info(0x0000, 'testTag', '%{public}s', `${this.TEST_CASE_NAME} Succeeded in starting  ${data}`);
    }).catch((err: BusinessError) => {
      hilog.info(0x0000, 'testTag', '%{public}s',
        `${this.TEST_CASE_NAME} Failed to start SpecifiedAbility. err.Code is ${err.code}  err.message is ${err.message}`);
    })
  }

  onBackground(): void {
    // Ability has back to background
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');
    this.onBackgroundFlag = true
    let commonEventData: commonEventManager.CommonEventPublishData = {
      parameters: {
        data: {
          "onBackgroundFlag": this.onBackgroundFlag
        }
      }
    }
    commonEventManager.publish(`${this.TEST_CASE_NAME}_onBackgroundHap_1`, commonEventData, (result) => {
      hilog.info(0x0000, 'testTag', '%{public}s', `onConnect, 50==: ${JSON.stringify(result)}`);
    });
    setTimeout(()=>{
      this.context.terminateSelf()
    },2000)
  }

  sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}