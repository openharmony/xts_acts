/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { afterAll, afterEach, beforeAll, beforeEach, describe, expect, it } from '@ohos/hypium';
import childProcessManager from '@ohos.app.ability.childProcessManager';
import { ChildProcessArgs } from '@ohos.app.ability.ChildProcessArgs';
import abilityDelegatorRegistry from '@ohos.app.ability.abilityDelegatorRegistry';
import fs from '@ohos.file.fs';
import systemParameterEnhance from '@ohos.systemParameterEnhance';
import { ChildProcessOptions } from '@ohos.app.ability.ChildProcessOptions';
import testNapi from 'libentry.so';
import util from '@ohos.util';

export default function nativeProcessTest() {
  describe('StartNativeChildProcessTest', () => {
    let abilityDelegator = abilityDelegatorRegistry.getAbilityDelegator()
    let pid = 0;
    let mpEnable: Boolean = false;

    beforeAll(() => {
      try {
        mpEnable = systemParameterEnhance.getSync('persist.sys.abilityms.multi_process_model') === 'true';
      } catch (err) {
        console.error(`ACTS_NativeStartChildProcess Get system parameter error: ${JSON.stringify(err)}`);
        mpEnable = false;
      }
    })
    beforeEach(() => {
    })
    afterEach(async () => {
      if (pid > 0) {
        console.log(`afterEach() kill pid: ${pid}`)
        await abilityDelegator.executeShellCommand(`kill -9 ${pid}`);
        pid = 0;
        await sleep(500);
      }
    })
    afterAll(() => {
    })

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0100
     * @tc.name   : Call StartNativeChildProcess to create a child process, give param correct entryPoint, args
     *              and isolationMode false
     * @tc.desc   : Expect: 1.Return child pid 2.read Result: 'SUCC'
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0100', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0100`;
      console.log(`${tag} it begin`);
      let path = abilityDelegator.getAppContext().filesDir + "/test.txt";
      let fileContent = 'test';
      writeFile(path, fileContent);
      console.log(`${tag} write file end`);
      let file = fs.openSync(path, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE | fs.OpenMode.TRUNC);
      try {
        let args: ChildProcessArgs = {
          entryParams: 'testEntryParams',
          fds: {
            'fd1': file.fd
          }
        };
        let options: ChildProcessOptions = {
          isolationMode: false
        };

        await sleep(500);
        console.log(`${tag} startNativeChildProcess before,fd1:${file.fd}, isolation:${options.isolationMode}`);
        pid = await childProcessManager.startNativeChildProcess("libentry.so:Main", args, options);
        console.log(`${tag} StartNativeChildProcess success, pid: ${pid}`);
        fs.closeSync(file.fd);
        expect(pid > 0).assertTrue();
        await sleep(3000);
        let result = readFile(path);
        expect(result).assertEqual('SUCC');
        done();
      } catch (err) {
        fs.closeSync(file.fd);
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        if (!mpEnable && err.code == 801) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      }
    });

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0200
     * @tc.name   : Call StartNativeChildProcess to create a child process, give param correct entryPoint, args
     *              and isolationMode true
     * @tc.desc   : Expect: 1.Return child pid 2.read Result: 'SUCC'
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0200', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0200`;
      console.log(`${tag} it begin`);
      let path = abilityDelegator.getAppContext().filesDir + "/test.txt";
      let fileContent = 'test';
      writeFile(path, fileContent);
      console.log(`${tag} write file end`);
      let file = fs.openSync(path, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE | fs.OpenMode.TRUNC);
      try {
        let args: ChildProcessArgs = {
          entryParams: 'testEntryParams',
          fds: {
            'fd1': file.fd
          }
        };
        let options: ChildProcessOptions = {
          isolationMode: true
        };

        await sleep(500);
        console.log(`${tag} startNativeChildProcess before,fd1:${file.fd}, isolation:${options.isolationMode}`);
        pid = await childProcessManager.startNativeChildProcess("libentry.so:Main", args, options);
        console.log(`${tag} StartNativeChildProcess success, pid: ${pid}`);
        fs.closeSync(file.fd);
        expect(pid > 0).assertTrue();
        await sleep(3000);
        let result = readFile(path);
        expect(result).assertEqual('SUCC');
        done();
      } catch (err) {
        fs.closeSync(file.fd);
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        if (!mpEnable && err.code == 801) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      }
    });

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0300
     * @tc.name   : Call StartNativeChildProcess to create a child process, give param correct entryPoint and no args
     * @tc.desc   : Expect: 1.Return child pid 2.read Result: 'SUCC'
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0300', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0300`;
      console.log(`${tag} it begin`);
      try {
        let args: ChildProcessArgs = {};
        let options: ChildProcessOptions = {
          isolationMode: true
        };

        await sleep(500);
        console.log(`${tag} startNativeChildProcess before,emtry args, isolation:${options.isolationMode}`);
        pid = await childProcessManager.startNativeChildProcess("libentry.so:Main", args, options);
        console.log(`${tag} StartNativeChildProcess success, pid: ${pid}`);
        expect(pid > 0).assertTrue();
        await sleep(3000);
        done();
      } catch (err) {
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        if (!mpEnable && err.code == 801) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      }
    });

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0400
     * @tc.name   : Call OH_Ability_StartNativeChildProcess to create a child process, give param correct entryPoint,
     *              args and isolationMode true
     * @tc.desc   : Expect: 1.Return ret = 0 2.read Result: 'SUCC'
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0400', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0400`;
      try {
        console.log(`${tag} startNativeChildProcess before`);
        let ret = testNapi.startChildIsolated();
        console.log(`${tag} startNativeChildProcess ret:${ret}, mpEnable:${mpEnable}`);
        if (ret == 0) {
          await sleep(3000);
          let path = abilityDelegator.getAppContext().filesDir + "/test.txt";
          let result = readFile(path);
          expect(result).assertEqual('SUCC');
          done();
        } else if (!mpEnable && ret == 16010004) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      } catch (err) {
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        expect().assertFail();
        done();
      }
    });

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0500
     * @tc.name   : Call OH_Ability_StartNativeChildProcess to create a child process, give param correct entryPoint,
     *              args and isolationMode false
     * @tc.desc   : Expect: 1.Return ret = 0 2.read Result: 'SUCC'
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0500', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0500`;
      try {
        console.log(`${tag} startNativeChildProcess before`);
        let ret = testNapi.startChildIsolated();
        console.log(`${tag} startNativeChildProcess ret:${ret}`);
        if (ret == 0) {
          await sleep(3000);
          let path = abilityDelegator.getAppContext().filesDir + "/test.txt";
          let result = readFile(path);
          expect(result).assertEqual('SUCC');
          done();
        } else if (!mpEnable && ret == 16010004) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      } catch (err) {
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        expect().assertFail();
        done();
      }
    });

    /*
     * @tc.number : SUB_Ability_AbilityRuntime_StartNativeChildProcess_0600
     * @tc.name   : Call OH_Ability_StartNativeChildProcess to create a child process, give param correct entryPoint,
     *              no args and isolationMode true
     * @tc.desc   : Expect: 1.Return ret = 0
     * @tc.type   : Function
     * @tc.size   : MediumTest
     * @tc.level  : 0
     */
    it('SUB_Ability_AbilityRuntime_StartNativeChildProcess_0600', 0, async (done: Function) => {
      let tag = `StartNativeChildProcess_0600`;
      try {
        console.log(`${tag} startNativeChildProcess before`);
        let ret = testNapi.startChildNoArgs();
        console.log(`${tag} startNativeChildProcess ret:${ret}`);
        await sleep(1000);
        if (ret == 0) {
          done();
        } else if (!mpEnable && ret == 16010004) {
          done();
        } else {
          expect().assertFail();
          done();
        }
      } catch (err) {
        console.error(`${tag} StartNativeChildProcess error, errorCode: ${err.code}`);
        expect().assertFail();
        done();
      }
    });

  });
}

function writeFile(path: string, text: string) {
  let file = fs.openSync(path, fs.OpenMode.READ_WRITE | fs.OpenMode.CREATE | fs.OpenMode.TRUNC);
  fs.writeSync(file.fd, text);
  fs.closeSync(file);
}

function readFile(path: string): string {
  let file = fs.openSync(path, fs.OpenMode.READ_ONLY);
  let buf = new ArrayBuffer(4);
  fs.readSync(file.fd, buf);
  let decoder = util.TextDecoder.create('utf-8');
  let str = decoder.decodeWithStream(new Uint8Array(buf));
  fs.closeSync(file.fd);
  return str;
}

function sleep(time: number) {
  return new Promise<void>((resolve, reject) => {
    setTimeout(resolve, time);
  });
}