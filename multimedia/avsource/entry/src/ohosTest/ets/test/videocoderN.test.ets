
    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4300
     * @tc.name       : testOHVideoEncoderReset043
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset043', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4400
     * @tc.name       : testOHVideoEncoderReset044
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset044', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4500
     * @tc.name       : testOHVideoEncoderReset045
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset045', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4600
     * @tc.name       : testOHVideoEncoderReset046
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset046', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4700
     * @tc.name       : testOHVideoEncoderReset047
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset047', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4800
     * @tc.name       : testOHVideoEncoderReset048
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset048', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_4900
     * @tc.name       : testOHVideoEncoderReset049
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset049', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,1,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5000
     * @tc.name       : testOHVideoEncoderReset050
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset050', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5100
     * @tc.name       : testOHVideoEncoderReset051
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset051', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5200
     * @tc.name       : testOHVideoEncoderReset052
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset052', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5300
     * @tc.name       : testOHVideoEncoderReset053
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset053', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5400
     * @tc.name       : testOHVideoEncoderReset054
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset054', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5500
     * @tc.name       : testOHVideoEncoderReset055
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset055', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5600
     * @tc.name       : testOHVideoEncoderReset056
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset056', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5700
     * @tc.name       : testOHVideoEncoderReset057
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset057', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,1,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5800
     * @tc.name       : testOHVideoEncoderReset058
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset058', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_5900
     * @tc.name       : testOHVideoEncoderReset059
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset059', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6000
     * @tc.name       : testOHVideoEncoderReset060
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset060', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6100
     * @tc.name       : testOHVideoEncoderReset061
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset061', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6200
     * @tc.name       : testOHVideoEncoderReset062
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset062', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6300
     * @tc.name       : testOHVideoEncoderReset063
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset063', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6400
     * @tc.name       : testOHVideoEncoderReset064
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset064', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_RESET_6500
     * @tc.name       : testOHVideoEncoderReset065
     * @tc.desc       : test OH_VideoEncoder_Reset
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderReset065', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderReset(0,0,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0100
     * @tc.name       : testOHVideoEncoderGetOutputDescription001
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription001', 0, async (done: Function) => {
        try{
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,1,1,1,1);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription001 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0200
     * @tc.name       : testOHVideoEncoderGetOutputDescription002
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription002', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(2,1,1,1,1,1,1);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription002 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0300
     * @tc.name       : testOHVideoEncoderGetOutputDescription003
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0400
     * @tc.name       : testOHVideoEncoderGetOutputDescription004
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription004', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,1,0,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription004 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0500
     * @tc.name       : testOHVideoEncoderGetOutputDescription005
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription005', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0600
     * @tc.name       : testOHVideoEncoderGetOutputDescription006
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription006', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,0,1,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription006 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0700
     * @tc.name       : testOHVideoEncoderGetOutputDescription007
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription007', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0800
     * @tc.name       : testOHVideoEncoderGetOutputDescription008
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription008', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,0,0,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription008 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_0900
     * @tc.name       : testOHVideoEncoderGetOutputDescription009
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription009', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,1,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1000
     * @tc.name       : testOHVideoEncoderGetOutputDescription010
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription010', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,1,1,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription010 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1100
     * @tc.name       : testOHVideoEncoderGetOutputDescription011
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription011', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1200
     * @tc.name       : testOHVideoEncoderGetOutputDescription012
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription012', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,1,0,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription012 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1300
     * @tc.name       : testOHVideoEncoderGetOutputDescription013
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription013', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1400
     * @tc.name       : testOHVideoEncoderGetOutputDescription014
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription014', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,0,1,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription014 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1500
     * @tc.name       : testOHVideoEncoderGetOutputDescription015
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription015', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1600
     * @tc.name       : testOHVideoEncoderGetOutputDescription016
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription016', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,0,0,1,0);
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetOutputDescription016 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1700
     * @tc.name       : testOHVideoEncoderGetOutputDescription017
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription017', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,1,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1800
     * @tc.name       : testOHVideoEncoderGetOutputDescription018
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription018', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_1900
     * @tc.name       : testOHVideoEncoderGetOutputDescription019
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription019', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2000
     * @tc.name       : testOHVideoEncoderGetOutputDescription020
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription020', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2100
     * @tc.name       : testOHVideoEncoderGetOutputDescription021
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription021', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2200
     * @tc.name       : testOHVideoEncoderGetOutputDescription022
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription022', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2300
     * @tc.name       : testOHVideoEncoderGetOutputDescription023
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription023', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2400
     * @tc.name       : testOHVideoEncoderGetOutputDescription024
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription024', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2500
     * @tc.name       : testOHVideoEncoderGetOutputDescription025
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription025', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,1,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2600
     * @tc.name       : testOHVideoEncoderGetOutputDescription026
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription026', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2700
     * @tc.name       : testOHVideoEncoderGetOutputDescription027
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription027', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2800
     * @tc.name       : testOHVideoEncoderGetOutputDescription028
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription028', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_2900
     * @tc.name       : testOHVideoEncoderGetOutputDescription029
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription029', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3000
     * @tc.name       : testOHVideoEncoderGetOutputDescription030
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription030', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3100
     * @tc.name       : testOHVideoEncoderGetOutputDescription031
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription031', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3200
     * @tc.name       : testOHVideoEncoderGetOutputDescription032
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription032', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3300
     * @tc.name       : testOHVideoEncoderGetOutputDescription033
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription033', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(1,0,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3400
     * @tc.name       : testOHVideoEncoderGetOutputDescription034
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription034', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3500
     * @tc.name       : testOHVideoEncoderGetOutputDescription035
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription035', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3600
     * @tc.name       : testOHVideoEncoderGetOutputDescription036
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription036', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3700
     * @tc.name       : testOHVideoEncoderGetOutputDescription037
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription037', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3800
     * @tc.name       : testOHVideoEncoderGetOutputDescription038
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription038', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_3900
     * @tc.name       : testOHVideoEncoderGetOutputDescription039
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription039', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4000
     * @tc.name       : testOHVideoEncoderGetOutputDescription040
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription040', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4100
     * @tc.name       : testOHVideoEncoderGetOutputDescription041
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription041', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,1,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4200
     * @tc.name       : testOHVideoEncoderGetOutputDescription042
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription042', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4300
     * @tc.name       : testOHVideoEncoderGetOutputDescription043
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription043', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4400
     * @tc.name       : testOHVideoEncoderGetOutputDescription044
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription044', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4500
     * @tc.name       : testOHVideoEncoderGetOutputDescription045
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription045', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4600
     * @tc.name       : testOHVideoEncoderGetOutputDescription046
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription046', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4700
     * @tc.name       : testOHVideoEncoderGetOutputDescription047
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription047', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4800
     * @tc.name       : testOHVideoEncoderGetOutputDescription048
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription048', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_4900
     * @tc.name       : testOHVideoEncoderGetOutputDescription049
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription049', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,1,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5000
     * @tc.name       : testOHVideoEncoderGetOutputDescription050
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription050', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5100
     * @tc.name       : testOHVideoEncoderGetOutputDescription051
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription051', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5200
     * @tc.name       : testOHVideoEncoderGetOutputDescription052
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription052', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5300
     * @tc.name       : testOHVideoEncoderGetOutputDescription053
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription053', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5400
     * @tc.name       : testOHVideoEncoderGetOutputDescription054
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription054', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5500
     * @tc.name       : testOHVideoEncoderGetOutputDescription055
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription055', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5600
     * @tc.name       : testOHVideoEncoderGetOutputDescription056
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription056', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5700
     * @tc.name       : testOHVideoEncoderGetOutputDescription057
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription057', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,1,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5800
     * @tc.name       : testOHVideoEncoderGetOutputDescription058
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription058', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,1,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_5900
     * @tc.name       : testOHVideoEncoderGetOutputDescription059
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription059', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,1,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6000
     * @tc.name       : testOHVideoEncoderGetOutputDescription060
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription060', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,1,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6100
     * @tc.name       : testOHVideoEncoderGetOutputDescription061
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription061', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,1,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6200
     * @tc.name       : testOHVideoEncoderGetOutputDescription062
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription062', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,0,1,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6300
     * @tc.name       : testOHVideoEncoderGetOutputDescription063
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription063', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,0,1,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6400
     * @tc.name       : testOHVideoEncoderGetOutputDescription064
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription064', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,0,0,1,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETOUTPUTDESCRIPTION_6500
     * @tc.name       : testOHVideoEncoderGetOutputDescription065
     * @tc.desc       : test OH_VideoEncoder_GetOutputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetOutputDescription065', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetOutputDescription(0,0,0,0,0,0,0);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_SETPARAMETER_0100
     * @tc.name       : testOHVideoEncoderSetParameter001
     * @tc.desc       : test OH_VideoEncoder_SetParameter
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderSetParameter001', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderSetParameter();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderSetParameter001 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_SETPARAMETER_0200
     * @tc.name       : testOHVideoEncoderSetParameter002
     * @tc.desc       : test OH_VideoEncoder_SetParameter
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderSetParameter002', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderSetParameterHEVC();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderSetParameter002 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_SETPARAMETER_0300
     * @tc.name       : testOHVideoEncoderSetParameter003
     * @tc.desc       : test OH_VideoEncoder_SetParameter
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderSetParameter003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderSetParameterAbnormal();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETINPUTDESCRIPTION_0100
     * @tc.name       : testOHVideoEncoderGetInputDescription001
     * @tc.desc       : test OH_VideoEncoder_GetInputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetInputDescription001', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetInputDescription();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetInputDescription001 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETINPUTDESCRIPTION_0200
     * @tc.name       : testOHVideoEncoderGetInputDescription002
     * @tc.desc       : test OH_VideoEncoder_GetInputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetInputDescription002', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderGetInputDescriptionHEVC();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderGetInputDescription002 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_GETINPUTDESCRIPTION_0300
     * @tc.name       : testOHVideoEncoderGetInputDescription003
     * @tc.desc       : test OH_VideoEncoder_GetInputDescription
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderGetInputDescription003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderGetInputDescriptionAbnormal();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_ISVALID_0100
     * @tc.name       : testOHVideoEncoderIsValid001
     * @tc.desc       : test OH_VideoEncoder_IsValid
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderIsValid001', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderIsValid();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderIsValid001 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_ISVALID_0200
     * @tc.name       : testOHVideoEncoderIsValid002
     * @tc.desc       : test OH_VideoEncoder_IsValid
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderIsValid002', 0, async (done: Function) => {
        try {
            let result: number = videoencoderndk.oHVideoEncoderIsValidHEVC();
            expect(result != null).assertTrue();
            done();
        } catch (err) {
            console.info('testOHVideoEncoderIsValid002 failed, error is' + err.message);
            expect(false).assertTrue();
        }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_ISVALID_0300
     * @tc.name       : testOHVideoEncoderIsValid003
     * @tc.desc       : test OH_VideoEncoder_IsValid
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderIsValid003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderIsValidAbnormal();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_PUSHINPUTBUFFER_0100
     * @tc.name       : testOHVideoEncoderPushInputBuffer001
     * @tc.desc       : test OH_VideoEncoder_PushInputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderPushInputBuffer001', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderPushInputBuffer();
      expect(result).assertEqual(0);
      done();
    });

       /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_PUSHINPUTBUFFER_0200
     * @tc.name       : testOHVideoEncoderPushInputBuffer002
     * @tc.desc       : test OH_VideoEncoder_PushInputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderPushInputBuffer002', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderPushInputBufferHEVC();
      expect(result).assertEqual(0);
      done();
    });

       /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_PUSHINPUTBUFFER_0300
     * @tc.name       : testOHVideoEncoderPushInputBuffer003
     * @tc.desc       : test OH_VideoEncoder_PushInputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderPushInputBuffer003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderPushInputBufferAbnormal();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_FREEOUTPUTBUFFER_0100
     * @tc.name       : testOHVideoEncoderFreeOutputBuffer001
     * @tc.desc       : test OH_VideoEncoder_FreeOutputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderFreeOutputBuffer001', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderFreeOutputBuffer();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_FREEOUTPUTBUFFER_0200
     * @tc.name       : testOHVideoEncoderFreeOutputBuffer002
     * @tc.desc       : test OH_VideoEncoder_FreeOutputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderFreeOutputBuffer002', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderFreeOutputBufferHEVC();
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCODEC_VIDEOENCODER_OH_VIDEOENCODER_FREEOUTPUTBUFFER_0300
     * @tc.name       : testOHVideoEncoderFreeOutputBuffer003
     * @tc.desc       : test OH_VideoEncoder_FreeOutputBuffer
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHVideoEncoderFreeOutputBuffer003', 0, async (done: Function) => {
      let result: number = videoencoderndk.oHVideoEncoderFreeOutputBufferAbnormal();
      expect(result).assertEqual(0);
      done();
    });
  })
}