
    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_1700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported017
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported017', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_1800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported018
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported018', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_1900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported019
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported019', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported020
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported020', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported021
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported021', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported022
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported022', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,0,0,1,1,14);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported023
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported023', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported024
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported024', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported025
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported025', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported026
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported026', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported027
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported027', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported028
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported028', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_2900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported029
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported029', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,0,1,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported030
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported030', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,0,1,1,15);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported030 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported031
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported031', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported032
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported032', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported033
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported033', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported034
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported034', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported035
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported035', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported036
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported036', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported037
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported037', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,0,0,1,1,15);
      expect(result).assertEqual(0);
      done();
    });


    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported038
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported038', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_3900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported039
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported039', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported040
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported040', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported041
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported041', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported042
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported042', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported043
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported043', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,0,1,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported044
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported044', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,1,0,1,13);
        expect(result != null).assertTrue();
        done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported044 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported045
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported045', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported046
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported046', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported047
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported047', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported048
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported048', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_4900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported049
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported049', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(6,1,1,0,1,13);
        expect(result != null).assertTrue();
        done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported049 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported050
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported050', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported051
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported051', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,0,0,1,13);
        expect(result != null).assertTrue();
        done();
      } catch(err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported051 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported052
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported052', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported053
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported053', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported054
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported054', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported055
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported055', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported056
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported056', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported057
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported057', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported058
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported058', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,0,1,0,1,13);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_5900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported059
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported059', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported060
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported060', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported061
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported061', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported062
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported062', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported063
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported063', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(6,0,1,0,1,13);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported063 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported064
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported064', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,1,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported065
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported065', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,0,0,0,1,13);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported065 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported066
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported066', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported067
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported067', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported068
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported068', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_6900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported069
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported069', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,0,0,1,13);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported070
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported070', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(6,0,0,0,1,13);
        expect(result != null).assertTrue();
        done();
      } catch(err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported070 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported071
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported071', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(7,0,0,0,1,13);
        expect(result != null).assertTrue();
        done();
      } catch(err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported071 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported072
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported072', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,1,0,1,14);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported072 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported073
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported073', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported074
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported074', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported075
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported075', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported076
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported076', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported077
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported077', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported078
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported078', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_7900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported079
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported079', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported080
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported080', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported081
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported081', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported082
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported082', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported083
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported083', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported084
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported084', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported085
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported085', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported086
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported086', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,0,1,0,1,14);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported087
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported087', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported088
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported088', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_8900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported089
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported089', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported090
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported090', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported091
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported091', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported092
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported092', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,1,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported093
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported093', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,0,0,0,1,14);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported093 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported094
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported094', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported095
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported095', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported096
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported096', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported097
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported097', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported098
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported098', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_9900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported099
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported099', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,0,0,1,14);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported100
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported100', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,1,0,1,15);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported100 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported101
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported101', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported102
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported102', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported103
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported103', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported104
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported104', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported105
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported105', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported106
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported106', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported107
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported107', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,1,0,0,1,15);
        expect(result != null).assertTrue();
        done();
      } catch(err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported107 failed, error is' + err.message);
        expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported108
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported108', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_0900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported109
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported109', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported110
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported110', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported111
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported111', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported112
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported112', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported113
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported113', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,1,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported114
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported114', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(1,0,1,0,1,15);
      expect(result).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported115
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported115', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported116
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported116', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1700
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported117
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported117', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1800
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported118
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported118', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_1900
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported119
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported119', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2000
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported120
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported120', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(7,0,1,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2100
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported121
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported121', 0, async (done: Function) => {
      try {
        let result: number = native.decodeMainProcess(1,0,0,0,1,15);
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOHAvCapabilityAreProfileAndLevelSupported121 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2200
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported122
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported122', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(2,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2300
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported123
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported123', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(3,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2400
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported124
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported124', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(4,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2500
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported125
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported125', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(5,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED100_2600
     * @tc.name       : testOHAvCapabilityAreProfileAndLevelSupported126
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOHAvCapabilityAreProfileAndLevelSupported126', 0, async (done: Function) => {
      let result: number = native.decodeMainProcess(6,0,0,0,1,15);
      expect(result).assertEqual(-1);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_ISHARDWARE_0100
     * @tc.name       : testOhAvCapabilityIsHardware001
     * @tc.desc       : test OH_AVCapability_IsHardware
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityIsHardware001', 0, async (done: Function) => {
      try {
        let result: number = native.OH_AVCapability_IsHardware();
        expect(result != null).assertTrue();
        done();
      } catch (err) {
        console.info('testOhAvCapabilityIsHardware001 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_GETNAME_0100
     * @tc.name       : testOhAvCapabilityGetName001
     * @tc.desc       : test OH_AVCapability_GetName
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityGetName001', 0, async (done: Function) => {
      expect(native.OH_AVCapability_GetName()).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_GETMAXSUPPORTEDINSTANCES_0100
     * @tc.name       : testOhAvCapabilityGetMaxSupportedInstances001
     * @tc.desc       : test OH_AVCapability_GetMaxSupportedInstances
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityGetMaxSupportedInstances001', 0, async (done: Function) => {
      expect(native.OH_AVCapability_GetMaxSupportedInstances()).assertEqual(0);
      done();
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_GETENCODERBITRATERANGE_0100
     * @tc.name       : testOhAvCapabilityGetEncoderBitrateRange001
     * @tc.desc       : test OH_AVCapability_GetEncoderBitrateRange
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityGetEncoderBitrateRange001', 0, async (done: Function) => {
      try {
        let result: number = native.OH_AVCapability_GetEncoderBitrateRange();
        expect(result != null).assertTrue();
        done();
      } catch (err) {
        console.info('testOhAvCapabilityGetEncoderBitrateRange001 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_ISENCODERBITRATEMODESUPPORTED_0100
     * @tc.name       : testOhAvCapabilityIsEncoderBitrateModeSupported001
     * @tc.desc       : test OH_AVCapability_IsEncoderBitrateModeSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityIsEncoderBitrateModeSupported001', 0, async (done: Function) => {
      try {
        let result: number = native.OH_AVCapability_IsEncoderBitrateModeSupported();
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOhAvCapabilityIsEncoderBitrateModeSupported001 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_GETVIDEOWIDTHRANGEFORHEIGHT_0100
     * @tc.name       : testOhAvCapabilityGetVideoWidthRangeForHeight001
     * @tc.desc       : test OH_AVCapability_GetVideoWidthRangeForHeight
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityGetVideoWidthRangeForHeight001', 0, async (done: Function) => {
      try {
        let result: number = native.OH_AVCapability_GetVideoWidthRangeForHeight();
        expect(result != null).assertTrue();
	      done();
      } catch (err) {
        console.info('testOhAvCapabilityGetVideoWidthRangeForHeight001 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_GETVIDEOHEIGHTRANGEFORWIDTH_0100
     * @tc.name       : testOhAvCapabilityGetVideoHeightRangeForWidth001
     * @tc.desc       : test OH_AVCapability_GetVideoHeightRangeForWidth
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityGetVideoHeightRangeForWidth001', 0, async (done: Function) => {
      done();
      try {
        let result: number = native.OH_AVCapability_GetVideoHeightRangeForWidth();
        expect(result != null).assertTrue();
        done();
      } catch (err) {
        console.info('testOhAvCapabilityGetVideoHeightRangeForWidth001 failed, error is' + err.message);
	      expect(false).assertTrue();
      }
    });

    /**
     * @tc.number     : SUB_MULTIMEDIA_AV_CODEC_NATIVE_AVCAPABILITY_OH_AVCAPABILITY_AREPROFILEANDLEVELSUPPORTED_0100
     * @tc.name       : testOhAvCapabilityAreProfileAndLevelSupported001
     * @tc.desc       : test OH_AVCapability_AreProfileAndLevelSupported
     * @tc.size       : MediumTest
     * @tc.type       : Function
     * @tc.level      : Level 1
     */
    it('testOhAvCapabilityAreProfileAndLevelSupported001', 0, async (done: Function) => {
      expect(native.OH_AVCapability_AreProfileAndLevelSupported()).assertEqual(0);
      done();
    });
  })
}